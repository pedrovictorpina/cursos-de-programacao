/*
==============================================
CURSO DE JAVASCRIPT - M√ìDULO 3.3
CLOSURES E ESCOPO
==============================================

Objetivos de Aprendizagem:
- Compreender os diferentes tipos de escopo em JavaScript
- Dominar o conceito de closures (fechamentos)
- Entender lexical scoping e scope chain
- Aplicar closures para criar fun√ß√µes especializadas
- Usar closures para encapsulamento e privacidade
- Evitar vazamentos de mem√≥ria com closures

‚è±Ô∏è TEMPO ESTIMADO: 60 minutos
üìä N√çVEL: Intermedi√°rio/Avan√ßado
==============================================
*/

// ==========================================
// üìö 1. TEORIA: ESCOPO E CLOSURES
// ==========================================

/*
ESCOPO √© o contexto onde vari√°veis e fun√ß√µes s√£o acess√≠veis.
Tipos de escopo em JavaScript:
1. Global Scope (Escopo Global)
2. Function Scope (Escopo de Fun√ß√£o)
3. Block Scope (Escopo de Bloco) - ES6+
4. Module Scope (Escopo de M√≥dulo)

CLOSURE √© quando uma fun√ß√£o "lembra" do ambiente lexical onde foi criada,
mesmo quando executada fora desse ambiente.

CONCEITOS IMPORTANTES:
- Lexical Scoping: Escopo determinado onde a fun√ß√£o √© definida
- Scope Chain: Cadeia de busca por vari√°veis
- Closure: Fun√ß√£o + ambiente lexical onde foi criada
- Garbage Collection: Limpeza autom√°tica de mem√≥ria
- Memory Leaks: Vazamentos de mem√≥ria com closures
*/

console.log('=== CLOSURES E ESCOPO ===');

// ==========================================
// üí° 2. EXEMPLOS PR√ÅTICOS
// ==========================================

// ========== ESCOPO GLOBAL ==========
console.log('\n--- ESCOPO GLOBAL ---');

// Vari√°veis no escopo global
var varGlobal = 'Vari√°vel global com var';
let letGlobal = 'Vari√°vel global com let';
const constGlobal = 'Constante global';

function demonstrarEscopoGlobal() {
    console.log('\nüåç Acessando vari√°veis globais:');
    console.log('var global:', varGlobal);
    console.log('let global:', letGlobal);
    console.log('const global:', constGlobal);
    
    // Criando vari√°vel global sem declara√ß√£o (m√° pr√°tica)
    // variavelImplicita = 'Criada sem var/let/const'; // ‚ùå Evitar!
}

demonstrarEscopoGlobal();

// ========== ESCOPO DE FUN√á√ÉO ==========
console.log('\n--- ESCOPO DE FUN√á√ÉO ---');

function demonstrarEscopoFuncao() {
    // Vari√°veis locais da fun√ß√£o
    var varLocal = 'Vari√°vel local';
    let letLocal = 'Let local';
    const constLocal = 'Const local';
    
    console.log('\nüè† Dentro da fun√ß√£o:');
    console.log('var local:', varLocal);
    console.log('let local:', letLocal);
    console.log('const local:', constLocal);
    
    // Fun√ß√£o aninhada
    function funcaoAninhada() {
        console.log('\nü™Ü Fun√ß√£o aninhada acessando escopo pai:');
        console.log('Acesso a varLocal:', varLocal);
        console.log('Acesso a letLocal:', letLocal);
        console.log('Acesso a constLocal:', constLocal);
        
        // Vari√°vel local da fun√ß√£o aninhada
        const localAninhada = 'Vari√°vel da fun√ß√£o aninhada';
        console.log('Vari√°vel local aninhada:', localAninhada);
    }
    
    funcaoAninhada();
    
    // console.log(localAninhada); // ‚ùå Erro: n√£o acess√≠vel aqui
}

demonstrarEscopoFuncao();

// Tentativa de acesso fora da fun√ß√£o
// console.log(varLocal); // ‚ùå Erro: varLocal n√£o est√° definida

// ========== ESCOPO DE BLOCO (ES6+) ==========
console.log('\n--- ESCOPO DE BLOCO ---');

function demonstrarEscopoBloco() {
    console.log('\nüì¶ Demonstrando escopo de bloco:');
    
    // var n√£o respeita escopo de bloco
    if (true) {
        var varNoBloco = 'var no bloco';
        let letNoBloco = 'let no bloco';
        const constNoBloco = 'const no bloco';
        
        console.log('Dentro do bloco if:');
        console.log('var:', varNoBloco);
        console.log('let:', letNoBloco);
        console.log('const:', constNoBloco);
    }
    
    console.log('\nFora do bloco if:');
    console.log('var (acess√≠vel):', varNoBloco); // ‚úÖ Funciona
    // console.log('let:', letNoBloco); // ‚ùå Erro: n√£o acess√≠vel
    // console.log('const:', constNoBloco); // ‚ùå Erro: n√£o acess√≠vel
    
    // Demonstra√ß√£o com loop
    console.log('\nüîÑ Escopo em loops:');
    
    // Problema cl√°ssico com var
    console.log('Problema com var:');
    for (var i = 0; i < 3; i++) {
        setTimeout(() => {
            console.log('var i:', i); // Sempre imprime 3
        }, 10);
    }
    
    // Solu√ß√£o com let
    setTimeout(() => {
        console.log('\nSolu√ß√£o com let:');
        for (let j = 0; j < 3; j++) {
            setTimeout(() => {
                console.log('let j:', j); // Imprime 0, 1, 2
            }, 50);
        }
    }, 100);
}

demonstrarEscopoBloco();

// ========== INTRODU√á√ÉO A CLOSURES ==========
console.log('\n--- INTRODU√á√ÉO A CLOSURES ---');

// Exemplo b√°sico de closure
function criarContador() {
    let contador = 0; // Vari√°vel privada
    
    // Fun√ß√£o interna que "fecha" sobre a vari√°vel contador
    return function() {
        contador++;
        return contador;
    };
}

// Criando contadores independentes
const contador1 = criarContador();
const contador2 = criarContador();

console.log('\nüî¢ Testando closures com contadores:');
console.log('Contador 1 - primeira chamada:', contador1()); // 1
console.log('Contador 1 - segunda chamada:', contador1());  // 2
console.log('Contador 2 - primeira chamada:', contador2()); // 1
console.log('Contador 1 - terceira chamada:', contador1()); // 3
console.log('Contador 2 - segunda chamada:', contador2());  // 2

// Demonstrando que cada closure mant√©m seu pr√≥prio estado
console.log('\nüìä Cada closure mant√©m estado independente');

// ========== CLOSURES MAIS COMPLEXOS ==========
console.log('\n--- CLOSURES MAIS COMPLEXOS ---');

// Closure que retorna m√∫ltiplas fun√ß√µes
function criarCalculadora(valorInicial = 0) {
    let valor = valorInicial;
    
    return {
        somar: function(x) {
            valor += x;
            return valor;
        },
        
        subtrair: function(x) {
            valor -= x;
            return valor;
        },
        
        multiplicar: function(x) {
            valor *= x;
            return valor;
        },
        
        dividir: function(x) {
            if (x !== 0) {
                valor /= x;
            } else {
                console.log('Erro: Divis√£o por zero!');
            }
            return valor;
        },
        
        obterValor: function() {
            return valor;
        },
        
        resetar: function(novoValor = 0) {
            valor = novoValor;
            return valor;
        },
        
        // M√©todo para ver o hist√≥rico (demonstra√ß√£o avan√ßada)
        criarHistorico: function() {
            const historico = [];
            
            return {
                somar: function(x) {
                    valor += x;
                    historico.push(`+${x} = ${valor}`);
                    return valor;
                },
                
                subtrair: function(x) {
                    valor -= x;
                    historico.push(`-${x} = ${valor}`);
                    return valor;
                },
                
                obterHistorico: function() {
                    return [...historico]; // Retorna c√≥pia
                },
                
                obterValor: function() {
                    return valor;
                }
            };
        }
    };
}

// Testando calculadora com closure
const calc = criarCalculadora(10);

console.log('\nüßÆ Testando calculadora com closure:');
console.log('Valor inicial:', calc.obterValor());
console.log('Somar 5:', calc.somar(5));
console.log('Multiplicar por 2:', calc.multiplicar(2));
console.log('Subtrair 3:', calc.subtrair(3));
console.log('Dividir por 2:', calc.dividir(2));
console.log('Valor final:', calc.obterValor());

// Testando calculadora com hist√≥rico
const calcComHistorico = calc.criarHistorico();
console.log('\nüìù Calculadora com hist√≥rico:');
calcComHistorico.somar(10);
calcComHistorico.subtrair(5);
calcComHistorico.somar(3);
console.log('Hist√≥rico:', calcComHistorico.obterHistorico());
console.log('Valor atual:', calcComHistorico.obterValor());

// ========== FACTORY FUNCTIONS COM CLOSURES ==========
console.log('\n--- FACTORY FUNCTIONS COM CLOSURES ---');

// Factory para criar objetos com comportamento privado
function criarPessoa(nome, idadeInicial) {
    let idade = idadeInicial;
    let segredos = [];
    
    // Valida√ß√£o privada
    function validarIdade(novaIdade) {
        return typeof novaIdade === 'number' && novaIdade >= 0 && novaIdade <= 150;
    }
    
    return {
        // Propriedade p√∫blica
        nome,
        
        // M√©todos p√∫blicos
        obterIdade: function() {
            return idade;
        },
        
        envelhecer: function(anos = 1) {
            const novaIdade = idade + anos;
            if (validarIdade(novaIdade)) {
                idade = novaIdade;
                return `${nome} agora tem ${idade} anos`;
            } else {
                return 'Idade inv√°lida';
            }
        },
        
        definirIdade: function(novaIdade) {
            if (validarIdade(novaIdade)) {
                idade = novaIdade;
                return `Idade de ${nome} definida para ${idade} anos`;
            } else {
                return 'Idade inv√°lida';
            }
        },
        
        // M√©todos para segredos (demonstra√ß√£o de privacidade)
        contarSegredo: function(segredo) {
            segredos.push({
                segredo,
                data: new Date().toLocaleString('pt-BR')
            });
            return `Segredo guardado! Total: ${segredos.length}`;
        },
        
        quantosSegredos: function() {
            return segredos.length;
        },
        
        // M√©todo que retorna fun√ß√£o com closure
        criarApresentacao: function() {
            return function(contexto = 'geral') {
                const apresentacoes = {
                    formal: `Prezados, meu nome √© ${nome} e tenho ${idade} anos.`,
                    casual: `Oi! Eu sou ${nome}, tenho ${idade} anos.`,
                    profissional: `Sou ${nome}, ${idade} anos, prazer em conhec√™-los.`,
                    geral: `Meu nome √© ${nome} e tenho ${idade} anos.`
                };
                
                return apresentacoes[contexto] || apresentacoes.geral;
            };
        }
    };
}

// Testando factory com closures
const pessoa1 = criarPessoa('Maria', 25);
const pessoa2 = criarPessoa('Jo√£o', 30);

console.log('\nüë§ Testando factory de pessoas:');
console.log('Pessoa 1:', pessoa1.nome, '- Idade:', pessoa1.obterIdade());
console.log('Pessoa 2:', pessoa2.nome, '- Idade:', pessoa2.obterIdade());

// Testando m√©todos
console.log('\nüéÇ Envelhecendo pessoas:');
console.log(pessoa1.envelhecer(2));
console.log(pessoa2.envelhecer(1));

// Testando segredos
console.log('\nü§´ Contando segredos:');
console.log(pessoa1.contarSegredo('Gosto de chocolate'));
console.log(pessoa1.contarSegredo('Tenho medo de aranhas'));
console.log('Segredos da Maria:', pessoa1.quantosSegredos());
console.log('Segredos do Jo√£o:', pessoa2.quantosSegredos());

// Testando apresenta√ß√µes
const apresentarMaria = pessoa1.criarApresentacao();
console.log('\nüé≠ Apresenta√ß√µes:');
console.log('Formal:', apresentarMaria('formal'));
console.log('Casual:', apresentarMaria('casual'));
console.log('Profissional:', apresentarMaria('profissional'));

// ========== CLOSURES PARA CONFIGURA√á√ÉO ==========
console.log('\n--- CLOSURES PARA CONFIGURA√á√ÉO ---');

// Sistema de configura√ß√£o usando closures
function criarSistemaConfig() {
    const configuracoes = new Map();
    const observadores = new Map();
    
    // Fun√ß√£o privada para notificar observadores
    function notificarObservadores(chave, valorAntigo, valorNovo) {
        if (observadores.has(chave)) {
            observadores.get(chave).forEach(callback => {
                try {
                    callback(valorNovo, valorAntigo, chave);
                } catch (error) {
                    console.error('Erro no observador:', error);
                }
            });
        }
    }
    
    return {
        // Definir configura√ß√£o
        definir: function(chave, valor) {
            const valorAntigo = configuracoes.get(chave);
            configuracoes.set(chave, valor);
            notificarObservadores(chave, valorAntigo, valor);
            return valor;
        },
        
        // Obter configura√ß√£o
        obter: function(chave, valorPadrao = null) {
            return configuracoes.has(chave) ? configuracoes.get(chave) : valorPadrao;
        },
        
        // Verificar se existe
        existe: function(chave) {
            return configuracoes.has(chave);
        },
        
        // Remover configura√ß√£o
        remover: function(chave) {
            const valor = configuracoes.get(chave);
            const removido = configuracoes.delete(chave);
            if (removido) {
                notificarObservadores(chave, valor, undefined);
            }
            return removido;
        },
        
        // Listar todas as chaves
        listarChaves: function() {
            return Array.from(configuracoes.keys());
        },
        
        // Observar mudan√ßas
        observar: function(chave, callback) {
            if (!observadores.has(chave)) {
                observadores.set(chave, []);
            }
            observadores.get(chave).push(callback);
            
            // Retorna fun√ß√£o para remover observador
            return function removerObservador() {
                const callbacks = observadores.get(chave);
                if (callbacks) {
                    const index = callbacks.indexOf(callback);
                    if (index > -1) {
                        callbacks.splice(index, 1);
                    }
                }
            };
        },
        
        // Criar namespace (sub-configura√ß√£o)
        criarNamespace: function(prefixo) {
            return {
                definir: function(chave, valor) {
                    return configuracoes.set(`${prefixo}.${chave}`, valor);
                },
                
                obter: function(chave, valorPadrao = null) {
                    const chaveCompleta = `${prefixo}.${chave}`;
                    return configuracoes.has(chaveCompleta) ? 
                           configuracoes.get(chaveCompleta) : valorPadrao;
                },
                
                listar: function() {
                    const resultado = {};
                    for (const [chave, valor] of configuracoes) {
                        if (chave.startsWith(`${prefixo}.`)) {
                            const chaveLocal = chave.substring(prefixo.length + 1);
                            resultado[chaveLocal] = valor;
                        }
                    }
                    return resultado;
                }
            };
        },
        
        // Exportar todas as configura√ß√µes
        exportar: function() {
            const resultado = {};
            for (const [chave, valor] of configuracoes) {
                resultado[chave] = valor;
            }
            return resultado;
        },
        
        // Importar configura√ß√µes
        importar: function(configs) {
            Object.entries(configs).forEach(([chave, valor]) => {
                this.definir(chave, valor);
            });
        }
    };
}

// Testando sistema de configura√ß√£o
const config = criarSistemaConfig();

console.log('\n‚öôÔ∏è Testando sistema de configura√ß√£o:');

// Definindo configura√ß√µes
config.definir('tema', 'escuro');
config.definir('idioma', 'pt-BR');
config.definir('debug', true);

console.log('Configura√ß√µes definidas:');
console.log('Tema:', config.obter('tema'));
console.log('Idioma:', config.obter('idioma'));
console.log('Debug:', config.obter('debug'));
console.log('Inexistente:', config.obter('inexistente', 'valor padr√£o'));

// Observando mudan√ßas
const removerObservador = config.observar('tema', (novoValor, valorAntigo, chave) => {
    console.log(`üîç Tema alterado de "${valorAntigo}" para "${novoValor}"`);
});

config.definir('tema', 'claro'); // Dispara o observador

// Testando namespace
const configDB = config.criarNamespace('database');
configDB.definir('host', 'localhost');
configDB.definir('porta', 5432);
configDB.definir('nome', 'meuapp');

console.log('\nüóÑÔ∏è Configura√ß√µes do banco:');
console.log('Host:', configDB.obter('host'));
console.log('Porta:', configDB.obter('porta'));
console.log('Todas as configs DB:', configDB.listar());

// Exportando configura√ß√µes
console.log('\nüì§ Todas as configura√ß√µes:', config.exportar());

// ========== CLOSURES PARA CACHE ==========
console.log('\n--- CLOSURES PARA CACHE ---');

// Sistema de cache com TTL usando closures
function criarCache(ttlPadrao = 60000) { // TTL padr√£o: 1 minuto
    const cache = new Map();
    const timers = new Map();
    
    // Fun√ß√£o privada para limpar item expirado
    function limparItem(chave) {
        cache.delete(chave);
        if (timers.has(chave)) {
            clearTimeout(timers.get(chave));
            timers.delete(chave);
        }
    }
    
    // Fun√ß√£o privada para configurar expira√ß√£o
    function configurarExpiracao(chave, ttl) {
        if (timers.has(chave)) {
            clearTimeout(timers.get(chave));
        }
        
        const timer = setTimeout(() => {
            limparItem(chave);
            console.log(`üóëÔ∏è Cache expirado para chave: ${chave}`);
        }, ttl);
        
        timers.set(chave, timer);
    }
    
    return {
        // Definir item no cache
        definir: function(chave, valor, ttl = ttlPadrao) {
            const item = {
                valor,
                criadoEm: Date.now(),
                ttl
            };
            
            cache.set(chave, item);
            configurarExpiracao(chave, ttl);
            
            return valor;
        },
        
        // Obter item do cache
        obter: function(chave) {
            if (cache.has(chave)) {
                const item = cache.get(chave);
                return item.valor;
            }
            return null;
        },
        
        // Verificar se existe
        existe: function(chave) {
            return cache.has(chave);
        },
        
        // Remover item
        remover: function(chave) {
            limparItem(chave);
            return true;
        },
        
        // Limpar todo o cache
        limpar: function() {
            // Limpar todos os timers
            for (const timer of timers.values()) {
                clearTimeout(timer);
            }
            
            cache.clear();
            timers.clear();
            
            return true;
        },
        
        // Obter estat√≠sticas
        estatisticas: function() {
            const agora = Date.now();
            const itens = Array.from(cache.entries()).map(([chave, item]) => ({
                chave,
                idade: agora - item.criadoEm,
                ttl: item.ttl
            }));
            
            return {
                totalItens: cache.size,
                itens,
                memoriaAproximada: JSON.stringify(Array.from(cache.entries())).length
            };
        },
        
        // Fun√ß√£o para cache com callback (memoiza√ß√£o)
        memoizar: function(funcao, gerarChave = (...args) => JSON.stringify(args)) {
            return function(...args) {
                const chave = gerarChave(...args);
                
                // Verificar se j√° est√° no cache
                if (cache.has(chave)) {
                    console.log(`üìã Cache hit para: ${chave}`);
                    return cache.get(chave).valor;
                }
                
                // Executar fun√ß√£o e cachear resultado
                console.log(`üîÑ Cache miss para: ${chave}`);
                const resultado = funcao(...args);
                
                // Cachear apenas se o resultado n√£o for undefined
                if (resultado !== undefined) {
                    cache.set(chave, {
                        valor: resultado,
                        criadoEm: Date.now(),
                        ttl: ttlPadrao
                    });
                    configurarExpiracao(chave, ttlPadrao);
                }
                
                return resultado;
            };
        }
    };
}

// Testando sistema de cache
const cache = criarCache(5000); // TTL de 5 segundos

console.log('\nüíæ Testando sistema de cache:');

// Definindo itens
cache.definir('usuario:1', { nome: 'Jo√£o', email: 'joao@email.com' });
cache.definir('config:tema', 'escuro', 10000); // TTL personalizado

console.log('Usu√°rio 1:', cache.obter('usuario:1'));
console.log('Tema:', cache.obter('config:tema'));
console.log('Inexistente:', cache.obter('inexistente'));

// Testando memoiza√ß√£o
function calcularFibonacci(n) {
    if (n <= 1) return n;
    return calcularFibonacci(n - 1) + calcularFibonacci(n - 2);
}

const fibonacciMemoizado = cache.memoizar(calcularFibonacci);

console.log('\nüî¢ Testando memoiza√ß√£o:');
console.log('Fibonacci(10) - primeira vez:', fibonacciMemoizado(10));
console.log('Fibonacci(10) - segunda vez:', fibonacciMemoizado(10)); // Cache hit
console.log('Fibonacci(15) - primeira vez:', fibonacciMemoizado(15));

// Estat√≠sticas do cache
console.log('\nüìä Estat√≠sticas do cache:', cache.estatisticas());

// ==========================================
// üéØ 3. EXERC√çCIOS PR√ÅTICOS
// ==========================================

console.log('\n=== EXERC√çCIOS PR√ÅTICOS ===');

// EXERC√çCIO 1: Sistema de M√≥dulos com Closures
console.log('\n--- EXERC√çCIO 1: SISTEMA DE M√ìDULOS ---');

// Criando um sistema de m√≥dulos usando closures
const SistemaModulos = (function() {
    const modulos = new Map();
    const dependencias = new Map();
    
    // Fun√ß√£o privada para resolver depend√™ncias
    function resolverDependencias(deps) {
        const modulosResolvidos = {};
        
        for (const dep of deps) {
            if (!modulos.has(dep)) {
                throw new Error(`M√≥dulo '${dep}' n√£o encontrado`);
            }
            modulosResolvidos[dep] = modulos.get(dep);
        }
        
        return modulosResolvidos;
    }
    
    // Fun√ß√£o privada para validar depend√™ncias circulares
    function validarDependenciasCirculares(nome, deps, visitados = new Set()) {
        if (visitados.has(nome)) {
            throw new Error(`Depend√™ncia circular detectada: ${Array.from(visitados).join(' -> ')} -> ${nome}`);
        }
        
        visitados.add(nome);
        
        for (const dep of deps) {
            if (dependencias.has(dep)) {
                validarDependenciasCirculares(dep, dependencias.get(dep), new Set(visitados));
            }
        }
    }
    
    return {
        // Definir m√≥dulo
        definir: function(nome, deps = [], factory) {
            // Se deps √© uma fun√ß√£o, n√£o h√° depend√™ncias
            if (typeof deps === 'function') {
                factory = deps;
                deps = [];
            }
            
            // Validar depend√™ncias circulares
            validarDependenciasCirculares(nome, deps);
            
            // Resolver depend√™ncias
            const modulosResolvidos = resolverDependencias(deps);
            
            // Executar factory e armazenar m√≥dulo
            const modulo = factory(modulosResolvidos);
            modulos.set(nome, modulo);
            dependencias.set(nome, deps);
            
            console.log(`üì¶ M√≥dulo '${nome}' definido com depend√™ncias: [${deps.join(', ')}]`);
            return modulo;
        },
        
        // Obter m√≥dulo
        obter: function(nome) {
            if (!modulos.has(nome)) {
                throw new Error(`M√≥dulo '${nome}' n√£o encontrado`);
            }
            return modulos.get(nome);
        },
        
        // Verificar se m√≥dulo existe
        existe: function(nome) {
            return modulos.has(nome);
        },
        
        // Listar m√≥dulos
        listar: function() {
            return Array.from(modulos.keys());
        },
        
        // Obter informa√ß√µes de depend√™ncias
        obterDependencias: function(nome) {
            return dependencias.get(nome) || [];
        },
        
        // Remover m√≥dulo
        remover: function(nome) {
            // Verificar se outros m√≥dulos dependem deste
            for (const [modulo, deps] of dependencias) {
                if (deps.includes(nome)) {
                    throw new Error(`N√£o √© poss√≠vel remover '${nome}': m√≥dulo '${modulo}' depende dele`);
                }
            }
            
            modulos.delete(nome);
            dependencias.delete(nome);
            console.log(`üóëÔ∏è M√≥dulo '${nome}' removido`);
            return true;
        },
        
        // Recarregar m√≥dulo
        recarregar: function(nome, factory) {
            if (!modulos.has(nome)) {
                throw new Error(`M√≥dulo '${nome}' n√£o encontrado`);
            }
            
            const deps = dependencias.get(nome);
            const modulosResolvidos = resolverDependencias(deps);
            const novoModulo = factory(modulosResolvidos);
            
            modulos.set(nome, novoModulo);
            console.log(`üîÑ M√≥dulo '${nome}' recarregado`);
            return novoModulo;
        }
    };
})();

// Testando sistema de m√≥dulos
console.log('\nüß© Testando sistema de m√≥dulos:');

// Definindo m√≥dulo utilit√°rio
SistemaModulos.definir('utils', function() {
    return {
        formatarMoeda: function(valor) {
            return new Intl.NumberFormat('pt-BR', {
                style: 'currency',
                currency: 'BRL'
            }).format(valor);
        },
        
        formatarData: function(data) {
            return new Date(data).toLocaleDateString('pt-BR');
        },
        
        gerarId: function() {
            return Math.random().toString(36).substr(2, 9);
        }
    };
});

// Definindo m√≥dulo de valida√ß√£o
SistemaModulos.definir('validacao', function() {
    return {
        email: function(email) {
            return /^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email);
        },
        
        cpf: function(cpf) {
            // Valida√ß√£o simplificada
            return /^\d{3}\.\d{3}\.\d{3}-\d{2}$/.test(cpf);
        },
        
        senha: function(senha) {
            return senha.length >= 8 && /[!@#$%^&*(),.?":{}|<>]/.test(senha);
        }
    };
});

// Definindo m√≥dulo de usu√°rio que depende dos outros
SistemaModulos.definir('usuario', ['utils', 'validacao'], function({ utils, validacao }) {
    const usuarios = [];
    
    return {
        criar: function(dados) {
            // Valida√ß√µes
            if (!validacao.email(dados.email)) {
                throw new Error('Email inv√°lido');
            }
            
            if (!validacao.senha(dados.senha)) {
                throw new Error('Senha inv√°lida');
            }
            
            // Criar usu√°rio
            const usuario = {
                id: utils.gerarId(),
                nome: dados.nome,
                email: dados.email,
                criadoEm: new Date(),
                ativo: true
            };
            
            usuarios.push(usuario);
            console.log(`üë§ Usu√°rio criado: ${usuario.nome} (${usuario.id})`);
            return usuario;
        },
        
        listar: function() {
            return usuarios.map(u => ({
                ...u,
                criadoEm: utils.formatarData(u.criadoEm)
            }));
        },
        
        buscarPorEmail: function(email) {
            return usuarios.find(u => u.email === email);
        },
        
        obterEstatisticas: function() {
            return {
                total: usuarios.length,
                ativos: usuarios.filter(u => u.ativo).length,
                inativos: usuarios.filter(u => !u.ativo).length
            };
        }
    };
});

// Testando os m√≥dulos
const moduloUsuario = SistemaModulos.obter('usuario');
const moduloUtils = SistemaModulos.obter('utils');

// Criando usu√°rios
try {
    moduloUsuario.criar({
        nome: 'Jo√£o Silva',
        email: 'joao@email.com',
        senha: 'MinhaSenh@123'
    });
    
    moduloUsuario.criar({
        nome: 'Maria Santos',
        email: 'maria@email.com',
        senha: 'OutraSenh@456'
    });
    
    console.log('\nüë• Usu√°rios criados:');
    console.log(moduloUsuario.listar());
    console.log('\nüìä Estat√≠sticas:', moduloUsuario.obterEstatisticas());
    
} catch (error) {
    console.error('Erro ao criar usu√°rio:', error.message);
}

console.log('\nüìã M√≥dulos dispon√≠veis:', SistemaModulos.listar());

// EXERC√çCIO 2: Sistema de Eventos com Closures
console.log('\n--- EXERC√çCIO 2: SISTEMA DE EVENTOS ---');

// Sistema de eventos usando closures para encapsulamento
function criarSistemaEventos() {
    const eventos = new Map();
    const eventosUmaVez = new Set();
    const historico = [];
    const maxHistorico = 100;
    
    // Fun√ß√£o privada para registrar no hist√≥rico
    function registrarHistorico(tipo, evento, dados) {
        historico.push({
            tipo,
            evento,
            dados: JSON.parse(JSON.stringify(dados)), // Deep clone
            timestamp: Date.now()
        });
        
        // Manter apenas os √∫ltimos registros
        if (historico.length > maxHistorico) {
            historico.shift();
        }
    }
    
    // Fun√ß√£o privada para executar listeners
    function executarListeners(evento, dados) {
        if (!eventos.has(evento)) return 0;
        
        const listeners = eventos.get(evento);
        let executados = 0;
        
        // Criar c√≥pia para evitar problemas se listeners forem removidos durante execu√ß√£o
        const listenersParaExecutar = [...listeners];
        
        for (const listener of listenersParaExecutar) {
            try {
                listener(dados, evento);
                executados++;
                
                // Remover listener se for "uma vez"
                if (eventosUmaVez.has(listener)) {
                    listeners.delete(listener);
                    eventosUmaVez.delete(listener);
                }
            } catch (error) {
                console.error(`Erro no listener do evento '${evento}':`, error);
            }
        }
        
        return executados;
    }
    
    return {
        // Adicionar listener
        on: function(evento, listener) {
            if (typeof listener !== 'function') {
                throw new Error('Listener deve ser uma fun√ß√£o');
            }
            
            if (!eventos.has(evento)) {
                eventos.set(evento, new Set());
            }
            
            eventos.get(evento).add(listener);
            registrarHistorico('listener_adicionado', evento, { total: eventos.get(evento).size });
            
            // Retornar fun√ß√£o para remover listener
            return function remover() {
                if (eventos.has(evento)) {
                    eventos.get(evento).delete(listener);
                    eventosUmaVez.delete(listener);
                    registrarHistorico('listener_removido', evento, { total: eventos.get(evento).size });
                }
            };
        },
        
        // Adicionar listener que executa apenas uma vez
        once: function(evento, listener) {
            if (typeof listener !== 'function') {
                throw new Error('Listener deve ser uma fun√ß√£o');
            }
            
            eventosUmaVez.add(listener);
            return this.on(evento, listener);
        },
        
        // Emitir evento
        emit: function(evento, dados = {}) {
            const executados = executarListeners(evento, dados);
            registrarHistorico('evento_emitido', evento, { dados, listeners_executados: executados });
            
            return executados;
        },
        
        // Remover todos os listeners de um evento
        off: function(evento) {
            if (eventos.has(evento)) {
                const listeners = eventos.get(evento);
                
                // Remover da lista de "uma vez"
                for (const listener of listeners) {
                    eventosUmaVez.delete(listener);
                }
                
                eventos.delete(evento);
                registrarHistorico('evento_removido', evento, { listeners_removidos: listeners.size });
                return true;
            }
            return false;
        },
        
        // Listar eventos
        listarEventos: function() {
            const resultado = {};
            for (const [evento, listeners] of eventos) {
                resultado[evento] = listeners.size;
            }
            return resultado;
        },
        
        // Obter hist√≥rico
        obterHistorico: function(filtro = null) {
            if (!filtro) {
                return [...historico];
            }
            
            return historico.filter(item => {
                if (filtro.evento && item.evento !== filtro.evento) return false;
                if (filtro.tipo && item.tipo !== filtro.tipo) return false;
                if (filtro.desde && item.timestamp < filtro.desde) return false;
                if (filtro.ate && item.timestamp > filtro.ate) return false;
                return true;
            });
        },
        
        // Limpar hist√≥rico
        limparHistorico: function() {
            const total = historico.length;
            historico.length = 0;
            return total;
        },
        
        // Criar namespace de eventos
        criarNamespace: function(prefixo) {
            return {
                on: (evento, listener) => this.on(`${prefixo}:${evento}`, listener),
                once: (evento, listener) => this.once(`${prefixo}:${evento}`, listener),
                emit: (evento, dados) => this.emit(`${prefixo}:${evento}`, dados),
                off: (evento) => this.off(`${prefixo}:${evento}`)
            };
        },
        
        // Estat√≠sticas
        obterEstatisticas: function() {
            const totalEventos = eventos.size;
            const totalListeners = Array.from(eventos.values())
                .reduce((total, listeners) => total + listeners.size, 0);
            const totalUmaVez = eventosUmaVez.size;
            
            return {
                totalEventos,
                totalListeners,
                totalUmaVez,
                totalHistorico: historico.length,
                eventosComMaisListeners: Array.from(eventos.entries())
                    .sort((a, b) => b[1].size - a[1].size)
                    .slice(0, 5)
                    .map(([evento, listeners]) => ({ evento, listeners: listeners.size }))
            };
        }
    };
}

// Testando sistema de eventos
const eventos = criarSistemaEventos();

console.log('\nüé™ Testando sistema de eventos:');

// Adicionando listeners
const removerLogin = eventos.on('usuario:login', (dados) => {
    console.log(`üë§ Usu√°rio logado: ${dados.nome}`);
});

eventos.on('usuario:login', (dados) => {
    console.log(`üìä Login registrado √†s ${new Date().toLocaleTimeString()}`);
});

// Listener que executa apenas uma vez
eventos.once('sistema:inicializado', (dados) => {
    console.log(`üöÄ Sistema inicializado: ${dados.versao}`);
});

// Emitindo eventos
eventos.emit('usuario:login', { nome: 'Jo√£o', id: 1 });
eventos.emit('usuario:login', { nome: 'Maria', id: 2 });
eventos.emit('sistema:inicializado', { versao: '1.0.0' });
eventos.emit('sistema:inicializado', { versao: '1.0.1' }); // Listener "once" n√£o executa

// Testando namespace
const eventosAdmin = eventos.criarNamespace('admin');
eventosAdmin.on('acao', (dados) => {
    console.log(`üîß A√ß√£o administrativa: ${dados.acao}`);
});

eventosAdmin.emit('acao', { acao: 'backup_criado' });

// Estat√≠sticas e hist√≥rico
console.log('\nüìä Estat√≠sticas dos eventos:', eventos.obterEstatisticas());
console.log('\nüìã Hist√≥rico recente:', eventos.obterHistorico().slice(-5));

// ==========================================
// üöÄ 4. DICAS DE OTIMIZA√á√ÉO
// ==========================================

console.log('\n=== DICAS DE OTIMIZA√á√ÉO ===');

// DICA 1: Evite vazamentos de mem√≥ria com closures
console.log('\n--- DICA 1: Evitando Vazamentos de Mem√≥ria ---');

// ‚ùå Problem√°tico: closure mant√©m refer√™ncia desnecess√°ria
function criarFuncaoProblematica() {
    const dadosGrandes = new Array(1000000).fill('dados'); // Array grande
    const outrosDados = { info: 'importante' };
    
    // Esta fun√ß√£o mant√©m refer√™ncia a TODOS os dados do escopo
    return function() {
        return outrosDados.info; // S√≥ usa outrosDados, mas mant√©m dadosGrandes na mem√≥ria
    };
}

// ‚úÖ Melhor: extrair apenas o que √© necess√°rio
function criarFuncaoOtimizada() {
    const dadosGrandes = new Array(1000000).fill('dados');
    const outrosDados = { info: 'importante' };
    
    // Extrair apenas o que √© necess√°rio
    const infoNecessaria = outrosDados.info;
    
    // Agora a fun√ß√£o s√≥ mant√©m refer√™ncia ao que realmente precisa
    return function() {
        return infoNecessaria;
    };
}

console.log('‚úÖ Fun√ß√£o otimizada criada (evita vazamento de mem√≥ria)');

// DICA 2: Use WeakMap para associa√ß√µes privadas
console.log('\n--- DICA 2: WeakMap para Dados Privados ---');

// Usando WeakMap para dados privados (evita vazamentos)
const dadosPrivados = new WeakMap();

function criarObjetoComPrivacidade(nome, idade) {
    const obj = {
        obterNome: function() {
            return dadosPrivados.get(this).nome;
        },
        
        obterIdade: function() {
            return dadosPrivados.get(this).idade;
        },
        
        definirIdade: function(novaIdade) {
            if (novaIdade >= 0 && novaIdade <= 150) {
                dadosPrivados.get(this).idade = novaIdade;
                return true;
            }
            return false;
        }
    };
    
    // Armazenar dados privados
    dadosPrivados.set(obj, { nome, idade });
    
    return obj;
}

const pessoa = criarObjetoComPrivacidade('Ana', 30);
console.log('Nome:', pessoa.obterNome());
console.log('Idade:', pessoa.obterIdade());
console.log('Alterar idade:', pessoa.definirIdade(31));
console.log('Nova idade:', pessoa.obterIdade());

// DICA 3: Use closures para configura√ß√£o imut√°vel
console.log('\n--- DICA 3: Configura√ß√£o Imut√°vel ---');

function criarConfigImutavel(configInicial) {
    // Fazer deep freeze da configura√ß√£o
    const config = Object.freeze(JSON.parse(JSON.stringify(configInicial)));
    
    return {
        obter: function(chave) {
            return chave.split('.').reduce((obj, key) => obj?.[key], config);
        },
        
        obterToda: function() {
            return JSON.parse(JSON.stringify(config)); // Retorna c√≥pia
        },
        
        // Criar nova configura√ß√£o (imut√°vel)
        atualizar: function(novasConfigs) {
            const novaConfig = { ...config, ...novasConfigs };
            return criarConfigImutavel(novaConfig);
        }
    };
}

const configOriginal = criarConfigImutavel({
    api: { url: 'https://api.exemplo.com', timeout: 5000 },
    debug: true
});

const configAtualizada = configOriginal.atualizar({
    debug: false,
    api: { ...configOriginal.obter('api'), timeout: 10000 }
});

console.log('Config original - debug:', configOriginal.obter('debug'));
console.log('Config atualizada - debug:', configAtualizada.obter('debug'));
console.log('Config original - timeout:', configOriginal.obter('api.timeout'));
console.log('Config atualizada - timeout:', configAtualizada.obter('api.timeout'));

// ==========================================
// üìñ 5. REFER√äNCIAS PARA APROFUNDAMENTO
// ==========================================

console.log('\n=== REFER√äNCIAS PARA APROFUNDAMENTO ===');
console.log('üìö MDN - Closures: https://developer.mozilla.org/docs/Web/JavaScript/Closures');
console.log('üìö MDN - Scope: https://developer.mozilla.org/docs/Glossary/Scope');
console.log('üìö JavaScript.info - Closure: https://javascript.info/closure');
console.log('üìö You Don\'t Know JS - Scope & Closures: https://github.com/getify/You-Dont-Know-JS');
console.log('üìö Memory Management: https://developer.mozilla.org/docs/Web/JavaScript/Memory_Management');

console.log('\n‚úÖ M√≥dulo 3.3 - Closures e Escopo conclu√≠do!');
console.log('üìö Pr√≥ximo: Arrow Functions');

// ==========================================
// üì§ EXPORTA√á√ïES (para uso em outros m√≥dulos)
// ==========================================

if (typeof module !== 'undefined' && module.exports) {
    module.exports = {
        criarContador,
        criarCalculadora,
        criarPessoa,
        criarSistemaConfig,
        criarCache,
        SistemaModulos,
        criarSistemaEventos,
        criarObjetoComPrivacidade,
        criarConfigImutavel
    };
}