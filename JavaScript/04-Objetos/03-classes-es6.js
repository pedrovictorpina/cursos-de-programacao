/*
==============================================
CURSO DE JAVASCRIPT - M√ìDULO 4.3
CLASSES ES6+
==============================================

Objetivos de Aprendizagem:
- Dominar a sintaxe de classes ES6+
- Compreender constructor, m√©todos e propriedades
- Implementar heran√ßa com extends e super
- Usar m√©todos est√°ticos e getters/setters
- Aplicar propriedades privadas (#)
- Conhecer decorators e mixins com classes
- Entender a diferen√ßa entre classes e fun√ß√µes construtoras
- Implementar padr√µes avan√ßados com classes

‚è±Ô∏è TEMPO ESTIMADO: 80 minutos
üìä N√çVEL: Intermedi√°rio/Avan√ßado
==============================================
*/

// ==========================================
// üìö 1. TEORIA: CLASSES ES6+
// ==========================================

/*
CLASSES EM JAVASCRIPT:
As classes ES6+ s√£o uma sintaxe mais limpa para criar objetos e implementar
heran√ßa, mas por baixo ainda usam prot√≥tipos (syntactic sugar).

CONCEITOS FUNDAMENTAIS:
1. class - palavra-chave para definir uma classe
2. constructor - m√©todo especial para inicializa√ß√£o
3. extends - palavra-chave para heran√ßa
4. super - refer√™ncia √† classe pai
5. static - m√©todos/propriedades da classe (n√£o da inst√¢ncia)
6. # - propriedades privadas (ES2022)

VANTAGENS DAS CLASSES:
- Sintaxe mais familiar para quem vem de outras linguagens
- C√≥digo mais organizado e leg√≠vel
- Melhor suporte a ferramentas (IDEs, linters)
- Facilita implementa√ß√£o de padr√µes OOP
- Suporte nativo a propriedades privadas

DIFEREN√áAS DE FUNCTION CONSTRUCTORS:
- Hoisting: classes n√£o s√£o hoisted
- Strict mode: classes sempre executam em strict mode
- Enumerabilidade: m√©todos de classe n√£o s√£o enumer√°veis
- new.target: dispon√≠vel em classes
- Super: sintaxe mais simples para heran√ßa

RECURSOS AVAN√áADOS:
- Propriedades privadas (#propriedade)
- M√©todos privados (#metodo())
- Campos de classe (class fields)
- M√©todos est√°ticos
- Getters e setters
- Decorators (proposta)
*/

console.log('=== CLASSES ES6+ ===');

// ==========================================
// üí° 2. EXEMPLOS PR√ÅTICOS
// ==========================================

// ========== SINTAXE B√ÅSICA DE CLASSES ==========
console.log('\n--- SINTAXE B√ÅSICA DE CLASSES ---');

// Classe b√°sica
class Pessoa {
    // Constructor - m√©todo especial para inicializa√ß√£o
    constructor(nome, idade, email) {
        this.nome = nome;
        this.idade = idade;
        this.email = email;
        this.ativo = true;
        this.dataCriacao = new Date();
    }
    
    // M√©todos de inst√¢ncia
    cumprimentar() {
        return `Ol√°, eu sou ${this.nome} e tenho ${this.idade} anos`;
    }
    
    aniversario() {
        this.idade++;
        console.log(`${this.nome} fez anivers√°rio! Nova idade: ${this.idade}`);
        return this;
    }
    
    atualizarEmail(novoEmail) {
        const emailAntigo = this.email;
        this.email = novoEmail;
        console.log(`Email de ${this.nome} atualizado de ${emailAntigo} para ${novoEmail}`);
        return this;
    }
    
    desativar() {
        this.ativo = false;
        console.log(`${this.nome} foi desativado`);
        return this;
    }
    
    // M√©todo que retorna informa√ß√µes
    obterInfo() {
        return {
            nome: this.nome,
            idade: this.idade,
            email: this.email,
            ativo: this.ativo,
            dataCriacao: this.dataCriacao.toLocaleDateString()
        };
    }
    
    // M√©todo toString personalizado
    toString() {
        return `Pessoa(${this.nome}, ${this.idade} anos)`;
    }
}

// Testando classe b√°sica
console.log('\nüë§ Testando classe Pessoa:');

const pessoa1 = new Pessoa('Ana Silva', 28, 'ana@email.com');
const pessoa2 = new Pessoa('Carlos Santos', 35, 'carlos@email.com');

console.log(pessoa1.cumprimentar());
console.log(pessoa2.cumprimentar());

pessoa1.aniversario().atualizarEmail('ana.silva@email.com');

console.log('Info da Ana:', pessoa1.obterInfo());
console.log('String da Ana:', pessoa1.toString());

// ========== GETTERS E SETTERS ==========
console.log('\n--- GETTERS E SETTERS ---');

class ContaBancaria {
    constructor(titular, saldoInicial = 0) {
        this.titular = titular;
        this._saldo = saldoInicial; // Conven√ß√£o: _ indica propriedade "privada"
        this._historico = [];
        this._ativa = true;
        this._limite = 1000;
        
        this._adicionarHistorico('Conta criada', saldoInicial);
    }
    
    // Getter para saldo (propriedade calculada)
    get saldo() {
        return this._ativa ? this._saldo : 0;
    }
    
    // Setter para saldo (com valida√ß√£o)
    set saldo(valor) {
        if (typeof valor !== 'number' || valor < 0) {
            throw new Error('Saldo deve ser um n√∫mero positivo');
        }
        this._saldo = valor;
    }
    
    // Getter para limite
    get limite() {
        return this._limite;
    }
    
    // Setter para limite (com valida√ß√£o)
    set limite(valor) {
        if (typeof valor !== 'number' || valor < 0) {
            throw new Error('Limite deve ser um n√∫mero positivo');
        }
        
        const limiteAntigo = this._limite;
        this._limite = valor;
        this._adicionarHistorico(`Limite alterado de R$ ${limiteAntigo} para R$ ${valor}`);
        console.log(`Limite da conta de ${this.titular} alterado para R$ ${valor}`);
    }
    
    // Getter para saldo dispon√≠vel
    get saldoDisponivel() {
        return this.saldo + this._limite;
    }
    
    // Getter para status da conta
    get status() {
        if (!this._ativa) return 'Inativa';
        if (this._saldo < 0) return 'Devedor';
        if (this._saldo === 0) return 'Zerada';
        return 'Ativa';
    }
    
    // Getter para hist√≥rico (retorna c√≥pia)
    get historico() {
        return [...this._historico];
    }
    
    // M√©todos privados (conven√ß√£o com _)
    _adicionarHistorico(operacao, valor = null) {
        this._historico.push({
            data: new Date(),
            operacao,
            valor,
            saldoApos: this._saldo
        });
    }
    
    _validarOperacao(valor) {
        if (!this._ativa) {
            throw new Error('Conta inativa');
        }
        if (typeof valor !== 'number' || valor <= 0) {
            throw new Error('Valor deve ser um n√∫mero positivo');
        }
    }
    
    // M√©todos p√∫blicos
    depositar(valor) {
        this._validarOperacao(valor);
        
        this._saldo += valor;
        this._adicionarHistorico('Dep√≥sito', valor);
        console.log(`Dep√≥sito de R$ ${valor} realizado. Saldo: R$ ${this._saldo}`);
        return this;
    }
    
    sacar(valor) {
        this._validarOperacao(valor);
        
        if (valor > this.saldoDisponivel) {
            throw new Error('Saldo insuficiente (incluindo limite)');
        }
        
        this._saldo -= valor;
        this._adicionarHistorico('Saque', valor);
        console.log(`Saque de R$ ${valor} realizado. Saldo: R$ ${this._saldo}`);
        return this;
    }
    
    transferir(valor, contaDestino) {
        if (!(contaDestino instanceof ContaBancaria)) {
            throw new Error('Conta de destino inv√°lida');
        }
        
        this.sacar(valor);
        contaDestino.depositar(valor);
        
        this._adicionarHistorico(`Transfer√™ncia para ${contaDestino.titular}`, valor);
        contaDestino._adicionarHistorico(`Transfer√™ncia de ${this.titular}`, valor);
        
        console.log(`Transfer√™ncia de R$ ${valor} para ${contaDestino.titular} realizada`);
        return this;
    }
    
    fecharConta() {
        if (this._saldo !== 0) {
            throw new Error('Conta deve estar zerada para ser fechada');
        }
        
        this._ativa = false;
        this._adicionarHistorico('Conta fechada');
        console.log(`Conta de ${this.titular} foi fechada`);
        return this;
    }
    
    obterExtrato(ultimas = 10) {
        const historico = this._historico.slice(-ultimas);
        
        console.log(`\nüìã Extrato da conta de ${this.titular} (√∫ltimas ${ultimas} opera√ß√µes):`);
        historico.forEach((item, index) => {
            const data = item.data.toLocaleString();
            const valor = item.valor ? `R$ ${item.valor}` : '';
            const saldo = `Saldo: R$ ${item.saldoApos}`;
            console.log(`${index + 1}. ${data} - ${item.operacao} ${valor} - ${saldo}`);
        });
        
        return historico;
    }
    
    obterResumo() {
        return {
            titular: this.titular,
            saldo: this.saldo,
            limite: this.limite,
            saldoDisponivel: this.saldoDisponivel,
            status: this.status,
            totalOperacoes: this._historico.length
        };
    }
}

// Testando getters e setters
console.log('\nüè¶ Testando ContaBancaria com getters/setters:');

const contaAna = new ContaBancaria('Ana Silva', 1000);
const contaCarlos = new ContaBancaria('Carlos Santos', 500);

console.log('Saldo inicial da Ana:', contaAna.saldo);
console.log('Status da conta da Ana:', contaAna.status);
console.log('Saldo dispon√≠vel da Ana:', contaAna.saldoDisponivel);

// Opera√ß√µes
contaAna.depositar(500)
        .sacar(200)
        .transferir(300, contaCarlos);

// Alterando limite
contaAna.limite = 2000;

console.log('\nüìä Resumo das contas:');
console.log('Ana:', contaAna.obterResumo());
console.log('Carlos:', contaCarlos.obterResumo());

// Extratos
contaAna.obterExtrato(5);
contaCarlos.obterExtrato(3);

// ========== M√âTODOS EST√ÅTICOS ==========
console.log('\n--- M√âTODOS EST√ÅTICOS ---');

class Matematica {
    // Propriedades est√°ticas
    static PI = 3.14159265359;
    static E = 2.71828182846;
    
    // M√©todos est√°ticos - pertencem √† classe, n√£o √† inst√¢ncia
    static somar(a, b) {
        return a + b;
    }
    
    static subtrair(a, b) {
        return a - b;
    }
    
    static multiplicar(a, b) {
        return a * b;
    }
    
    static dividir(a, b) {
        if (b === 0) {
            throw new Error('Divis√£o por zero n√£o √© permitida');
        }
        return a / b;
    }
    
    static potencia(base, expoente) {
        return Math.pow(base, expoente);
    }
    
    static raizQuadrada(numero) {
        if (numero < 0) {
            throw new Error('N√£o √© poss√≠vel calcular raiz quadrada de n√∫mero negativo');
        }
        return Math.sqrt(numero);
    }
    
    static fatorial(n) {
        if (n < 0) {
            throw new Error('Fatorial n√£o definido para n√∫meros negativos');
        }
        if (n === 0 || n === 1) {
            return 1;
        }
        return n * Matematica.fatorial(n - 1);
    }
    
    static fibonacci(n) {
        if (n < 0) {
            throw new Error('Fibonacci n√£o definido para n√∫meros negativos');
        }
        if (n === 0) return 0;
        if (n === 1) return 1;
        
        let a = 0, b = 1;
        for (let i = 2; i <= n; i++) {
            [a, b] = [b, a + b];
        }
        return b;
    }
    
    static ehPrimo(numero) {
        if (numero < 2) return false;
        if (numero === 2) return true;
        if (numero % 2 === 0) return false;
        
        for (let i = 3; i <= Math.sqrt(numero); i += 2) {
            if (numero % i === 0) return false;
        }
        return true;
    }
    
    static gerarPrimos(limite) {
        const primos = [];
        for (let i = 2; i <= limite; i++) {
            if (Matematica.ehPrimo(i)) {
                primos.push(i);
            }
        }
        return primos;
    }
    
    static calcularAreaCirculo(raio) {
        return Matematica.PI * raio * raio;
    }
    
    static calcularVolumeEsfera(raio) {
        return (4/3) * Matematica.PI * Math.pow(raio, 3);
    }
    
    // M√©todo est√°tico que retorna informa√ß√µes da classe
    static obterInfo() {
        return {
            nome: 'Classe Matem√°tica',
            constantes: {
                PI: Matematica.PI,
                E: Matematica.E
            },
            metodosDisponiveis: [
                'somar', 'subtrair', 'multiplicar', 'dividir',
                'potencia', 'raizQuadrada', 'fatorial', 'fibonacci',
                'ehPrimo', 'gerarPrimos', 'calcularAreaCirculo', 'calcularVolumeEsfera'
            ]
        };
    }
}

// Testando m√©todos est√°ticos
console.log('\nüî¢ Testando m√©todos est√°ticos:');

console.log('Soma 5 + 3:', Matematica.somar(5, 3));
console.log('Multiplica√ß√£o 4 * 7:', Matematica.multiplicar(4, 7));
console.log('Pot√™ncia 2^8:', Matematica.potencia(2, 8));
console.log('Raiz quadrada de 16:', Matematica.raizQuadrada(16));
console.log('Fatorial de 5:', Matematica.fatorial(5));
console.log('Fibonacci de 10:', Matematica.fibonacci(10));
console.log('7 √© primo?', Matematica.ehPrimo(7));
console.log('15 √© primo?', Matematica.ehPrimo(15));
console.log('Primos at√© 20:', Matematica.gerarPrimos(20));
console.log('√Årea do c√≠rculo (raio 5):', Matematica.calcularAreaCirculo(5).toFixed(2));
console.log('Volume da esfera (raio 3):', Matematica.calcularVolumeEsfera(3).toFixed(2));

console.log('\nüìã Info da classe:', Matematica.obterInfo());

// ========== HERAN√áA COM EXTENDS E SUPER ==========
console.log('\n--- HERAN√áA COM EXTENDS E SUPER ---');

// Classe base: Veiculo
class Veiculo {
    constructor(marca, modelo, ano, cor = 'branco') {
        this.marca = marca;
        this.modelo = modelo;
        this.ano = ano;
        this.cor = cor;
        this.ligado = false;
        this.velocidade = 0;
        this.quilometragem = 0;
        this.combustivel = 100;
        this.manutencoes = [];
    }
    
    ligar() {
        if (!this.ligado) {
            this.ligado = true;
            console.log(`${this.marca} ${this.modelo} foi ligado`);
        } else {
            console.log(`${this.marca} ${this.modelo} j√° est√° ligado`);
        }
        return this;
    }
    
    desligar() {
        if (this.ligado) {
            this.velocidade = 0;
            this.ligado = false;
            console.log(`${this.marca} ${this.modelo} foi desligado`);
        } else {
            console.log(`${this.marca} ${this.modelo} j√° est√° desligado`);
        }
        return this;
    }
    
    acelerar(incremento = 10) {
        if (!this.ligado) {
            console.log('Precisa ligar o ve√≠culo primeiro!');
            return this;
        }
        
        if (this.combustivel <= 0) {
            console.log('Sem combust√≠vel!');
            return this;
        }
        
        this.velocidade += incremento;
        this.consumirCombustivel(incremento * 0.1);
        console.log(`${this.marca} ${this.modelo} acelerou para ${this.velocidade} km/h`);
        return this;
    }
    
    frear(decremento = 15) {
        this.velocidade = Math.max(0, this.velocidade - decremento);
        console.log(`${this.marca} ${this.modelo} freou para ${this.velocidade} km/h`);
        return this;
    }
    
    consumirCombustivel(quantidade) {
        this.combustivel = Math.max(0, this.combustivel - quantidade);
        if (this.combustivel === 0) {
            this.velocidade = 0;
            this.ligado = false;
            console.log(`${this.marca} ${this.modelo} ficou sem combust√≠vel!`);
        }
    }
    
    abastecer(quantidade = 100) {
        this.combustivel = Math.min(100, this.combustivel + quantidade);
        console.log(`${this.marca} ${this.modelo} abastecido. Combust√≠vel: ${this.combustivel}%`);
        return this;
    }
    
    rodar(distancia) {
        if (!this.ligado || this.velocidade === 0) {
            console.log('Ve√≠culo precisa estar ligado e em movimento');
            return this;
        }
        
        this.quilometragem += distancia;
        this.consumirCombustivel(distancia * 0.05);
        console.log(`${this.marca} ${this.modelo} rodou ${distancia} km. Quilometragem: ${this.quilometragem} km`);
        return this;
    }
    
    fazerManutencao(tipo, custo) {
        this.manutencoes.push({
            data: new Date(),
            tipo,
            custo,
            quilometragem: this.quilometragem
        });
        console.log(`Manuten√ß√£o realizada: ${tipo} - R$ ${custo}`);
        return this;
    }
    
    obterInfo() {
        return {
            marca: this.marca,
            modelo: this.modelo,
            ano: this.ano,
            cor: this.cor,
            ligado: this.ligado,
            velocidade: this.velocidade,
            quilometragem: this.quilometragem,
            combustivel: this.combustivel + '%',
            manutencoes: this.manutencoes.length
        };
    }
    
    toString() {
        return `${this.marca} ${this.modelo} (${this.ano})`;
    }
}

// Classe derivada: Carro
class Carro extends Veiculo {
    constructor(marca, modelo, ano, cor, portas, categoria = 'hatch') {
        // Chama o constructor da classe pai
        super(marca, modelo, ano, cor);
        
        // Propriedades espec√≠ficas do carro
        this.portas = portas;
        this.categoria = categoria;
        this.arCondicionado = false;
        this.radioLigado = false;
        this.portasAbertas = [];
    }
    
    // Sobrescreve m√©todo da classe pai
    acelerar(incremento = 10) {
        // Chama o m√©todo da classe pai
        super.acelerar(incremento);
        
        // L√≥gica espec√≠fica do carro
        if (this.velocidade > 120) {
            console.log('‚ö†Ô∏è Velocidade alta! Dirija com cuidado.');
        }
        
        return this;
    }
    
    abrirPorta(numero) {
        if (numero < 1 || numero > this.portas) {
            console.log(`Carro tem apenas ${this.portas} portas`);
            return this;
        }
        
        if (!this.portasAbertas.includes(numero)) {
            this.portasAbertas.push(numero);
            console.log(`Porta ${numero} do ${this.marca} ${this.modelo} foi aberta`);
        } else {
            console.log(`Porta ${numero} j√° est√° aberta`);
        }
        return this;
    }
    
    fecharPorta(numero) {
        const index = this.portasAbertas.indexOf(numero);
        if (index > -1) {
            this.portasAbertas.splice(index, 1);
            console.log(`Porta ${numero} do ${this.marca} ${this.modelo} foi fechada`);
        } else {
            console.log(`Porta ${numero} j√° est√° fechada`);
        }
        return this;
    }
    
    ligarArCondicionado() {
        if (!this.ligado) {
            console.log('Precisa ligar o carro primeiro!');
            return this;
        }
        
        this.arCondicionado = true;
        console.log('Ar condicionado ligado');
        return this;
    }
    
    desligarArCondicionado() {
        this.arCondicionado = false;
        console.log('Ar condicionado desligado');
        return this;
    }
    
    ligarRadio() {
        if (!this.ligado) {
            console.log('Precisa ligar o carro primeiro!');
            return this;
        }
        
        this.radioLigado = true;
        console.log('R√°dio ligado üéµ');
        return this;
    }
    
    desligarRadio() {
        this.radioLigado = false;
        console.log('R√°dio desligado');
        return this;
    }
    
    // Sobrescreve obterInfo
    obterInfo() {
        // Obt√©m info da classe pai
        const infoBase = super.obterInfo();
        
        // Adiciona informa√ß√µes espec√≠ficas
        return {
            ...infoBase,
            portas: this.portas,
            categoria: this.categoria,
            arCondicionado: this.arCondicionado,
            radioLigado: this.radioLigado,
            portasAbertas: this.portasAbertas.length
        };
    }
}

// Classe derivada: Moto
class Moto extends Veiculo {
    constructor(marca, modelo, ano, cor, cilindradas, tipo = 'street') {
        super(marca, modelo, ano, cor);
        this.cilindradas = cilindradas;
        this.tipo = tipo;
        this.capacete = false;
        this.cavalete = true;
    }
    
    // Sobrescreve acelerar com l√≥gica espec√≠fica
    acelerar(incremento = 15) {
        super.acelerar(incremento);
        
        if (this.velocidade > 100) {
            console.log('üèçÔ∏è Velocidade de moto! Cuidado com o vento.');
        }
        
        return this;
    }
    
    empinar() {
        if (!this.ligado) {
            console.log('Precisa ligar a moto primeiro!');
            return this;
        }
        
        if (this.velocidade < 30) {
            console.log('Velocidade insuficiente para empinar');
            return this;
        }
        
        console.log(`${this.marca} ${this.modelo} est√° empinando! ü§∏`);
        this.velocidade = Math.max(20, this.velocidade - 10);
        return this;
    }
    
    colocarCapacete() {
        this.capacete = true;
        console.log('Capacete colocado ü™ñ');
        return this;
    }
    
    tirarCapacete() {
        if (this.velocidade > 0) {
            console.log('N√£o tire o capacete em movimento!');
            return this;
        }
        
        this.capacete = false;
        console.log('Capacete removido');
        return this;
    }
    
    levantarCavalete() {
        if (this.velocidade > 0) {
            console.log('N√£o mexa no cavalete em movimento!');
            return this;
        }
        
        this.cavalete = false;
        console.log('Cavalete levantado');
        return this;
    }
    
    baixarCavalete() {
        if (this.velocidade > 0) {
            console.log('Pare a moto antes de baixar o cavalete!');
            return this;
        }
        
        this.cavalete = true;
        console.log('Cavalete baixado');
        return this;
    }
    
    // Sobrescreve obterInfo
    obterInfo() {
        const infoBase = super.obterInfo();
        
        return {
            ...infoBase,
            cilindradas: this.cilindradas,
            tipo: this.tipo,
            capacete: this.capacete,
            cavalete: this.cavalete
        };
    }
}

// Classe derivada: CarroEletrico
class CarroEletrico extends Carro {
    constructor(marca, modelo, ano, cor, portas, autonomia) {
        super(marca, modelo, ano, cor, portas, 'el√©trico');
        this.autonomia = autonomia; // km
        this.bateria = 100; // %
        this.carregando = false;
        this.modoEco = false;
    }
    
    // Sobrescreve m√©todos relacionados a combust√≠vel
    consumirCombustivel(quantidade) {
        // Para carros el√©tricos, "combust√≠vel" √© bateria
        this.bateria = Math.max(0, this.bateria - quantidade);
        if (this.bateria === 0) {
            this.velocidade = 0;
            this.ligado = false;
            console.log(`${this.marca} ${this.modelo} ficou sem bateria!`);
        }
    }
    
    abastecer() {
        console.log('Carros el√©tricos n√£o abastecem combust√≠vel. Use carregar().');
        return this;
    }
    
    carregar(tempo = 60) { // tempo em minutos
        if (this.ligado) {
            console.log('Desligue o carro para carregar');
            return this;
        }
        
        this.carregando = true;
        console.log(`Iniciando carregamento por ${tempo} minutos...`);
        
        // Simula carregamento
        const cargaAdicionada = Math.min(100 - this.bateria, tempo * 1.5);
        this.bateria += cargaAdicionada;
        
        setTimeout(() => {
            this.carregando = false;
            console.log(`Carregamento conclu√≠do! Bateria: ${this.bateria}%`);
        }, 1000); // Simula 1 segundo = tempo de carregamento
        
        return this;
    }
    
    ativarModoEco() {
        this.modoEco = true;
        console.log('Modo eco ativado üå± - Consumo reduzido');
        return this;
    }
    
    desativarModoEco() {
        this.modoEco = false;
        console.log('Modo eco desativado');
        return this;
    }
    
    // Sobrescreve acelerar para considerar modo eco
    acelerar(incremento = 10) {
        if (this.modoEco) {
            incremento = Math.floor(incremento * 0.7); // Reduz acelera√ß√£o no modo eco
            console.log('üå± Modo eco: acelera√ß√£o reduzida');
        }
        
        super.acelerar(incremento);
        return this;
    }
    
    obterAutonomiaRestante() {
        const autonomiaAtual = (this.bateria / 100) * this.autonomia;
        return Math.floor(autonomiaAtual);
    }
    
    // Sobrescreve obterInfo
    obterInfo() {
        const infoBase = super.obterInfo();
        
        return {
            ...infoBase,
            combustivel: undefined, // Remove combust√≠vel
            bateria: this.bateria + '%',
            autonomia: this.autonomia + ' km',
            autonomiaRestante: this.obterAutonomiaRestante() + ' km',
            carregando: this.carregando,
            modoEco: this.modoEco
        };
    }
}

// Testando heran√ßa
console.log('\nüöó Testando heran√ßa com ve√≠culos:');

// Carro comum
const civic = new Carro('Honda', 'Civic', 2022, 'prata', 4, 'sedan');
civic.ligar()
     .acelerar(50)
     .abrirPorta(1)
     .ligarArCondicionado()
     .ligarRadio()
     .rodar(100);

console.log('Info do Civic:', civic.obterInfo());

// Moto
const ninja = new Moto('Kawasaki', 'Ninja', 2023, 'verde', 650, 'esportiva');
ninja.colocarCapacete()
     .levantarCavalete()
     .ligar()
     .acelerar(60)
     .empinar()
     .frear(30);

console.log('Info da Ninja:', ninja.obterInfo());

// Carro el√©trico
const tesla = new CarroEletrico('Tesla', 'Model 3', 2023, 'branco', 4, 500);
tesla.ativarModoEco()
     .ligar()
     .acelerar(40)
     .acelerar(30)
     .rodar(50);

console.log('Info do Tesla:', tesla.obterInfo());
console.log('Autonomia restante do Tesla:', tesla.obterAutonomiaRestante(), 'km');

// ========== PROPRIEDADES PRIVADAS (#) ==========
console.log('\n--- PROPRIEDADES PRIVADAS (#) ---');

class ContaSegura {
    // Propriedades privadas (ES2022)
    #saldo = 0;
    #senha;
    #tentativasLogin = 0;
    #bloqueada = false;
    #historico = [];
    
    // Propriedades p√∫blicas
    titular;
    numeroConta;
    
    constructor(titular, numeroConta, senhaInicial) {
        this.titular = titular;
        this.numeroConta = numeroConta;
        this.#senha = this.#criptografarSenha(senhaInicial);
        this.#adicionarHistorico('Conta criada');
    }
    
    // M√©todos privados
    #criptografarSenha(senha) {
        // Simula√ß√£o simples de criptografia
        return btoa(senha + 'salt123');
    }
    
    #verificarSenha(senha) {
        return this.#criptografarSenha(senha) === this.#senha;
    }
    
    #adicionarHistorico(operacao, valor = null) {
        this.#historico.push({
            data: new Date(),
            operacao,
            valor,
            saldo: this.#saldo
        });
    }
    
    #validarAcesso(senha) {
        if (this.#bloqueada) {
            throw new Error('Conta bloqueada por excesso de tentativas');
        }
        
        if (!this.#verificarSenha(senha)) {
            this.#tentativasLogin++;
            
            if (this.#tentativasLogin >= 3) {
                this.#bloqueada = true;
                this.#adicionarHistorico('Conta bloqueada');
                throw new Error('Conta bloqueada por excesso de tentativas');
            }
            
            throw new Error(`Senha incorreta. Tentativas restantes: ${3 - this.#tentativasLogin}`);
        }
        
        this.#tentativasLogin = 0; // Reset tentativas em caso de sucesso
    }
    
    // M√©todos p√∫blicos
    consultarSaldo(senha) {
        this.#validarAcesso(senha);
        console.log(`Saldo da conta ${this.numeroConta}: R$ ${this.#saldo}`);
        return this.#saldo;
    }
    
    depositar(valor, senha) {
        this.#validarAcesso(senha);
        
        if (valor <= 0) {
            throw new Error('Valor deve ser positivo');
        }
        
        this.#saldo += valor;
        this.#adicionarHistorico('Dep√≥sito', valor);
        console.log(`Dep√≥sito de R$ ${valor} realizado. Novo saldo: R$ ${this.#saldo}`);
        return this;
    }
    
    sacar(valor, senha) {
        this.#validarAcesso(senha);
        
        if (valor <= 0) {
            throw new Error('Valor deve ser positivo');
        }
        
        if (valor > this.#saldo) {
            throw new Error('Saldo insuficiente');
        }
        
        this.#saldo -= valor;
        this.#adicionarHistorico('Saque', valor);
        console.log(`Saque de R$ ${valor} realizado. Novo saldo: R$ ${this.#saldo}`);
        return this;
    }
    
    alterarSenha(senhaAtual, novaSenha) {
        this.#validarAcesso(senhaAtual);
        
        if (novaSenha.length < 6) {
            throw new Error('Nova senha deve ter pelo menos 6 caracteres');
        }
        
        this.#senha = this.#criptografarSenha(novaSenha);
        this.#adicionarHistorico('Senha alterada');
        console.log('Senha alterada com sucesso');
        return this;
    }
    
    obterExtrato(senha, quantidade = 10) {
        this.#validarAcesso(senha);
        
        const extrato = this.#historico.slice(-quantidade);
        console.log(`\nüìã Extrato da conta ${this.numeroConta}:`);
        
        extrato.forEach((item, index) => {
            const data = item.data.toLocaleString();
            const valor = item.valor ? `R$ ${item.valor}` : '';
            console.log(`${index + 1}. ${data} - ${item.operacao} ${valor} - Saldo: R$ ${item.saldo}`);
        });
        
        return extrato;
    }
    
    desbloquear(senhaAdmin = 'admin123') {
        if (senhaAdmin !== 'admin123') {
            throw new Error('Senha de administrador incorreta');
        }
        
        this.#bloqueada = false;
        this.#tentativasLogin = 0;
        this.#adicionarHistorico('Conta desbloqueada pelo administrador');
        console.log('Conta desbloqueada pelo administrador');
        return this;
    }
    
    // Getter para status (n√£o exp√µe dados privados)
    get status() {
        return {
            titular: this.titular,
            numeroConta: this.numeroConta,
            bloqueada: this.#bloqueada,
            tentativasRestantes: this.#bloqueada ? 0 : 3 - this.#tentativasLogin
        };
    }
}

// Testando propriedades privadas
console.log('\nüîí Testando propriedades privadas:');

const contaSegura = new ContaSegura('Jo√£o Silva', '12345-6', 'minhasenha123');

console.log('Status inicial:', contaSegura.status);

// Opera√ß√µes v√°lidas
contaSegura.depositar(1000, 'minhasenha123');
contaSegura.consultarSaldo('minhasenha123');
contaSegura.sacar(200, 'minhasenha123');

// Tentativa de acesso direto √†s propriedades privadas
console.log('\nüö´ Tentando acessar propriedades privadas:');
console.log('contaSegura.#saldo:', contaSegura.saldo); // undefined
console.log('contaSegura.#senha:', contaSegura.senha); // undefined

// Tentativas de senha incorreta
console.log('\nüö´ Testando tentativas de senha incorreta:');
try {
    contaSegura.consultarSaldo('senhaerrada');
} catch (error) {
    console.log('Erro:', error.message);
}

try {
    contaSegura.consultarSaldo('outrasenhaerrada');
} catch (error) {
    console.log('Erro:', error.message);
}

try {
    contaSegura.consultarSaldo('maisumtentativa');
} catch (error) {
    console.log('Erro:', error.message);
}

console.log('Status ap√≥s tentativas:', contaSegura.status);

// Desbloqueando
contaSegura.desbloquear();
contaSegura.obterExtrato('minhasenha123', 5);

// ==========================================
// üéØ 3. EXERC√çCIOS PR√ÅTICOS
// ==========================================

console.log('\n=== EXERC√çCIOS PR√ÅTICOS ===');

// EXERC√çCIO 1: Sistema de E-commerce
console.log('\n--- EXERC√çCIO 1: SISTEMA DE E-COMMERCE ---');

// Classe base Produto
class Produto {
    static #proximoId = 1;
    
    #id;
    #preco;
    #estoque;
    
    constructor(nome, preco, categoria, estoque = 0) {
        this.#id = Produto.#proximoId++;
        this.nome = nome;
        this.#preco = preco;
        this.categoria = categoria;
        this.#estoque = estoque;
        this.ativo = true;
        this.dataCriacao = new Date();
        this.avaliacoes = [];
    }
    
    get id() {
        return this.#id;
    }
    
    get preco() {
        return this.#preco;
    }
    
    set preco(novoPreco) {
        if (novoPreco <= 0) {
            throw new Error('Pre√ßo deve ser positivo');
        }
        this.#preco = novoPreco;
    }
    
    get estoque() {
        return this.#estoque;
    }
    
    get disponivel() {
        return this.ativo && this.#estoque > 0;
    }
    
    get mediaAvaliacoes() {
        if (this.avaliacoes.length === 0) return 0;
        const soma = this.avaliacoes.reduce((acc, av) => acc + av.nota, 0);
        return (soma / this.avaliacoes.length).toFixed(1);
    }
    
    adicionarEstoque(quantidade) {
        if (quantidade <= 0) {
            throw new Error('Quantidade deve ser positiva');
        }
        this.#estoque += quantidade;
        console.log(`Estoque de ${this.nome} aumentado em ${quantidade}. Total: ${this.#estoque}`);
        return this;
    }
    
    removerEstoque(quantidade) {
        if (quantidade <= 0) {
            throw new Error('Quantidade deve ser positiva');
        }
        if (quantidade > this.#estoque) {
            throw new Error('Estoque insuficiente');
        }
        this.#estoque -= quantidade;
        console.log(`Estoque de ${this.nome} reduzido em ${quantidade}. Restante: ${this.#estoque}`);
        return this;
    }
    
    avaliar(nota, comentario = '') {
        if (nota < 1 || nota > 5) {
            throw new Error('Nota deve ser entre 1 e 5');
        }
        
        this.avaliacoes.push({
            nota,
            comentario,
            data: new Date()
        });
        
        console.log(`Avalia√ß√£o adicionada para ${this.nome}: ${nota} estrelas`);
        return this;
    }
    
    desativar() {
        this.ativo = false;
        console.log(`Produto ${this.nome} foi desativado`);
        return this;
    }
    
    obterInfo() {
        return {
            id: this.#id,
            nome: this.nome,
            preco: this.#preco,
            categoria: this.categoria,
            estoque: this.#estoque,
            disponivel: this.disponivel,
            mediaAvaliacoes: this.mediaAvaliacoes,
            totalAvaliacoes: this.avaliacoes.length,
            ativo: this.ativo
        };
    }
}

// Classe ProdutoFisico
class ProdutoFisico extends Produto {
    constructor(nome, preco, categoria, estoque, peso, dimensoes) {
        super(nome, preco, categoria, estoque);
        this.peso = peso; // em kg
        this.dimensoes = dimensoes; // {largura, altura, profundidade} em cm
        this.fragil = false;
    }
    
    calcularFrete(cep, transportadora = 'correios') {
        // Simula√ß√£o simples de c√°lculo de frete
        const distancia = Math.random() * 1000 + 100; // 100-1100 km
        const pesoFator = this.peso * 2;
        const fragilFator = this.fragil ? 1.5 : 1;
        
        const frete = (distancia * 0.01 + pesoFator) * fragilFator;
        
        console.log(`Frete para ${cep} via ${transportadora}: R$ ${frete.toFixed(2)}`);
        return frete;
    }
    
    marcarFragil() {
        this.fragil = true;
        console.log(`${this.nome} marcado como fr√°gil`);
        return this;
    }
    
    obterInfo() {
        const infoBase = super.obterInfo();
        return {
            ...infoBase,
            peso: this.peso + ' kg',
            dimensoes: this.dimensoes,
            fragil: this.fragil
        };
    }
}

// Classe ProdutoDigital
class ProdutoDigital extends Produto {
    constructor(nome, preco, categoria, tamanho, formato) {
        super(nome, preco, categoria, Infinity); // Estoque infinito
        this.tamanho = tamanho; // em MB
        this.formato = formato;
        this.downloads = 0;
        this.linkDownload = null;
    }
    
    gerarLinkDownload() {
        this.linkDownload = `https://download.loja.com/${this.id}/${Date.now()}`;
        console.log(`Link de download gerado para ${this.nome}`);
        return this.linkDownload;
    }
    
    registrarDownload() {
        this.downloads++;
        console.log(`Download registrado. Total: ${this.downloads}`);
        return this;
    }
    
    obterInfo() {
        const infoBase = super.obterInfo();
        return {
            ...infoBase,
            estoque: 'Ilimitado',
            tamanho: this.tamanho + ' MB',
            formato: this.formato,
            downloads: this.downloads
        };
    }
}

// Classe CarrinhoCompras
class CarrinhoCompras {
    #itens = [];
    #desconto = 0;
    
    constructor(usuario) {
        this.usuario = usuario;
        this.dataCriacao = new Date();
    }
    
    adicionarItem(produto, quantidade = 1) {
        if (!(produto instanceof Produto)) {
            throw new Error('Item deve ser um produto v√°lido');
        }
        
        if (!produto.disponivel) {
            throw new Error('Produto n√£o dispon√≠vel');
        }
        
        if (produto instanceof ProdutoFisico && quantidade > produto.estoque) {
            throw new Error('Quantidade maior que estoque dispon√≠vel');
        }
        
        const itemExistente = this.#itens.find(item => item.produto.id === produto.id);
        
        if (itemExistente) {
            itemExistente.quantidade += quantidade;
            console.log(`Quantidade de ${produto.nome} atualizada para ${itemExistente.quantidade}`);
        } else {
            this.#itens.push({ produto, quantidade });
            console.log(`${produto.nome} adicionado ao carrinho`);
        }
        
        return this;
    }
    
    removerItem(produtoId) {
        const index = this.#itens.findIndex(item => item.produto.id === produtoId);
        
        if (index > -1) {
            const item = this.#itens.splice(index, 1)[0];
            console.log(`${item.produto.nome} removido do carrinho`);
        } else {
            console.log('Item n√£o encontrado no carrinho');
        }
        
        return this;
    }
    
    alterarQuantidade(produtoId, novaQuantidade) {
        const item = this.#itens.find(item => item.produto.id === produtoId);
        
        if (!item) {
            throw new Error('Item n√£o encontrado no carrinho');
        }
        
        if (novaQuantidade <= 0) {
            return this.removerItem(produtoId);
        }
        
        if (item.produto instanceof ProdutoFisico && novaQuantidade > item.produto.estoque) {
            throw new Error('Quantidade maior que estoque dispon√≠vel');
        }
        
        item.quantidade = novaQuantidade;
        console.log(`Quantidade de ${item.produto.nome} alterada para ${novaQuantidade}`);
        return this;
    }
    
    aplicarDesconto(percentual) {
        if (percentual < 0 || percentual > 100) {
            throw new Error('Desconto deve ser entre 0 e 100%');
        }
        
        this.#desconto = percentual;
        console.log(`Desconto de ${percentual}% aplicado`);
        return this;
    }
    
    calcularSubtotal() {
        return this.#itens.reduce((total, item) => {
            return total + (item.produto.preco * item.quantidade);
        }, 0);
    }
    
    calcularDesconto() {
        return this.calcularSubtotal() * (this.#desconto / 100);
    }
    
    calcularTotal() {
        return this.calcularSubtotal() - this.calcularDesconto();
    }
    
    obterResumo() {
        return {
            usuario: this.usuario,
            totalItens: this.#itens.length,
            quantidadeTotal: this.#itens.reduce((total, item) => total + item.quantidade, 0),
            subtotal: this.calcularSubtotal().toFixed(2),
            desconto: this.calcularDesconto().toFixed(2),
            total: this.calcularTotal().toFixed(2),
            itens: this.#itens.map(item => ({
                produto: item.produto.nome,
                preco: item.produto.preco,
                quantidade: item.quantidade,
                subtotal: (item.produto.preco * item.quantidade).toFixed(2)
            }))
        };
    }
    
    limpar() {
        this.#itens = [];
        this.#desconto = 0;
        console.log('Carrinho limpo');
        return this;
    }
}

// Testando sistema de e-commerce
console.log('\nüõí Testando sistema de e-commerce:');

// Criando produtos
const notebook = new ProdutoFisico(
    'Notebook Gamer',
    2500,
    'Eletr√¥nicos',
    10,
    2.5,
    { largura: 35, altura: 25, profundidade: 3 }
);

const ebook = new ProdutoDigital(
    'Curso de JavaScript',
    99.90,
    'Educa√ß√£o',
    150,
    'PDF'
);

const mouse = new ProdutoFisico(
    'Mouse Gamer RGB',
    89.90,
    'Perif√©ricos',
    25,
    0.15,
    { largura: 12, altura: 7, profundidade: 4 }
);

// Configurando produtos
notebook.marcarFragil();
ebook.gerarLinkDownload();

// Adicionando avalia√ß√µes
notebook.avaliar(5, 'Excelente notebook!')
        .avaliar(4, 'Muito bom, recomendo')
        .avaliar(5, 'Perfeito para jogos');

ebook.avaliar(5, 'Curso muito completo')
     .avaliar(4, 'Aprendi muito');

mouse.avaliar(4, 'Bom custo-benef√≠cio');

// Criando carrinho
const carrinho = new CarrinhoCompras('Jo√£o Silva');

// Adicionando itens
carrinho.adicionarItem(notebook, 1)
        .adicionarItem(ebook, 1)
        .adicionarItem(mouse, 2);

// Aplicando desconto
carrinho.aplicarDesconto(10);

console.log('\nüìä Informa√ß√µes dos produtos:');
console.log('Notebook:', notebook.obterInfo());
console.log('E-book:', ebook.obterInfo());
console.log('Mouse:', mouse.obterInfo());

console.log('\nüõí Resumo do carrinho:');
console.log(carrinho.obterResumo());

// Calculando frete
notebook.calcularFrete('01234-567');
mouse.calcularFrete('01234-567');

// EXERC√çCIO 2: Sistema de Biblioteca
console.log('\n--- EXERC√çCIO 2: SISTEMA DE BIBLIOTECA ---');

// Classe base Item
class ItemBiblioteca {
    static #proximoId = 1000;
    
    #id;
    #disponivel = true;
    
    constructor(titulo, autor, anoPublicacao) {
        this.#id = ItemBiblioteca.#proximoId++;
        this.titulo = titulo;
        this.autor = autor;
        this.anoPublicacao = anoPublicacao;
        this.dataAquisicao = new Date();
        this.emprestimos = [];
    }
    
    get id() {
        return this.#id;
    }
    
    get disponivel() {
        return this.#disponivel;
    }
    
    emprestar(usuario, diasEmprestimo = 14) {
        if (!this.#disponivel) {
            throw new Error('Item n√£o dispon√≠vel para empr√©stimo');
        }
        
        const dataEmprestimo = new Date();
        const dataDevolucao = new Date();
        dataDevolucao.setDate(dataDevolucao.getDate() + diasEmprestimo);
        
        this.emprestimos.push({
            usuario,
            dataEmprestimo,
            dataDevolucao,
            devolvido: false
        });
        
        this.#disponivel = false;
        console.log(`${this.titulo} emprestado para ${usuario} at√© ${dataDevolucao.toLocaleDateString()}`);
        return this;
    }
    
    devolver() {
        if (this.#disponivel) {
            throw new Error('Item n√£o est√° emprestado');
        }
        
        const emprestimoAtual = this.emprestimos.find(emp => !emp.devolvido);
        if (emprestimoAtual) {
            emprestimoAtual.devolvido = true;
            emprestimoAtual.dataRealDevolucao = new Date();
        }
        
        this.#disponivel = true;
        console.log(`${this.titulo} foi devolvido`);
        return this;
    }
    
    verificarAtraso() {
        const emprestimoAtual = this.emprestimos.find(emp => !emp.devolvido);
        if (!emprestimoAtual) return 0;
        
        const hoje = new Date();
        const diasAtraso = Math.max(0, Math.floor((hoje - emprestimoAtual.dataDevolucao) / (1000 * 60 * 60 * 24)));
        return diasAtraso;
    }
    
    obterInfo() {
        return {
            id: this.#id,
            titulo: this.titulo,
            autor: this.autor,
            anoPublicacao: this.anoPublicacao,
            disponivel: this.#disponivel,
            totalEmprestimos: this.emprestimos.length,
            diasAtraso: this.verificarAtraso()
        };
    }
}

// Classe Livro
class Livro extends ItemBiblioteca {
    constructor(titulo, autor, anoPublicacao, isbn, genero, paginas) {
        super(titulo, autor, anoPublicacao);
        this.isbn = isbn;
        this.genero = genero;
        this.paginas = paginas;
        this.edicao = 1;
    }
    
    obterInfo() {
        const infoBase = super.obterInfo();
        return {
            ...infoBase,
            tipo: 'Livro',
            isbn: this.isbn,
            genero: this.genero,
            paginas: this.paginas,
            edicao: this.edicao
        };
    }
}

// Classe Revista
class Revista extends ItemBiblioteca {
    constructor(titulo, editora, anoPublicacao, numero, periodicidade) {
        super(titulo, editora, anoPublicacao);
        this.numero = numero;
        this.periodicidade = periodicidade; // mensal, semanal, etc.
        this.dataPublicacao = new Date();
    }
    
    obterInfo() {
        const infoBase = super.obterInfo();
        return {
            ...infoBase,
            tipo: 'Revista',
            numero: this.numero,
            periodicidade: this.periodicidade,
            dataPublicacao: this.dataPublicacao.toLocaleDateString()
        };
    }
}

// Classe DVD
class DVD extends ItemBiblioteca {
    constructor(titulo, diretor, anoPublicacao, genero, duracao) {
        super(titulo, diretor, anoPublicacao);
        this.genero = genero;
        this.duracao = duracao; // em minutos
        this.legendas = [];
        this.classificacao = 'Livre';
    }
    
    adicionarLegenda(idioma) {
        if (!this.legendas.includes(idioma)) {
            this.legendas.push(idioma);
            console.log(`Legenda em ${idioma} adicionada ao DVD ${this.titulo}`);
        }
        return this;
    }
    
    definirClassificacao(classificacao) {
        const classificacoesValidas = ['Livre', '10', '12', '14', '16', '18'];
        if (!classificacoesValidas.includes(classificacao)) {
            throw new Error('Classifica√ß√£o inv√°lida');
        }
        
        this.classificacao = classificacao;
        console.log(`Classifica√ß√£o do DVD ${this.titulo} definida como ${classificacao}`);
        return this;
    }
    
    obterInfo() {
        const infoBase = super.obterInfo();
        return {
            ...infoBase,
            tipo: 'DVD',
            genero: this.genero,
            duracao: this.duracao + ' min',
            legendas: this.legendas,
            classificacao: this.classificacao
        };
    }
}

// Classe Biblioteca
class Biblioteca {
    #acervo = [];
    #usuarios = [];
    
    constructor(nome, endereco) {
        this.nome = nome;
        this.endereco = endereco;
        this.dataFundacao = new Date();
    }
    
    adicionarItem(item) {
        if (!(item instanceof ItemBiblioteca)) {
            throw new Error('Item deve ser uma inst√¢ncia de ItemBiblioteca');
        }
        
        this.#acervo.push(item);
        console.log(`${item.titulo} adicionado ao acervo da ${this.nome}`);
        return this;
    }
    
    buscarPorTitulo(titulo) {
        return this.#acervo.filter(item => 
            item.titulo.toLowerCase().includes(titulo.toLowerCase())
        );
    }
    
    buscarPorAutor(autor) {
        return this.#acervo.filter(item => 
            item.autor.toLowerCase().includes(autor.toLowerCase())
        );
    }
    
    buscarPorTipo(tipo) {
        const tipos = {
            'livro': Livro,
            'revista': Revista,
            'dvd': DVD
        };
        
        const TipoClasse = tipos[tipo.toLowerCase()];
        if (!TipoClasse) {
            throw new Error('Tipo inv√°lido. Use: livro, revista ou dvd');
        }
        
        return this.#acervo.filter(item => item instanceof TipoClasse);
    }
    
    listarDisponiveis() {
        return this.#acervo.filter(item => item.disponivel);
    }
    
    listarEmprestados() {
        return this.#acervo.filter(item => !item.disponivel);
    }
    
    listarAtrasados() {
        return this.#acervo.filter(item => item.verificarAtraso() > 0);
    }
    
    obterEstatisticas() {
        const total = this.#acervo.length;
        const disponiveis = this.listarDisponiveis().length;
        const emprestados = this.listarEmprestados().length;
        const atrasados = this.listarAtrasados().length;
        
        const porTipo = {
            livros: this.buscarPorTipo('livro').length,
            revistas: this.buscarPorTipo('revista').length,
            dvds: this.buscarPorTipo('dvd').length
        };
        
        return {
            nome: this.nome,
            totalItens: total,
            disponiveis,
            emprestados,
            atrasados,
            porTipo,
            taxaOcupacao: ((emprestados / total) * 100).toFixed(1) + '%'
        };
    }
}

// Testando sistema de biblioteca
console.log('\nüìö Testando sistema de biblioteca:');

// Criando biblioteca
const biblioteca = new Biblioteca('Biblioteca Central', 'Rua das Letras, 123');

// Criando itens
const livro1 = new Livro(
    'Clean Code',
    'Robert C. Martin',
    2008,
    '978-0132350884',
    'Programa√ß√£o',
    464
);

const revista1 = new Revista(
    'National Geographic',
    'National Geographic Society',
    2023,
    'Edi√ß√£o 287',
    'Mensal'
);

const dvd1 = new DVD(
    'Matrix',
    'Lana e Lilly Wachowski',
    1999,
    'Fic√ß√£o Cient√≠fica',
    136
);

// Configurando itens
dvd1.adicionarLegenda('Portugu√™s')
    .adicionarLegenda('Ingl√™s')
    .adicionarLegenda('Espanhol')
    .definirClassificacao('14');

// Adicionando ao acervo
biblioteca.adicionarItem(livro1)
          .adicionarItem(revista1)
          .adicionarItem(dvd1);

// Realizando empr√©stimos
livro1.emprestar('Ana Silva', 21);
revista1.emprestar('Carlos Santos', 7);

console.log('\nüìä Informa√ß√µes dos itens:');
console.log('Livro:', livro1.obterInfo());
console.log('Revista:', revista1.obterInfo());
console.log('DVD:', dvd1.obterInfo());

console.log('\nüìà Estat√≠sticas da biblioteca:');
console.log(biblioteca.obterEstatisticas());

// Buscas
console.log('\nüîç Resultados de busca:');
console.log('Busca por "Clean":', biblioteca.buscarPorTitulo('Clean').map(item => item.titulo));
console.log('Busca por autor "Martin":', biblioteca.buscarPorAutor('Martin').map(item => item.titulo));
console.log('DVDs no acervo:', biblioteca.buscarPorTipo('dvd').map(item => item.titulo));

// ==========================================
// üéØ 4. DICAS DE OTIMIZA√á√ÉO
// ==========================================

console.log('\n=== DICAS DE OTIMIZA√á√ÉO ===');

/*
DICAS DE OTIMIZA√á√ÉO PARA CLASSES ES6+:

1. **Use propriedades privadas (#) para encapsulamento real**
   - Evita acesso acidental a propriedades internas
   - Melhora a seguran√ßa e manutenibilidade
   - Permite mudan√ßas internas sem quebrar c√≥digo externo

2. **Prefira getters/setters para propriedades calculadas**
   - Evita armazenar valores que podem ser calculados
   - Permite valida√ß√£o autom√°tica
   - Mant√©m dados sempre atualizados

3. **Use m√©todos est√°ticos para funcionalidades utilit√°rias**
   - N√£o precisam de inst√¢ncia da classe
   - Organizam c√≥digo relacionado
   - Melhoram performance (n√£o criam contexto de inst√¢ncia)

4. **Implemente heran√ßa com cuidado**
   - Use composi√ß√£o quando heran√ßa n√£o faz sentido
   - Evite hierarquias muito profundas
   - Prefira interfaces/mixins para m√∫ltipla heran√ßa

5. **Valide par√¢metros no constructor**
   - Falhe r√°pido com erros claros
   - Use Object.freeze() para objetos imut√°veis
   - Implemente valida√ß√£o consistente

6. **Use WeakMap para dados verdadeiramente privados (alternativa)**
   - Permite garbage collection autom√°tico
   - N√£o vaza mem√≥ria
   - Compat√≠vel com vers√µes antigas do JavaScript

7. **Implemente toString() e valueOf() quando apropriado**
   - Melhora debugging e logging
   - Facilita convers√µes autom√°ticas
   - Torna objetos mais "JavaScript-friendly"

8. **Use Symbol.iterator para objetos iter√°veis**
   - Permite uso com for...of
   - Integra com APIs nativas
   - Melhora experi√™ncia do desenvolvedor

9. **Considere usar decorators (quando dispon√≠vel)**
   - Reduz c√≥digo boilerplate
   - Melhora legibilidade
   - Facilita aspectos transversais (logging, valida√ß√£o)

10. **Otimize m√©todos frequentemente chamados**
    - Cache resultados quando poss√≠vel
    - Evite cria√ß√£o desnecess√°ria de objetos
    - Use t√©cnicas de memoiza√ß√£o
*/

// Exemplo de otimiza√ß√£o com cache
class CalculadoraOtimizada {
    #cache = new Map();
    
    static fibonacci(n) {
        // Implementa√ß√£o otimizada com memoiza√ß√£o
        const cache = CalculadoraOtimizada.#fibCache || (CalculadoraOtimizada.#fibCache = new Map());
        
        if (cache.has(n)) {
            return cache.get(n);
        }
        
        let result;
        if (n <= 1) {
            result = n;
        } else {
            result = CalculadoraOtimizada.fibonacci(n - 1) + CalculadoraOtimizada.fibonacci(n - 2);
        }
        
        cache.set(n, result);
        return result;
    }
    
    static #fibCache;
    
    calcularPotencia(base, expoente) {
        const chave = `${base}^${expoente}`;
        
        if (this.#cache.has(chave)) {
            console.log(`Cache hit para ${chave}`);
            return this.#cache.get(chave);
        }
        
        const resultado = Math.pow(base, expoente);
        this.#cache.set(chave, resultado);
        console.log(`Calculado e armazenado em cache: ${chave} = ${resultado}`);
        return resultado;
    }
    
    limparCache() {
        this.#cache.clear();
        console.log('Cache limpo');
        return this;
    }
    
    obterEstatisticasCache() {
        return {
            tamanho: this.#cache.size,
            chaves: Array.from(this.#cache.keys())
        };
    }
}

// Testando otimiza√ß√µes
console.log('\n‚ö° Testando otimiza√ß√µes:');

const calc = new CalculadoraOtimizada();

// Testando cache
console.log('Primeira chamada 2^10:', calc.calcularPotencia(2, 10));
console.log('Segunda chamada 2^10:', calc.calcularPotencia(2, 10)); // Cache hit
console.log('Terceira chamada 3^5:', calc.calcularPotencia(3, 5));
console.log('Quarta chamada 2^10:', calc.calcularPotencia(2, 10)); // Cache hit

console.log('Estat√≠sticas do cache:', calc.obterEstatisticasCache());

// Testando Fibonacci otimizado
console.log('\nüî¢ Fibonacci otimizado:');
console.time('Fibonacci 40');
console.log('Fibonacci(40):', CalculadoraOtimizada.fibonacci(40));
console.timeEnd('Fibonacci 40');

// Segunda chamada (com cache)
console.time('Fibonacci 40 (cached)');
console.log('Fibonacci(40) cached:', CalculadoraOtimizada.fibonacci(40));
console.timeEnd('Fibonacci 40 (cached)');

// ==========================================
// üìö 5. REFER√äNCIAS E PR√ìXIMOS PASSOS
// ==========================================

console.log('\n=== REFER√äNCIAS E PR√ìXIMOS PASSOS ===');

/*
REFER√äNCIAS PARA APROFUNDAMENTO:

üìñ DOCUMENTA√á√ÉO OFICIAL:
- MDN Classes: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes
- MDN Private Fields: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/Private_class_fields
- MDN Static Methods: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/static

üìö LIVROS RECOMENDADOS:
- "You Don't Know JS: this & Object Prototypes" - Kyle Simpson
- "Effective JavaScript" - David Herman
- "JavaScript: The Good Parts" - Douglas Crockford

üéØ PR√ìXIMOS T√ìPICOS DE ESTUDO:
1. Mixins e composi√ß√£o
2. Decorators (TC39 proposal)
3. Padr√µes de design com classes
4. Metaprograma√ß√£o com Proxy
5. Symbols e Well-known Symbols
6. WeakMap e WeakSet para dados privados
7. Generators e Iterators
8. Async/Await em classes

üí° EXERC√çCIOS SUGERIDOS:
1. Implemente um sistema de cache com TTL usando classes
2. Crie um ORM simples usando classes e Proxy
3. Desenvolva um sistema de eventos com classes
4. Implemente padr√µes como Observer, Factory, Singleton
5. Crie um sistema de valida√ß√£o usando decorators

üîß FERRAMENTAS √öTEIS:
- TypeScript para tipagem est√°tica
- Babel para transpila√ß√£o
- ESLint para linting
- Jest para testes
- Webpack para bundling

‚ö†Ô∏è ARMADILHAS COMUNS:
1. Confundir classes com prot√≥tipos
2. Usar heran√ßa quando composi√ß√£o seria melhor
3. N√£o validar par√¢metros no constructor
4. Expor propriedades que deveriam ser privadas
5. Criar hierarquias muito profundas
6. N√£o implementar m√©todos toString/valueOf
7. Usar this incorretamente em callbacks
8. N√£o considerar performance em m√©todos frequentes

üéì CONCEITOS AVAN√áADOS:
- Metaclasses e metaprograma√ß√£o
- Aspect-Oriented Programming
- Dependency Injection
- Inversion of Control
- SOLID principles aplicados a JavaScript
*/

console.log('\n‚úÖ M√≥dulo de Classes ES6+ conclu√≠do!');
console.log('üìù Pr√≥ximo m√≥dulo: 04-destructuring.js');
console.log('üéØ Continue praticando com os exerc√≠cios propostos!');

/*
==============================================
RESUMO DO M√ìDULO - CLASSES ES6+
==============================================

‚úÖ CONCEITOS APRENDIDOS:
- Sintaxe de classes ES6+
- Constructor e m√©todos de inst√¢ncia
- Getters e setters
- M√©todos est√°ticos
- Heran√ßa com extends e super
- Propriedades privadas (#)
- Encapsulamento e abstra√ß√£o
- Polimorfismo em JavaScript
- Padr√µes de design com classes
- Otimiza√ß√µes e boas pr√°ticas

üéØ HABILIDADES DESENVOLVIDAS:
- Criar classes bem estruturadas
- Implementar heran√ßa eficiente
- Usar encapsulamento adequadamente
- Aplicar padr√µes de design
- Otimizar performance de classes
- Debuggar problemas com classes
- Escrever c√≥digo orientado a objetos

üìà PR√ìXIMOS DESAFIOS:
- Destructuring e spread operator
- Padr√µes avan√ßados de design
- Metaprograma√ß√£o
- Programa√ß√£o funcional vs OOP
- Arquiteturas escal√°veis

==============================================
*/