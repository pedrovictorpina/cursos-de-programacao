/*
==============================================
CURSO DE JAVASCRIPT - M√ìDULO 5.3
ITERA√á√ÉO DE ARRAYS
==============================================

Objetivos de Aprendizagem:
- Dominar diferentes formas de itera√ß√£o
- Usar for...of, for...in e for tradicional
- Trabalhar com iteradores e generators
- Implementar itera√ß√£o customizada
- Aplicar Symbol.iterator
- Criar objetos iter√°veis
- Entender lazy evaluation
- Otimizar loops para performance

‚è±Ô∏è TEMPO ESTIMADO: 75 minutos
üìä N√çVEL: Intermedi√°rio a Avan√ßado
==============================================
*/

// ==========================================
// üìö 1. TEORIA: ITERA√á√ÉO E ITERADORES
// ==========================================

/*
ITERA√á√ÉO EM JAVASCRIPT:
Itera√ß√£o √© o processo de percorrer elementos de uma cole√ß√£o
de forma sequencial. JavaScript oferece v√°rias formas de iterar.

TIPOS DE ITERA√á√ÉO:

1. **ITERA√á√ÉO TRADICIONAL**
   - for loop cl√°ssico
   - while e do-while
   - Controle manual de √≠ndices
   - M√°xima performance

2. **ITERA√á√ÉO FUNCIONAL**
   - forEach, map, filter
   - Declarativa e expressiva
   - Imut√°vel por padr√£o
   - Menos controle de fluxo

3. **ITERA√á√ÉO MODERNA**
   - for...of (valores)
   - for...in (chaves)
   - Iteradores e generators
   - Symbol.iterator

4. **ITERA√á√ÉO CUSTOMIZADA**
   - Implementar Symbol.iterator
   - Criar generators
   - Lazy evaluation
   - Infinite sequences

PROTOCOLO DE ITERA√á√ÉO:

ITERABLE:
- Objeto que implementa Symbol.iterator
- Retorna um iterator quando chamado
- Arrays, Strings, Maps, Sets s√£o iterables

ITERATOR:
- Objeto com m√©todo next()
- next() retorna { value, done }
- done: true quando itera√ß√£o termina
- value: valor atual da itera√ß√£o

GENERATOR:
- Fun√ß√£o especial que pode pausar/retomar
- Usa yield para produzir valores
- Implementa automaticamente iterator
- Permite lazy evaluation

COMPLEXIDADE E PERFORMANCE:
- for tradicional: O(n) - mais r√°pido
- for...of: O(n) - leg√≠vel e r√°pido
- forEach: O(n) - overhead de fun√ß√£o
- for...in: O(n) - mais lento, enumera propriedades

USO RECOMENDADO:
- for tradicional: performance cr√≠tica
- for...of: itera√ß√£o simples de valores
- forEach: quando precisar de √≠ndice/array
- for...in: itera√ß√£o de propriedades de objeto
*/

console.log('=== ITERA√á√ÉO DE ARRAYS ===');

// ==========================================
// üí° 2. EXEMPLOS PR√ÅTICOS
// ==========================================

// ========== FOR TRADICIONAL ==========
console.log('\n--- FOR TRADICIONAL ---');

// Dados de exemplo
const numeros = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];
const frutas = ['ma√ß√£', 'banana', 'laranja', 'uva', 'manga'];
const pessoas = [
    { nome: 'Ana', idade: 25, cidade: 'S√£o Paulo' },
    { nome: 'Bruno', idade: 30, cidade: 'Rio de Janeiro' },
    { nome: 'Carlos', idade: 35, cidade: 'Belo Horizonte' },
    { nome: 'Diana', idade: 28, cidade: 'Salvador' }
];

console.log('\nüî¢ For tradicional - n√∫meros pares:');
const pares = [];
for (let i = 0; i < numeros.length; i++) {
    if (numeros[i] % 2 === 0) {
        pares.push(numeros[i]);
    }
}
console.log('N√∫meros pares:', pares);

// For com controle de fluxo
console.log('\nüéØ For com break e continue:');
for (let i = 0; i < numeros.length; i++) {
    if (numeros[i] === 5) {
        console.log('Encontrou 5, pulando...');
        continue;
    }
    if (numeros[i] === 8) {
        console.log('Encontrou 8, parando...');
        break;
    }
    console.log(`N√∫mero: ${numeros[i]}`);
}

// For reverso
console.log('\n‚¨ÖÔ∏è For reverso:');
for (let i = frutas.length - 1; i >= 0; i--) {
    console.log(`${frutas.length - i}. ${frutas[i]}`);
}

// For com step customizado
console.log('\n‚ö° For com step de 2:');
for (let i = 0; i < numeros.length; i += 2) {
    console.log(`Posi√ß√£o ${i}: ${numeros[i]}`);
}

// For aninhado - matriz
console.log('\nüî≤ For aninhado - matriz:');
const matriz = [
    [1, 2, 3],
    [4, 5, 6],
    [7, 8, 9]
];

for (let i = 0; i < matriz.length; i++) {
    for (let j = 0; j < matriz[i].length; j++) {
        console.log(`matriz[${i}][${j}] = ${matriz[i][j]}`);
    }
}

// ========== FOR...OF ==========
console.log('\n--- FOR...OF ---');

// For...of b√°sico
console.log('\nüçé For...of b√°sico - frutas:');
for (const fruta of frutas) {
    console.log(`Fruta: ${fruta}`);
}

// For...of com √≠ndice usando entries()
console.log('\nüìä For...of com √≠ndice:');
for (const [indice, fruta] of frutas.entries()) {
    console.log(`${indice + 1}. ${fruta}`);
}

// For...of com destructuring
console.log('\nüé≠ For...of com destructuring:');
for (const { nome, idade, cidade } of pessoas) {
    console.log(`${nome}, ${idade} anos, mora em ${cidade}`);
}

// For...of com strings
console.log('\nüìù For...of com strings:');
const palavra = 'JavaScript';
for (const letra of palavra) {
    console.log(`Letra: ${letra}`);
}

// For...of com Maps
console.log('\nüó∫Ô∏è For...of com Maps:');
const mapa = new Map([
    ['nome', 'Jo√£o'],
    ['idade', 30],
    ['profissao', 'Desenvolvedor']
]);

for (const [chave, valor] of mapa) {
    console.log(`${chave}: ${valor}`);
}

// For...of com Sets
console.log('\nüéØ For...of com Sets:');
const conjunto = new Set(['a', 'b', 'c', 'a', 'b']); // duplicatas removidas
for (const item of conjunto) {
    console.log(`Item √∫nico: ${item}`);
}

// ========== FOR...IN ==========
console.log('\n--- FOR...IN ---');

// For...in com objetos
console.log('\nüè† For...in com objetos:');
const pessoa = {
    nome: 'Maria',
    idade: 25,
    profissao: 'Designer',
    cidade: 'S√£o Paulo'
};

for (const propriedade in pessoa) {
    console.log(`${propriedade}: ${pessoa[propriedade]}`);
}

// For...in com arrays (n√£o recomendado)
console.log('\n‚ö†Ô∏è For...in com arrays (cuidado):');
const array = ['a', 'b', 'c'];
array.propriedadeCustoma = 'valor';

for (const indice in array) {
    console.log(`${indice}: ${array[indice]}`);
}

// For...in com verifica√ß√£o hasOwnProperty
console.log('\n‚úÖ For...in com hasOwnProperty:');
const objetoComHeranca = Object.create({ propriedadeHerdada: 'valor herdado' });
objetoComHeranca.propriedadePropria = 'valor pr√≥prio';

for (const prop in objetoComHeranca) {
    if (objetoComHeranca.hasOwnProperty(prop)) {
        console.log(`Propriedade pr√≥pria - ${prop}: ${objetoComHeranca[prop]}`);
    } else {
        console.log(`Propriedade herdada - ${prop}: ${objetoComHeranca[prop]}`);
    }
}

// ========== WHILE E DO-WHILE ==========
console.log('\n--- WHILE E DO-WHILE ---');

// While b√°sico
console.log('\nüîÑ While b√°sico:');
let contador = 0;
while (contador < 5) {
    console.log(`Contador: ${contador}`);
    contador++;
}

// While com condi√ß√£o complexa
console.log('\nüé≤ While com condi√ß√£o complexa:');
let tentativas = 0;
let numeroAleatorio;
while ((numeroAleatorio = Math.floor(Math.random() * 10)) !== 7 && tentativas < 10) {
    console.log(`Tentativa ${tentativas + 1}: ${numeroAleatorio}`);
    tentativas++;
}
if (numeroAleatorio === 7) {
    console.log('üéâ Encontrou o n√∫mero 7!');
} else {
    console.log('üòû N√£o encontrou o n√∫mero 7 em 10 tentativas');
}

// Do-while
console.log('\nüîÅ Do-while:');
let numero;
do {
    numero = Math.floor(Math.random() * 6) + 1;
    console.log(`Rolou: ${numero}`);
} while (numero !== 6);
console.log('üéØ Conseguiu rolar 6!');

// ========== ITERADORES CUSTOMIZADOS ==========
console.log('\n--- ITERADORES CUSTOMIZADOS ---');

// Implementando Symbol.iterator
console.log('\nüîß Implementando Symbol.iterator:');

class ContadorIteravel {
    constructor(inicio, fim, passo = 1) {
        this.inicio = inicio;
        this.fim = fim;
        this.passo = passo;
    }
    
    [Symbol.iterator]() {
        let atual = this.inicio;
        const fim = this.fim;
        const passo = this.passo;
        
        return {
            next() {
                if (atual <= fim) {
                    const valor = atual;
                    atual += passo;
                    return { value: valor, done: false };
                } else {
                    return { done: true };
                }
            }
        };
    }
}

// Testando contador iter√°vel
const contador1a10 = new ContadorIteravel(1, 10, 2);
console.log('Contador de 1 a 10 (passo 2):');
for (const num of contador1a10) {
    console.log(num);
}

// Iterator manual
console.log('\nüîß Iterator manual:');
const iteradorManual = contador1a10[Symbol.iterator]();
let resultado;
while (!(resultado = iteradorManual.next()).done) {
    console.log(`Valor manual: ${resultado.value}`);
}

// Objeto iter√°vel customizado
console.log('\nüèóÔ∏è Objeto iter√°vel customizado:');

class ListaLigada {
    constructor() {
        this.cabeca = null;
        this.tamanho = 0;
    }
    
    adicionar(valor) {
        const novoNo = { valor, proximo: null };
        if (!this.cabeca) {
            this.cabeca = novoNo;
        } else {
            let atual = this.cabeca;
            while (atual.proximo) {
                atual = atual.proximo;
            }
            atual.proximo = novoNo;
        }
        this.tamanho++;
    }
    
    [Symbol.iterator]() {
        let atual = this.cabeca;
        
        return {
            next() {
                if (atual) {
                    const valor = atual.valor;
                    atual = atual.proximo;
                    return { value: valor, done: false };
                } else {
                    return { done: true };
                }
            }
        };
    }
}

// Testando lista ligada
const lista = new ListaLigada();
lista.adicionar('primeiro');
lista.adicionar('segundo');
lista.adicionar('terceiro');

console.log('Lista ligada:');
for (const item of lista) {
    console.log(`Item: ${item}`);
}

// ========== GENERATORS ==========
console.log('\n--- GENERATORS ---');

// Generator b√°sico
console.log('\n‚ö° Generator b√°sico:');

function* contadorGenerator(inicio, fim) {
    for (let i = inicio; i <= fim; i++) {
        yield i;
    }
}

const gerador = contadorGenerator(1, 5);
console.log('Generator manual:');
console.log(gerador.next()); // { value: 1, done: false }
console.log(gerador.next()); // { value: 2, done: false }
console.log(gerador.next()); // { value: 3, done: false }

// Generator com for...of
console.log('\nüîÑ Generator com for...of:');
for (const num of contadorGenerator(10, 15)) {
    console.log(`N√∫mero gerado: ${num}`);
}

// Generator infinito
console.log('\n‚ôæÔ∏è Generator infinito:');

function* fibonacciGenerator() {
    let a = 0, b = 1;
    while (true) {
        yield a;
        [a, b] = [b, a + b];
    }
}

// Primeiros 10 n√∫meros de Fibonacci
const fibonacci = fibonacciGenerator();
console.log('Primeiros 10 n√∫meros de Fibonacci:');
for (let i = 0; i < 10; i++) {
    console.log(fibonacci.next().value);
}

// Generator com yield*
console.log('\nüåü Generator com yield*:');

function* gerador1() {
    yield 1;
    yield 2;
}

function* gerador2() {
    yield 3;
    yield 4;
}

function* geradorCombinado() {
    yield* gerador1();
    yield* gerador2();
    yield 5;
}

for (const valor of geradorCombinado()) {
    console.log(`Valor combinado: ${valor}`);
}

// Generator com par√¢metros
console.log('\nüì® Generator com par√¢metros:');

function* geradorComParametros() {
    const primeiro = yield 'Primeiro yield';
    console.log(`Recebido: ${primeiro}`);
    
    const segundo = yield 'Segundo yield';
    console.log(`Recebido: ${segundo}`);
    
    return 'Fim do generator';
}

const geradorParam = geradorComParametros();
console.log(geradorParam.next()); // { value: 'Primeiro yield', done: false }
console.log(geradorParam.next('Ol√°')); // { value: 'Segundo yield', done: false }
console.log(geradorParam.next('Mundo')); // { value: 'Fim do generator', done: true }

// ========== LAZY EVALUATION ==========
console.log('\n--- LAZY EVALUATION ---');

// Range lazy
console.log('\nüí§ Range lazy:');

function* range(inicio, fim, passo = 1) {
    for (let i = inicio; i <= fim; i += passo) {
        console.log(`Gerando: ${i}`);
        yield i;
    }
}

// S√≥ gera valores quando necess√°rio
const rangeLazy = range(1, 1000000, 1);
console.log('Range criado (ainda n√£o gerou valores)');

// Pega apenas os primeiros 3
const primeiros3 = [];
for (const num of rangeLazy) {
    primeiros3.push(num);
    if (primeiros3.length === 3) break;
}
console.log('Primeiros 3:', primeiros3);

// Pipeline lazy
console.log('\nüîÑ Pipeline lazy:');

function* map(iteravel, funcao) {
    for (const item of iteravel) {
        yield funcao(item);
    }
}

function* filter(iteravel, predicado) {
    for (const item of iteravel) {
        if (predicado(item)) {
            yield item;
        }
    }
}

function* take(iteravel, quantidade) {
    let contador = 0;
    for (const item of iteravel) {
        if (contador >= quantidade) break;
        yield item;
        contador++;
    }
}

// Pipeline: n√∫meros -> dobrar -> filtrar pares -> pegar 5
const pipeline = take(
    filter(
        map(range(1, 100), x => x * 2),
        x => x % 4 === 0
    ),
    5
);

console.log('Pipeline lazy (dobrar -> filtrar m√∫ltiplos de 4 -> pegar 5):');
for (const resultado of pipeline) {
    console.log(`Resultado: ${resultado}`);
}

// ==========================================
// üéØ 3. EXERC√çCIOS PR√ÅTICOS
// ==========================================

console.log('\n=== EXERC√çCIOS PR√ÅTICOS ===');

// EXERC√çCIO 1: Sistema de Pagina√ß√£o Lazy
console.log('\n--- EXERC√çCIO 1: SISTEMA DE PAGINA√á√ÉO LAZY ---');

class PaginadorLazy {
    constructor(dados, tamanhoPagina = 10) {
        this.dados = dados;
        this.tamanhoPagina = tamanhoPagina;
    }
    
    // Generator para p√°ginas
    *paginas() {
        for (let i = 0; i < this.dados.length; i += this.tamanhoPagina) {
            const pagina = this.dados.slice(i, i + this.tamanhoPagina);
            const numeroPagina = Math.floor(i / this.tamanhoPagina) + 1;
            const totalPaginas = Math.ceil(this.dados.length / this.tamanhoPagina);
            
            yield {
                numero: numeroPagina,
                total: totalPaginas,
                dados: pagina,
                temProxima: i + this.tamanhoPagina < this.dados.length,
                temAnterior: i > 0
            };
        }
    }
    
    // Busca lazy
    *buscar(termo) {
        for (const item of this.dados) {
            if (typeof item === 'string' && item.toLowerCase().includes(termo.toLowerCase())) {
                yield item;
            } else if (typeof item === 'object' && item.nome && 
                      item.nome.toLowerCase().includes(termo.toLowerCase())) {
                yield item;
            }
        }
    }
    
    // Filtro lazy
    *filtrar(predicado) {
        for (const item of this.dados) {
            if (predicado(item)) {
                yield item;
            }
        }
    }
    
    // Transforma√ß√£o lazy
    *transformar(funcao) {
        for (const item of this.dados) {
            yield funcao(item);
        }
    }
    
    // Pipeline de opera√ß√µes
    *pipeline(...operacoes) {
        let resultado = this.dados;
        
        for (const operacao of operacoes) {
            if (operacao.tipo === 'filtrar') {
                resultado = this.filtrar(operacao.predicado);
            } else if (operacao.tipo === 'transformar') {
                resultado = this.transformar(operacao.funcao);
            } else if (operacao.tipo === 'buscar') {
                resultado = this.buscar(operacao.termo);
            }
        }
        
        yield* resultado;
    }
    
    // Estat√≠sticas lazy
    calcularEstatisticas() {
        let count = 0;
        let soma = 0;
        let min = Infinity;
        let max = -Infinity;
        
        for (const item of this.dados) {
            count++;
            if (typeof item === 'number') {
                soma += item;
                min = Math.min(min, item);
                max = Math.max(max, item);
            }
        }
        
        return {
            count,
            soma,
            media: count > 0 ? soma / count : 0,
            min: min === Infinity ? null : min,
            max: max === -Infinity ? null : max
        };
    }
}

// Dados de teste
const dadosTeste = Array.from({ length: 100 }, (_, i) => ({
    id: i + 1,
    nome: `Usu√°rio ${i + 1}`,
    idade: 18 + Math.floor(Math.random() * 50),
    ativo: Math.random() > 0.3
}));

// Testando paginador
console.log('\nüìÑ Testando paginador lazy:');
const paginador = new PaginadorLazy(dadosTeste, 5);

// Primeira p√°gina
const primeiraPagina = paginador.paginas().next().value;
console.log('Primeira p√°gina:', {
    numero: primeiraPagina.numero,
    total: primeiraPagina.total,
    quantidade: primeiraPagina.dados.length,
    temProxima: primeiraPagina.temProxima
});

// Busca lazy
console.log('\nüîç Busca lazy por "Usu√°rio 1":');
let contador = 0;
for (const resultado of paginador.buscar('Usu√°rio 1')) {
    console.log(resultado.nome);
    contador++;
    if (contador >= 5) break; // Limita para n√£o mostrar todos
}

// Filtro lazy
console.log('\nüéØ Filtro lazy - usu√°rios ativos com mais de 30 anos:');
contador = 0;
for (const usuario of paginador.filtrar(u => u.ativo && u.idade > 30)) {
    console.log(`${usuario.nome}, ${usuario.idade} anos`);
    contador++;
    if (contador >= 3) break;
}

// EXERC√çCIO 2: Sistema de Stream Processing
console.log('\n--- EXERC√çCIO 2: SISTEMA DE STREAM PROCESSING ---');

class StreamProcessor {
    constructor(fonte) {
        this.fonte = fonte;
    }
    
    // Criar stream de dados
    static from(dados) {
        return new StreamProcessor(function* () {
            yield* dados;
        });
    }
    
    // Criar stream infinito
    static generate(funcaoGeradora) {
        return new StreamProcessor(function* () {
            let i = 0;
            while (true) {
                yield funcaoGeradora(i++);
            }
        });
    }
    
    // Criar range
    static range(inicio, fim, passo = 1) {
        return new StreamProcessor(function* () {
            for (let i = inicio; i <= fim; i += passo) {
                yield i;
            }
        });
    }
    
    // Transformar elementos
    map(funcao) {
        const fonte = this.fonte;
        return new StreamProcessor(function* () {
            for (const item of fonte()) {
                yield funcao(item);
            }
        });
    }
    
    // Filtrar elementos
    filter(predicado) {
        const fonte = this.fonte;
        return new StreamProcessor(function* () {
            for (const item of fonte()) {
                if (predicado(item)) {
                    yield item;
                }
            }
        });
    }
    
    // Pegar quantidade limitada
    take(quantidade) {
        const fonte = this.fonte;
        return new StreamProcessor(function* () {
            let contador = 0;
            for (const item of fonte()) {
                if (contador >= quantidade) break;
                yield item;
                contador++;
            }
        });
    }
    
    // Pular elementos
    skip(quantidade) {
        const fonte = this.fonte;
        return new StreamProcessor(function* () {
            let contador = 0;
            for (const item of fonte()) {
                if (contador >= quantidade) {
                    yield item;
                }
                contador++;
            }
        });
    }
    
    // Achatar streams aninhados
    flatMap(funcao) {
        const fonte = this.fonte;
        return new StreamProcessor(function* () {
            for (const item of fonte()) {
                yield* funcao(item);
            }
        });
    }
    
    // Agrupar em chunks
    chunk(tamanho) {
        const fonte = this.fonte;
        return new StreamProcessor(function* () {
            let chunk = [];
            for (const item of fonte()) {
                chunk.push(item);
                if (chunk.length === tamanho) {
                    yield chunk;
                    chunk = [];
                }
            }
            if (chunk.length > 0) {
                yield chunk;
            }
        });
    }
    
    // Executar efeito colateral
    tap(funcao) {
        const fonte = this.fonte;
        return new StreamProcessor(function* () {
            for (const item of fonte()) {
                funcao(item);
                yield item;
            }
        });
    }
    
    // Reduzir a um valor
    reduce(funcao, valorInicial) {
        let acumulador = valorInicial;
        for (const item of this.fonte()) {
            acumulador = funcao(acumulador, item);
        }
        return acumulador;
    }
    
    // Coletar em array
    toArray() {
        return [...this.fonte()];
    }
    
    // Executar para cada elemento
    forEach(funcao) {
        for (const item of this.fonte()) {
            funcao(item);
        }
    }
    
    // Encontrar primeiro elemento
    find(predicado) {
        for (const item of this.fonte()) {
            if (predicado(item)) {
                return item;
            }
        }
        return undefined;
    }
    
    // Verificar se algum elemento atende condi√ß√£o
    some(predicado) {
        for (const item of this.fonte()) {
            if (predicado(item)) {
                return true;
            }
        }
        return false;
    }
    
    // Verificar se todos elementos atendem condi√ß√£o
    every(predicado) {
        for (const item of this.fonte()) {
            if (!predicado(item)) {
                return false;
            }
        }
        return true;
    }
    
    // Contar elementos
    count() {
        let contador = 0;
        for (const item of this.fonte()) {
            contador++;
        }
        return contador;
    }
    
    // Obter iterador
    [Symbol.iterator]() {
        return this.fonte();
    }
}

// Testando stream processor
console.log('\nüåä Testando stream processor:');

// Stream simples
const stream1 = StreamProcessor
    .range(1, 20)
    .filter(x => x % 2 === 0)
    .map(x => x * x)
    .take(5);

console.log('Stream 1 (pares ao quadrado, primeiros 5):');
for (const valor of stream1) {
    console.log(valor);
}

// Stream com chunks
console.log('\nüì¶ Stream com chunks:');
const stream2 = StreamProcessor
    .range(1, 10)
    .chunk(3);

for (const chunk of stream2) {
    console.log('Chunk:', chunk);
}

// Stream infinito com limite
console.log('\n‚ôæÔ∏è Stream infinito (primeiros 5 n√∫meros de Fibonacci):');
const fibStream = StreamProcessor
    .generate(i => {
        if (i === 0) return 0;
        if (i === 1) return 1;
        // Simplificado para demonstra√ß√£o
        return i; // Na pr√°tica, calcularia Fibonacci
    })
    .take(5);

for (const fib of fibStream) {
    console.log(`Fib: ${fib}`);
}

// Stream com efeitos colaterais
console.log('\nüëÅÔ∏è Stream com tap (efeitos colaterais):');
const resultado = StreamProcessor
    .from([1, 2, 3, 4, 5])
    .tap(x => console.log(`Processando: ${x}`))
    .map(x => x * 2)
    .tap(x => console.log(`Dobrado: ${x}`))
    .filter(x => x > 5)
    .toArray();

console.log('Resultado final:', resultado);

// ==========================================
// üéØ 4. DICAS DE OTIMIZA√á√ÉO
// ==========================================

console.log('\n=== DICAS DE OTIMIZA√á√ÉO ===');

/*
DICAS DE OTIMIZA√á√ÉO PARA ITERA√á√ÉO:

1. **Performance de Loops**
   - for tradicional: mais r√°pido
   - for...of: boa performance, mais leg√≠vel
   - forEach: overhead de fun√ß√£o
   - for...in: mais lento, para objetos

2. **Otimiza√ß√£o de For Loops**
   - Cache length em vari√°vel
   - Use decremento quando poss√≠vel
   - Evite opera√ß√µes custosas no loop
   - Considere loop unrolling para casos cr√≠ticos

3. **Lazy Evaluation**
   - Use generators para datasets grandes
   - Implemente early termination
   - Evite materializar dados desnecess√°rios
   - Combine opera√ß√µes em pipelines

4. **Memory Management**
   - Generators n√£o mant√™m todos valores na mem√≥ria
   - Use iteradores para streams de dados
   - Evite arrays intermedi√°rios desnecess√°rios
   - Implemente cleanup quando necess√°rio

5. **Casos Espec√≠ficos**
   - Use break/continue para controle de fluxo
   - Prefira for...of para itera√ß√£o de valores
   - Use for...in apenas para propriedades de objeto
   - Considere while para condi√ß√µes complexas
*/

// Exemplo de otimiza√ß√£o
console.log('\n‚ö° Exemplo de otimiza√ß√£o:');

// ‚ùå Menos eficiente
function processarArrayLento(array) {
    const resultado = [];
    for (let i = 0; i < array.length; i++) {
        if (array[i] % 2 === 0) {
            resultado.push(array[i] * array[i]);
        }
    }
    return resultado;
}

// ‚úÖ Mais eficiente - cache length
function processarArrayRapido(array) {
    const resultado = [];
    const length = array.length; // Cache length
    for (let i = 0; i < length; i++) {
        const item = array[i]; // Cache item
        if (item % 2 === 0) {
            resultado.push(item * item);
        }
    }
    return resultado;
}

// ‚úÖ Generator para lazy evaluation
function* processarArrayLazy(array) {
    for (const item of array) {
        if (item % 2 === 0) {
            yield item * item;
        }
    }
}

// Testando performance
const arrayGrande = Array.from({ length: 100000 }, (_, i) => i);

console.time('Processamento lento');
processarArrayLento(arrayGrande.slice(0, 1000));
console.timeEnd('Processamento lento');

console.time('Processamento r√°pido');
processarArrayRapido(arrayGrande.slice(0, 1000));
console.timeEnd('Processamento r√°pido');

console.time('Processamento lazy (primeiros 10)');
const lazy = processarArrayLazy(arrayGrande);
const primeiros10 = [];
for (const item of lazy) {
    primeiros10.push(item);
    if (primeiros10.length === 10) break;
}
console.timeEnd('Processamento lazy (primeiros 10)');

// ==========================================
// üìö 5. REFER√äNCIAS E PR√ìXIMOS PASSOS
// ==========================================

console.log('\n=== REFER√äNCIAS E PR√ìXIMOS PASSOS ===');

/*
REFER√äNCIAS PARA APROFUNDAMENTO:

üìñ DOCUMENTA√á√ÉO OFICIAL:
- MDN Iteration Protocols: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols
- MDN Generators: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator
- MDN for...of: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...of
- MDN Symbol.iterator: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/iterator

üìö LIVROS RECOMENDADOS:
- "You Don't Know JS: ES6 & Beyond" - Kyle Simpson
- "Exploring ES6" - Dr. Axel Rauschmayer
- "JavaScript: The Definitive Guide" - David Flanagan

üéØ PR√ìXIMOS T√ìPICOS DE ESTUDO:
1. Array methods chaining
2. Async iterators e for await...of
3. Streams e reactive programming
4. Performance optimization
5. Functional programming patterns
6. Data structures customizadas
7. Algorithm implementation
8. Memory management avan√ßado

üí° EXERC√çCIOS SUGERIDOS:
1. Implemente uma estrutura de dados Tree iter√°vel
2. Crie um sistema de parsing de CSV lazy
3. Desenvolva um motor de busca com iteradores
4. Implemente algoritmos de sorting com generators
5. Crie um sistema de cache com lazy loading

üîß FERRAMENTAS √öTEIS:
- RxJS para reactive programming
- Lodash para utilit√°rios de itera√ß√£o
- Immutable.js para estruturas imut√°veis
- Benchmark.js para testes de performance
- Memory profilers para an√°lise de mem√≥ria

‚ö†Ô∏è ARMADILHAS COMUNS:
1. Usar for...in com arrays
2. N√£o considerar performance em loops cr√≠ticos
3. Criar generators desnecessariamente complexos
4. N√£o implementar cleanup em iteradores
5. Confundir iterables com iterators
6. N√£o usar lazy evaluation quando apropriado
7. Memory leaks em generators infinitos
8. N√£o validar dados antes de iterar

üéì CONCEITOS AVAN√áADOS:
- Async iterators
- Observable patterns
- Transducers
- Coroutines
- Backpressure handling
*/

console.log('\n‚úÖ M√≥dulo de Itera√ß√£o de Arrays conclu√≠do!');
console.log('üìù Pr√≥ximo arquivo: 04-array-methods-chain.js');
console.log('üéØ Continue praticando com os exerc√≠cios propostos!');

/*
==============================================
RESUMO DO M√ìDULO - ITERA√á√ÉO DE ARRAYS
==============================================

‚úÖ CONCEITOS APRENDIDOS:
- For tradicional e suas varia√ß√µes
- For...of para itera√ß√£o de valores
- For...in para propriedades de objetos
- While e do-while
- Iteradores customizados
- Symbol.iterator
- Generators e yield
- Lazy evaluation
- Stream processing

üéØ HABILIDADES DESENVOLVIDAS:
- Escolher o tipo de loop apropriado
- Implementar iteradores customizados
- Criar generators eficientes
- Aplicar lazy evaluation
- Otimizar performance de loops
- Processar streams de dados
- Implementar pipelines de transforma√ß√£o

üìà PR√ìXIMOS DESAFIOS:
- Array methods chaining
- Async iteration
- Reactive programming
- Performance optimization
- Advanced data structures

==============================================
*/