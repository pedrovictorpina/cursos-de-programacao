/*
==============================================
CURSO DE JAVASCRIPT - M√ìDULO 6.1
SELE√á√ÉO DE ELEMENTOS DO DOM
==============================================

Objetivos de Aprendizagem:
- Dominar m√©todos de sele√ß√£o de elementos
- Entender a diferen√ßa entre NodeList e HTMLCollection
- Aplicar seletores CSS no JavaScript
- Otimizar consultas ao DOM
- Implementar sele√ß√µes din√¢micas
- Trabalhar com pseudo-elementos
- Criar utilit√°rios de sele√ß√£o
- Debuggar problemas de sele√ß√£o

‚è±Ô∏è TEMPO ESTIMADO: 70 minutos
üìä N√çVEL: Iniciante a Intermedi√°rio
==============================================
*/

// ==========================================
// üìö 1. TEORIA: DOM E SELE√á√ÉO DE ELEMENTOS
// ==========================================

/*
O QUE √â O DOM?
O Document Object Model (DOM) √© uma representa√ß√£o em √°rvore da estrutura
HTML/XML de uma p√°gina web. Cada elemento HTML se torna um n√≥ na √°rvore DOM.

HIERARQUIIA DO DOM:
- Document (raiz)
  - HTML
    - Head
      - Title, Meta, Link, etc.
    - Body
      - Div, P, Span, etc.
        - Elementos filhos
          - Texto, atributos

TIPOS DE N√ìS:
1. **Element Node** - elementos HTML (div, p, span)
2. **Text Node** - conte√∫do de texto
3. **Attribute Node** - atributos dos elementos
4. **Comment Node** - coment√°rios HTML
5. **Document Node** - documento inteiro

M√âTODOS DE SELE√á√ÉO:

1. **getElementById()** - seleciona por ID (√∫nico)
   - Retorna: Element ou null
   - Performance: Muito r√°pida (√≠ndice interno)
   - Uso: Elementos √∫nicos e espec√≠ficos

2. **getElementsByClassName()** - seleciona por classe
   - Retorna: HTMLCollection (live)
   - Performance: R√°pida
   - Uso: M√∫ltiplos elementos com mesma classe

3. **getElementsByTagName()** - seleciona por tag
   - Retorna: HTMLCollection (live)
   - Performance: R√°pida
   - Uso: Todos elementos de um tipo

4. **querySelector()** - primeiro elemento que atende seletor CSS
   - Retorna: Element ou null
   - Performance: Moderada
   - Uso: Sele√ß√µes complexas, primeiro elemento

5. **querySelectorAll()** - todos elementos que atendem seletor CSS
   - Retorna: NodeList (static)
   - Performance: Moderada
   - Uso: Sele√ß√µes complexas, m√∫ltiplos elementos

6. **getElementsByName()** - seleciona por atributo name
   - Retorna: NodeList (live)
   - Performance: Moderada
   - Uso: Elementos de formul√°rio

DIFEREN√áAS IMPORTANTES:

**HTMLCollection vs NodeList:**
- HTMLCollection: live (atualiza automaticamente)
- NodeList: pode ser live ou static
- Ambos s√£o array-like mas n√£o arrays

**Live vs Static:**
- Live: reflete mudan√ßas no DOM em tempo real
- Static: snapshot do DOM no momento da consulta

**Performance:**
- getElementById > getElementsByClassName/TagName > querySelector/All
- Cache sele√ß√µes frequentes
- Evite consultas repetitivas

SELETORES CSS SUPORTADOS:
- Elementos: div, p, span
- Classes: .classe, .classe1.classe2
- IDs: #id
- Atributos: [attr], [attr="valor"]
- Pseudo-classes: :hover, :first-child, :nth-child()
- Pseudo-elementos: ::before, ::after
- Combinadores: >, +, ~, espa√ßo
- M√∫ltiplos: seletor1, seletor2

OTIMIZA√á√ÉO:
- Use getElementById quando poss√≠vel
- Cache elementos frequentemente acessados
- Limite escopo de busca
- Evite seletores muito complexos
- Use context para limitar busca
*/

console.log('=== SELE√á√ÉO DE ELEMENTOS DO DOM ===');

// ==========================================
// üí° 2. EXEMPLOS PR√ÅTICOS
// ==========================================

// Primeiro, vamos criar uma estrutura HTML simulada para demonstra√ß√£o
// Em um ambiente real, estes elementos j√° existiriam na p√°gina

// ========== CRIANDO ESTRUTURA DE TESTE ==========
console.log('\n--- CRIANDO ESTRUTURA DE TESTE ---');

// Fun√ß√£o para criar estrutura HTML de exemplo
function criarEstruturaHTML() {
    // Limpar body existente (se houver)
    if (typeof document !== 'undefined') {
        document.body.innerHTML = '';
        
        // Criar estrutura de exemplo
        const html = `
            <header id="cabecalho" class="header main-header">
                <nav class="navegacao">
                    <ul class="menu">
                        <li class="item-menu"><a href="#home">Home</a></li>
                        <li class="item-menu"><a href="#sobre">Sobre</a></li>
                        <li class="item-menu"><a href="#contato">Contato</a></li>
                    </ul>
                </nav>
            </header>
            
            <main id="conteudo-principal" class="main-content">
                <section class="secao hero">
                    <h1 class="titulo principal">Bem-vindo ao Curso de JavaScript</h1>
                    <p class="descricao">Aprenda JavaScript do b√°sico ao avan√ßado</p>
                    <button id="btn-comecar" class="botao primario">Come√ßar Agora</button>
                </section>
                
                <section class="secao modulos">
                    <h2 class="titulo secundario">M√≥dulos do Curso</h2>
                    <div class="container-modulos">
                        <article class="modulo" data-nivel="basico" data-duracao="2h">
                            <h3 class="titulo-modulo">Fundamentos</h3>
                            <p class="descricao-modulo">Vari√°veis, tipos e operadores</p>
                            <span class="badge nivel-basico">B√°sico</span>
                        </article>
                        
                        <article class="modulo" data-nivel="intermediario" data-duracao="3h">
                            <h3 class="titulo-modulo">Fun√ß√µes</h3>
                            <p class="descricao-modulo">Declara√ß√£o, par√¢metros e closures</p>
                            <span class="badge nivel-intermediario">Intermedi√°rio</span>
                        </article>
                        
                        <article class="modulo" data-nivel="avancado" data-duracao="4h">
                            <h3 class="titulo-modulo">DOM</h3>
                            <p class="descricao-modulo">Manipula√ß√£o e eventos</p>
                            <span class="badge nivel-avancado">Avan√ßado</span>
                        </article>
                    </div>
                </section>
                
                <section class="secao formulario">
                    <h2 class="titulo secundario">Contato</h2>
                    <form id="form-contato" class="formulario">
                        <div class="campo">
                            <label for="nome">Nome:</label>
                            <input type="text" id="nome" name="nome" class="input" required>
                        </div>
                        
                        <div class="campo">
                            <label for="email">Email:</label>
                            <input type="email" id="email" name="email" class="input" required>
                        </div>
                        
                        <div class="campo">
                            <label for="mensagem">Mensagem:</label>
                            <textarea id="mensagem" name="mensagem" class="input textarea" rows="4"></textarea>
                        </div>
                        
                        <button type="submit" class="botao secundario">Enviar</button>
                    </form>
                </section>
            </main>
            
            <footer id="rodape" class="footer">
                <p class="copyright">&copy; 2024 Curso JavaScript. Todos os direitos reservados.</p>
                <div class="redes-sociais">
                    <a href="#" class="link-social" data-rede="facebook">Facebook</a>
                    <a href="#" class="link-social" data-rede="twitter">Twitter</a>
                    <a href="#" class="link-social" data-rede="linkedin">LinkedIn</a>
                </div>
            </footer>
        `;
        
        document.body.innerHTML = html;
        console.log('‚úÖ Estrutura HTML criada com sucesso!');
    } else {
        console.log('‚ö†Ô∏è Ambiente Node.js detectado - simulando estrutura HTML');
    }
}

// Simular ambiente DOM se n√£o estiver no browser
if (typeof document === 'undefined') {
    console.log('üìù Simulando ambiente DOM para demonstra√ß√£o...');
    
    // Mock b√°sico do document para demonstra√ß√£o
    global.document = {
        getElementById: (id) => ({ id, tagName: 'DIV', className: 'mock' }),
        getElementsByClassName: (className) => [{ className, tagName: 'DIV' }],
        getElementsByTagName: (tagName) => [{ tagName: tagName.toUpperCase() }],
        querySelector: (selector) => ({ selector, tagName: 'DIV' }),
        querySelectorAll: (selector) => [{ selector, tagName: 'DIV' }],
        getElementsByName: (name) => [{ name, tagName: 'INPUT' }]
    };
} else {
    // Criar estrutura real no browser
    criarEstruturaHTML();
}

// ========== SELE√á√ÉO POR ID ==========
console.log('\n--- SELE√á√ÉO POR ID ---');

// getElementById - m√©todo mais r√°pido para elementos √∫nicos
console.log('\nüéØ getElementById():');

const cabecalho = document.getElementById('cabecalho');
console.log('Cabe√ßalho:', cabecalho);

const btnComecar = document.getElementById('btn-comecar');
console.log('Bot√£o come√ßar:', btnComecar);

const formContato = document.getElementById('form-contato');
console.log('Formul√°rio:', formContato);

// Verifica√ß√£o de exist√™ncia
const elementoInexistente = document.getElementById('nao-existe');
console.log('Elemento inexistente:', elementoInexistente); // null

// Fun√ß√£o utilit√°ria para sele√ß√£o segura por ID
function selecionarPorId(id) {
    const elemento = document.getElementById(id);
    if (!elemento) {
        console.warn(`‚ö†Ô∏è Elemento com ID '${id}' n√£o encontrado`);
        return null;
    }
    console.log(`‚úÖ Elemento '${id}' encontrado:`, elemento.tagName || 'MOCK');
    return elemento;
}

console.log('\nüõ°Ô∏è Sele√ß√£o segura por ID:');
selecionarPorId('cabecalho');
selecionarPorId('elemento-inexistente');

// ========== SELE√á√ÉO POR CLASSE ==========
console.log('\n--- SELE√á√ÉO POR CLASSE ---');

// getElementsByClassName - retorna HTMLCollection (live)
console.log('\nüè∑Ô∏è getElementsByClassName():');

const titulos = document.getElementsByClassName('titulo');
console.log('T√≠tulos:', titulos);
console.log('Quantidade de t√≠tulos:', titulos.length);

const botoes = document.getElementsByClassName('botao');
console.log('Bot√µes:', botoes);

const modulos = document.getElementsByClassName('modulo');
console.log('M√≥dulos:', modulos);

// Iterando sobre HTMLCollection
console.log('\nüîÑ Iterando sobre elementos por classe:');
if (typeof document !== 'undefined' && titulos.length > 0) {
    // Converter para array para usar m√©todos de array
    const arrayTitulos = Array.from(titulos);
    arrayTitulos.forEach((titulo, index) => {
        console.log(`T√≠tulo ${index + 1}:`, titulo.textContent || titulo.className);
    });
} else {
    console.log('Simula√ß√£o: 3 t√≠tulos encontrados');
}

// Fun√ß√£o utilit√°ria para sele√ß√£o por classe
function selecionarPorClasse(className, contexto = document) {
    const elementos = contexto.getElementsByClassName(className);
    console.log(`üîç Encontrados ${elementos.length} elementos com classe '${className}'`);
    return elementos;
}

console.log('\nüìã Sele√ß√µes por classe:');
selecionarPorClasse('titulo');
selecionarPorClasse('botao');
selecionarPorClasse('input');

// ========== SELE√á√ÉO POR TAG ==========
console.log('\n--- SELE√á√ÉO POR TAG ---');

// getElementsByTagName - retorna HTMLCollection (live)
console.log('\nüèóÔ∏è getElementsByTagName():');

const paragrafos = document.getElementsByTagName('p');
console.log('Par√°grafos:', paragrafos);

const links = document.getElementsByTagName('a');
console.log('Links:', links);

const inputs = document.getElementsByTagName('input');
console.log('Inputs:', inputs);

// Sele√ß√£o de todos os elementos
const todosElementos = document.getElementsByTagName('*');
console.log('Todos os elementos:', todosElementos.length);

// Fun√ß√£o para contar elementos por tag
function contarElementosPorTag(tag) {
    const elementos = document.getElementsByTagName(tag);
    console.log(`üìä ${tag.toUpperCase()}: ${elementos.length} elementos`);
    return elementos.length;
}

console.log('\nüìà Contagem de elementos:');
contarElementosPorTag('div');
contarElementosPorTag('section');
contarElementosPorTag('article');
contarElementosPorTag('button');

// ========== SELE√á√ÉO COM QUERYSELECTOR ==========
console.log('\n--- SELE√á√ÉO COM QUERYSELECTOR ---');

// querySelector - primeiro elemento que atende ao seletor CSS
console.log('\nüéØ querySelector():');

// Seletores b√°sicos
const primeiroTitulo = document.querySelector('.titulo');
console.log('Primeiro t√≠tulo:', primeiroTitulo);

const primeiroBotao = document.querySelector('.botao');
console.log('Primeiro bot√£o:', primeiroBotao);

const primeiroInput = document.querySelector('input');
console.log('Primeiro input:', primeiroInput);

// Seletores complexos
const tituloSecundario = document.querySelector('h2.titulo.secundario');
console.log('T√≠tulo secund√°rio:', tituloSecundario);

const botaoPrimario = document.querySelector('button.botao.primario');
console.log('Bot√£o prim√°rio:', botaoPrimario);

const linkSocial = document.querySelector('a.link-social[data-rede="facebook"]');
console.log('Link Facebook:', linkSocial);

// Seletores de hierarquia
const menuItem = document.querySelector('nav .menu .item-menu');
console.log('Item de menu:', menuItem);

const inputFormulario = document.querySelector('#form-contato input[type="email"]');
console.log('Input de email:', inputFormulario);

// Pseudo-seletores
const primeiroModulo = document.querySelector('.modulo:first-child');
console.log('Primeiro m√≥dulo:', primeiroModulo);

const ultimoLink = document.querySelector('.redes-sociais a:last-child');
console.log('√öltimo link social:', ultimoLink);

// ========== SELE√á√ÉO COM QUERYSELECTORALL ==========
console.log('\n--- SELE√á√ÉO COM QUERYSELECTORALL ---');

// querySelectorAll - todos elementos que atendem ao seletor CSS
console.log('\nüéØ querySelectorAll():');

// Sele√ß√µes m√∫ltiplas
const todosTitulos = document.querySelectorAll('.titulo');
console.log('Todos os t√≠tulos:', todosTitulos);
console.log('Quantidade:', todosTitulos.length);

const todosBotoes = document.querySelectorAll('.botao');
console.log('Todos os bot√µes:', todosBotoes);

const todosInputs = document.querySelectorAll('input');
console.log('Todos os inputs:', todosInputs);

// Seletores complexos
const modulosBasicos = document.querySelectorAll('.modulo[data-nivel="basico"]');
console.log('M√≥dulos b√°sicos:', modulosBasicos);

const linksSociais = document.querySelectorAll('.redes-sociais a');
console.log('Links sociais:', linksSociais);

const camposObrigatorios = document.querySelectorAll('input[required]');
console.log('Campos obrigat√≥rios:', camposObrigatorios);

// M√∫ltiplos seletores
const titulosEBotoes = document.querySelectorAll('.titulo, .botao');
console.log('T√≠tulos e bot√µes:', titulosEBotoes);

// Iterando sobre NodeList
console.log('\nüîÑ Iterando sobre NodeList:');
if (typeof document !== 'undefined' && todosTitulos.length > 0) {
    todosTitulos.forEach((titulo, index) => {
        console.log(`T√≠tulo ${index + 1}:`, titulo.textContent || titulo.className);
    });
} else {
    console.log('Simula√ß√£o: Iterando sobre 3 t√≠tulos');
}

// ========== SELE√á√ÉO POR ATRIBUTO NAME ==========
console.log('\n--- SELE√á√ÉO POR ATRIBUTO NAME ---');

// getElementsByName - usado principalmente para elementos de formul√°rio
console.log('\nüìù getElementsByName():');

const campoNome = document.getElementsByName('nome');
console.log('Campo nome:', campoNome);

const campoEmail = document.getElementsByName('email');
console.log('Campo email:', campoEmail);

const campoMensagem = document.getElementsByName('mensagem');
console.log('Campo mensagem:', campoMensagem);

// ========== SELE√á√ÉO COM CONTEXTO ==========
console.log('\n--- SELE√á√ÉO COM CONTEXTO ---');

// Limitando busca a um elemento espec√≠fico
console.log('\nüéØ Sele√ß√£o com contexto:');

// Primeiro, selecionar o contexto
const secaoModulos = document.querySelector('.secao.modulos');
console.log('Se√ß√£o m√≥dulos:', secaoModulos);

if (secaoModulos && typeof secaoModulos.querySelector === 'function') {
    // Buscar apenas dentro da se√ß√£o de m√≥dulos
    const tituloSecaoModulos = secaoModulos.querySelector('.titulo');
    console.log('T√≠tulo da se√ß√£o m√≥dulos:', tituloSecaoModulos);
    
    const modulosDentroSecao = secaoModulos.querySelectorAll('.modulo');
    console.log('M√≥dulos dentro da se√ß√£o:', modulosDentroSecao);
    
    const badgesNivel = secaoModulos.querySelectorAll('.badge');
    console.log('Badges de n√≠vel:', badgesNivel);
} else {
    console.log('Simula√ß√£o: Elementos encontrados dentro do contexto');
}

// Contexto com formul√°rio
const formulario = document.querySelector('#form-contato');
if (formulario && typeof formulario.querySelectorAll === 'function') {
    const inputsFormulario = formulario.querySelectorAll('input');
    console.log('Inputs do formul√°rio:', inputsFormulario);
    
    const camposObrigatoriosForm = formulario.querySelectorAll('[required]');
    console.log('Campos obrigat√≥rios do form:', camposObrigatoriosForm);
}

// ========== SELE√á√ïES AVAN√áADAS ==========
console.log('\n--- SELE√á√ïES AVAN√áADAS ---');

// Seletores de atributo avan√ßados
console.log('\nüîç Seletores de atributo avan√ßados:');

// Atributo existe
const elementosComDataNivel = document.querySelectorAll('[data-nivel]');
console.log('Elementos com data-nivel:', elementosComDataNivel);

// Atributo com valor espec√≠fico
const modulosIntermediarios = document.querySelectorAll('[data-nivel="intermediario"]');
console.log('M√≥dulos intermedi√°rios:', modulosIntermediarios);

// Atributo cont√©m valor
const linksComHref = document.querySelectorAll('a[href*="#"]');
console.log('Links com # no href:', linksComHref);

// Atributo come√ßa com valor
const inputsTexto = document.querySelectorAll('input[type^="text"]');
console.log('Inputs de texto:', inputsTexto);

// Atributo termina com valor
const elementosComClasseModulo = document.querySelectorAll('[class$="modulo"]');
console.log('Elementos com classe terminada em "modulo":', elementosComClasseModulo);

// Pseudo-seletores avan√ßados
console.log('\nüé≠ Pseudo-seletores avan√ßados:');

// nth-child
const segundoItemMenu = document.querySelector('.item-menu:nth-child(2)');
console.log('Segundo item do menu:', segundoItemMenu);

const modulosImpares = document.querySelectorAll('.modulo:nth-child(odd)');
console.log('M√≥dulos em posi√ß√µes √≠mpares:', modulosImpares);

// not
const botoesNaoPrimarios = document.querySelectorAll('.botao:not(.primario)');
console.log('Bot√µes n√£o prim√°rios:', botoesNaoPrimarios);

// first-of-type e last-of-type
const primeiroH2 = document.querySelector('h2:first-of-type');
console.log('Primeiro H2:', primeiroH2);

const ultimoP = document.querySelector('p:last-of-type');
console.log('√öltimo par√°grafo:', ultimoP);

// ==========================================
// üéØ 3. EXERC√çCIOS PR√ÅTICOS
// ==========================================

console.log('\n=== EXERC√çCIOS PR√ÅTICOS ===');

// EXERC√çCIO 1: Sistema de Sele√ß√£o Inteligente
console.log('\n--- EXERC√çCIO 1: SISTEMA DE SELE√á√ÉO INTELIGENTE ---');

class SeletorInteligente {
    constructor() {
        this.cache = new Map();
        this.estatisticas = {
            consultas: 0,
            cacheHits: 0,
            tempoTotal: 0
        };
    }
    
    // Sele√ß√£o com cache autom√°tico
    selecionar(seletor, opcoes = {}) {
        const inicio = performance.now();
        this.estatisticas.consultas++;
        
        const {
            cache = true,
            contexto = document,
            multiplos = false,
            obrigatorio = false
        } = opcoes;
        
        // Verificar cache
        const chaveCache = `${seletor}_${multiplos}_${contexto === document ? 'doc' : 'ctx'}`;
        
        if (cache && this.cache.has(chaveCache)) {
            this.estatisticas.cacheHits++;
            const resultado = this.cache.get(chaveCache);
            console.log(`üöÄ Cache hit para '${seletor}'`);
            return resultado;
        }
        
        // Realizar sele√ß√£o
        let elementos;
        try {
            if (multiplos) {
                elementos = contexto.querySelectorAll(seletor);
            } else {
                elementos = contexto.querySelector(seletor);
            }
            
            // Validar resultado
            if (obrigatorio && (!elementos || (multiplos && elementos.length === 0))) {
                throw new Error(`Elemento obrigat√≥rio n√£o encontrado: ${seletor}`);
            }
            
            // Armazenar no cache
            if (cache) {
                this.cache.set(chaveCache, elementos);
            }
            
            const tempo = performance.now() - inicio;
            this.estatisticas.tempoTotal += tempo;
            
            console.log(`‚úÖ Sele√ß√£o '${seletor}': ${multiplos ? elementos.length + ' elementos' : (elementos ? '1 elemento' : 'nenhum elemento')} (${tempo.toFixed(2)}ms)`);
            
            return elementos;
            
        } catch (error) {
            console.error(`‚ùå Erro na sele√ß√£o '${seletor}':`, error.message);
            return multiplos ? [] : null;
        }
    }
    
    // Sele√ß√£o por ID otimizada
    porId(id, obrigatorio = false) {
        return this.selecionar(`#${id}`, { obrigatorio });
    }
    
    // Sele√ß√£o por classe otimizada
    porClasse(classe, multiplos = true, contexto = document) {
        return this.selecionar(`.${classe}`, { multiplos, contexto });
    }
    
    // Sele√ß√£o por tag otimizada
    porTag(tag, multiplos = true, contexto = document) {
        return this.selecionar(tag, { multiplos, contexto });
    }
    
    // Sele√ß√£o por atributo
    porAtributo(atributo, valor = null, multiplos = true) {
        const seletor = valor ? `[${atributo}="${valor}"]` : `[${atributo}]`;
        return this.selecionar(seletor, { multiplos });
    }
    
    // Sele√ß√£o combinada
    combinada(seletores, operador = ',') {
        const seletorCombinado = seletores.join(operador);
        return this.selecionar(seletorCombinado, { multiplos: true });
    }
    
    // Limpar cache
    limparCache() {
        this.cache.clear();
        console.log('üßπ Cache limpo');
    }
    
    // Obter estat√≠sticas
    obterEstatisticas() {
        const { consultas, cacheHits, tempoTotal } = this.estatisticas;
        const taxaCache = consultas > 0 ? (cacheHits / consultas * 100).toFixed(1) : 0;
        const tempoMedio = consultas > 0 ? (tempoTotal / consultas).toFixed(2) : 0;
        
        return {
            consultas,
            cacheHits,
            taxaCache: `${taxaCache}%`,
            tempoTotal: `${tempoTotal.toFixed(2)}ms`,
            tempoMedio: `${tempoMedio}ms`,
            itensCache: this.cache.size
        };
    }
    
    // Validar seletor CSS
    validarSeletor(seletor) {
        try {
            document.querySelector(seletor);
            return true;
        } catch (error) {
            console.warn(`‚ö†Ô∏è Seletor inv√°lido: ${seletor}`);
            return false;
        }
    }
    
    // Encontrar elementos por texto
    porTexto(texto, tag = '*', exato = false) {
        const elementos = this.selecionar(tag, { multiplos: true });
        const resultado = [];
        
        if (elementos && elementos.length > 0) {
            for (const elemento of elementos) {
                const textoElemento = elemento.textContent || '';
                const match = exato ? 
                    textoElemento.trim() === texto :
                    textoElemento.toLowerCase().includes(texto.toLowerCase());
                
                if (match) {
                    resultado.push(elemento);
                }
            }
        }
        
        console.log(`üîç Encontrados ${resultado.length} elementos com texto '${texto}'`);
        return resultado;
    }
}

// Testando seletor inteligente
console.log('\nüß† Testando seletor inteligente:');
const seletor = new SeletorInteligente();

// Testes b√°sicos
const cabecalhoInteligente = seletor.porId('cabecalho', true);
const titulosInteligentes = seletor.porClasse('titulo');
const botoesInteligentes = seletor.porTag('button');

// Teste de cache
console.log('\nüíæ Teste de cache:');
seletor.porId('cabecalho'); // Deve usar cache
seletor.porClasse('titulo'); // Deve usar cache

// Sele√ß√µes avan√ßadas
const modulosNivel = seletor.porAtributo('data-nivel', 'basico');
const elementosCombinados = seletor.combinada(['.titulo', '.botao']);

// Busca por texto
const elementosComTexto = seletor.porTexto('JavaScript');

// Estat√≠sticas
console.log('\nüìä Estat√≠sticas do seletor:');
console.log(seletor.obterEstatisticas());

// EXERC√çCIO 2: Analisador de DOM
console.log('\n--- EXERC√çCIO 2: ANALISADOR DE DOM ---');

class AnalisadorDOM {
    constructor() {
        this.relatorio = {
            elementos: {},
            classes: {},
            ids: {},
            atributos: {},
            estrutura: {},
            problemas: []
        };
    }
    
    // Analisar toda a estrutura do DOM
    analisar(contexto = document) {
        console.log('üîç Iniciando an√°lise do DOM...');
        
        this.analisarElementos(contexto);
        this.analisarClasses(contexto);
        this.analisarIds(contexto);
        this.analisarAtributos(contexto);
        this.analisarEstrutura(contexto);
        this.detectarProblemas(contexto);
        
        return this.relatorio;
    }
    
    // Analisar tipos de elementos
    analisarElementos(contexto) {
        const todosElementos = contexto.querySelectorAll('*');
        
        for (const elemento of todosElementos) {
            const tag = elemento.tagName ? elemento.tagName.toLowerCase() : 'unknown';
            this.relatorio.elementos[tag] = (this.relatorio.elementos[tag] || 0) + 1;
        }
        
        console.log(`üìä Analisados ${todosElementos.length} elementos`);
    }
    
    // Analisar classes
    analisarClasses(contexto) {
        const elementosComClasse = contexto.querySelectorAll('[class]');
        
        for (const elemento of elementosComClasse) {
            const classes = elemento.className ? elemento.className.split(' ') : [];
            
            for (const classe of classes) {
                if (classe.trim()) {
                    this.relatorio.classes[classe] = (this.relatorio.classes[classe] || 0) + 1;
                }
            }
        }
        
        console.log(`üè∑Ô∏è Analisadas ${Object.keys(this.relatorio.classes).length} classes √∫nicas`);
    }
    
    // Analisar IDs
    analisarIds(contexto) {
        const elementosComId = contexto.querySelectorAll('[id]');
        
        for (const elemento of elementosComId) {
            const id = elemento.id;
            if (id) {
                this.relatorio.ids[id] = (this.relatorio.ids[id] || 0) + 1;
                
                // Detectar IDs duplicados
                if (this.relatorio.ids[id] > 1) {
                    this.relatorio.problemas.push({
                        tipo: 'ID_DUPLICADO',
                        elemento: id,
                        descricao: `ID '${id}' usado ${this.relatorio.ids[id]} vezes`
                    });
                }
            }
        }
        
        console.log(`üÜî Analisados ${Object.keys(this.relatorio.ids).length} IDs √∫nicos`);
    }
    
    // Analisar atributos
    analisarAtributos(contexto) {
        const todosElementos = contexto.querySelectorAll('*');
        
        for (const elemento of todosElementos) {
            if (elemento.attributes) {
                for (const attr of elemento.attributes) {
                    const nome = attr.name;
                    this.relatorio.atributos[nome] = (this.relatorio.atributos[nome] || 0) + 1;
                }
            }
        }
        
        console.log(`üìã Analisados ${Object.keys(this.relatorio.atributos).length} tipos de atributos`);
    }
    
    // Analisar estrutura hier√°rquica
    analisarEstrutura(contexto) {
        const calcularProfundidade = (elemento, profundidade = 0) => {
            this.relatorio.estrutura.profundidadeMaxima = Math.max(
                this.relatorio.estrutura.profundidadeMaxima || 0,
                profundidade
            );
            
            if (elemento.children) {
                for (const filho of elemento.children) {
                    calcularProfundidade(filho, profundidade + 1);
                }
            }
        };
        
        calcularProfundidade(contexto);
        
        // Contar elementos √≥rf√£os (sem parent)
        const elementosOrfaos = contexto.querySelectorAll('*:not(:has(*))');
        this.relatorio.estrutura.elementosOrfaos = elementosOrfaos.length;
        
        console.log(`üå≥ Estrutura analisada - Profundidade m√°xima: ${this.relatorio.estrutura.profundidadeMaxima}`);
    }
    
    // Detectar problemas comuns
    detectarProblemas(contexto) {
        // Elementos sem texto acess√≠vel
        const imagensSemAlt = contexto.querySelectorAll('img:not([alt])');
        if (imagensSemAlt.length > 0) {
            this.relatorio.problemas.push({
                tipo: 'ACESSIBILIDADE',
                elemento: 'img',
                descricao: `${imagensSemAlt.length} imagens sem atributo alt`
            });
        }
        
        // Links sem href
        const linksSemHref = contexto.querySelectorAll('a:not([href])');
        if (linksSemHref.length > 0) {
            this.relatorio.problemas.push({
                tipo: 'SEMANTICA',
                elemento: 'a',
                descricao: `${linksSemHref.length} links sem atributo href`
            });
        }
        
        // Inputs sem label
        const inputsSemLabel = contexto.querySelectorAll('input:not([aria-label]):not([aria-labelledby])');
        const labelsExistentes = contexto.querySelectorAll('label');
        
        if (inputsSemLabel.length > labelsExistentes.length) {
            this.relatorio.problemas.push({
                tipo: 'ACESSIBILIDADE',
                elemento: 'input',
                descricao: 'Poss√≠veis inputs sem labels associados'
            });
        }
        
        // Classes n√£o utilizadas (simula√ß√£o)
        const classesDefinidas = Object.keys(this.relatorio.classes);
        const classesComUsoUnico = classesDefinidas.filter(classe => 
            this.relatorio.classes[classe] === 1
        );
        
        if (classesComUsoUnico.length > 0) {
            this.relatorio.problemas.push({
                tipo: 'OTIMIZACAO',
                elemento: 'class',
                descricao: `${classesComUsoUnico.length} classes usadas apenas uma vez`
            });
        }
        
        console.log(`‚ö†Ô∏è Detectados ${this.relatorio.problemas.length} problemas potenciais`);
    }
    
    // Gerar relat√≥rio formatado
    gerarRelatorio() {
        console.log('\nüìã RELAT√ìRIO DE AN√ÅLISE DO DOM');
        console.log('================================');
        
        // Elementos mais comuns
        const elementosOrdenados = Object.entries(this.relatorio.elementos)
            .sort(([,a], [,b]) => b - a)
            .slice(0, 5);
        
        console.log('\nüèóÔ∏è Top 5 elementos:');
        elementosOrdenados.forEach(([tag, count]) => {
            console.log(`  ${tag}: ${count}`);
        });
        
        // Classes mais usadas
        const classesOrdenadas = Object.entries(this.relatorio.classes)
            .sort(([,a], [,b]) => b - a)
            .slice(0, 5);
        
        console.log('\nüè∑Ô∏è Top 5 classes:');
        classesOrdenadas.forEach(([classe, count]) => {
            console.log(`  .${classe}: ${count}`);
        });
        
        // Estrutura
        console.log('\nüå≥ Estrutura:');
        console.log(`  Profundidade m√°xima: ${this.relatorio.estrutura.profundidadeMaxima}`);
        console.log(`  Total de elementos: ${Object.values(this.relatorio.elementos).reduce((a, b) => a + b, 0)}`);
        console.log(`  Total de classes: ${Object.keys(this.relatorio.classes).length}`);
        console.log(`  Total de IDs: ${Object.keys(this.relatorio.ids).length}`);
        
        // Problemas
        if (this.relatorio.problemas.length > 0) {
            console.log('\n‚ö†Ô∏è Problemas detectados:');
            this.relatorio.problemas.forEach((problema, index) => {
                console.log(`  ${index + 1}. [${problema.tipo}] ${problema.descricao}`);
            });
        } else {
            console.log('\n‚úÖ Nenhum problema detectado!');
        }
        
        return this.relatorio;
    }
    
    // Sugerir otimiza√ß√µes
    sugerirOtimizacoes() {
        const sugestoes = [];
        
        // Muitas classes √∫nicas
        const classesUnicas = Object.values(this.relatorio.classes)
            .filter(count => count === 1).length;
        
        if (classesUnicas > 10) {
            sugestoes.push('Considere consolidar classes com uso √∫nico');
        }
        
        // Estrutura muito profunda
        if (this.relatorio.estrutura.profundidadeMaxima > 10) {
            sugestoes.push('Estrutura DOM muito profunda - considere simplificar');
        }
        
        // Muitos elementos
        const totalElementos = Object.values(this.relatorio.elementos)
            .reduce((a, b) => a + b, 0);
        
        if (totalElementos > 1000) {
            sugestoes.push('DOM muito complexo - considere lazy loading ou virtualiza√ß√£o');
        }
        
        console.log('\nüí° Sugest√µes de otimiza√ß√£o:');
        sugestoes.forEach((sugestao, index) => {
            console.log(`  ${index + 1}. ${sugestao}`);
        });
        
        return sugestoes;
    }
}

// Testando analisador de DOM
console.log('\nüî¨ Testando analisador de DOM:');
const analisador = new AnalisadorDOM();

// Simular an√°lise
if (typeof document !== 'undefined') {
    const relatorio = analisador.analisar();
    analisador.gerarRelatorio();
    analisador.sugerirOtimizacoes();
} else {
    console.log('üìù Simula√ß√£o de an√°lise de DOM conclu√≠da');
}

// ==========================================
// üéØ 4. DICAS DE OTIMIZA√á√ÉO
// ==========================================

console.log('\n=== DICAS DE OTIMIZA√á√ÉO ===');

/*
DICAS DE OTIMIZA√á√ÉO PARA SELE√á√ÉO DE ELEMENTOS:

1. **Performance de Sele√ß√£o**
   - getElementById() √© mais r√°pido que querySelector('#id')
   - getElementsByClassName() √© mais r√°pido que querySelectorAll('.class')
   - Cache elementos frequentemente acessados
   - Use contexto para limitar escopo de busca

2. **Estrat√©gias de Cache**
   - Armazene refer√™ncias de elementos est√°ticos
   - Use WeakMap para cache que n√£o vaza mem√≥ria
   - Invalide cache quando DOM muda
   - Cache seletores complexos

3. **Seletores Eficientes**
   - Evite seletores muito gen√©ricos (*)
   - Use IDs e classes espec√≠ficas
   - Prefira seletores de atributo a pseudo-seletores
   - Combine seletores quando poss√≠vel

4. **Gerenciamento de Mem√≥ria**
   - Remova event listeners de elementos removidos
   - Use WeakMap/WeakSet para refer√™ncias fracas
   - Evite vazamentos com closures
   - Limpe caches periodicamente

5. **Debugging e Monitoramento**
   - Use console.time() para medir performance
   - Monitore quantidade de consultas DOM
   - Valide exist√™ncia de elementos
   - Log seletores que falham
*/

// Exemplo de cache otimizado
console.log('\n‚ö° Exemplo de cache otimizado:');

class CacheDOM {
    constructor() {
        this.cache = new Map();
        this.observer = null;
        this.setupMutationObserver();
    }
    
    // Configurar observador de muta√ß√µes
    setupMutationObserver() {
        if (typeof MutationObserver !== 'undefined') {
            this.observer = new MutationObserver((mutations) => {
                let shouldClear = false;
                
                for (const mutation of mutations) {
                    if (mutation.type === 'childList' || mutation.type === 'attributes') {
                        shouldClear = true;
                        break;
                    }
                }
                
                if (shouldClear) {
                    this.invalidateCache();
                }
            });
            
            if (typeof document !== 'undefined') {
                this.observer.observe(document.body, {
                    childList: true,
                    subtree: true,
                    attributes: true,
                    attributeFilter: ['class', 'id']
                });
            }
        }
    }
    
    // Obter elemento com cache
    get(seletor, contexto = document) {
        const chave = `${seletor}_${contexto === document ? 'doc' : 'ctx'}`;
        
        if (this.cache.has(chave)) {
            return this.cache.get(chave);
        }
        
        const elemento = contexto.querySelector(seletor);
        this.cache.set(chave, elemento);
        
        return elemento;
    }
    
    // Invalidar cache
    invalidateCache() {
        this.cache.clear();
        console.log('üîÑ Cache DOM invalidado devido a mudan√ßas');
    }
    
    // Destruir cache
    destroy() {
        if (this.observer) {
            this.observer.disconnect();
        }
        this.cache.clear();
    }
}

// Testando cache otimizado
const cacheDOM = new CacheDOM();
console.log('Cache DOM criado com observador de muta√ß√µes');

// Exemplo de medi√ß√£o de performance
console.log('\nüìä Medi√ß√£o de performance:');

function medirPerformanceSelecao() {
    const iteracoes = 1000;
    
    // Teste getElementById
    console.time('getElementById');
    for (let i = 0; i < iteracoes; i++) {
        document.getElementById('cabecalho');
    }
    console.timeEnd('getElementById');
    
    // Teste querySelector
    console.time('querySelector');
    for (let i = 0; i < iteracoes; i++) {
        document.querySelector('#cabecalho');
    }
    console.timeEnd('querySelector');
    
    // Teste com cache
    const elementoCache = document.getElementById('cabecalho');
    console.time('cache');
    for (let i = 0; i < iteracoes; i++) {
        // Simula acesso ao cache
        const elemento = elementoCache;
    }
    console.timeEnd('cache');
}

if (typeof document !== 'undefined' && typeof performance !== 'undefined') {
    medirPerformanceSelecao();
} else {
    console.log('üìù Simula√ß√£o de medi√ß√£o de performance conclu√≠da');
}

// ==========================================
// üìö 5. REFER√äNCIAS E PR√ìXIMOS PASSOS
// ==========================================

console.log('\n=== REFER√äNCIAS E PR√ìXIMOS PASSOS ===');

/*
REFER√äNCIAS PARA APROFUNDAMENTO:

üìñ DOCUMENTA√á√ÉO OFICIAL:
- MDN DOM: https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model
- MDN Selectors API: https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model/Locating_DOM_elements_using_selectors
- CSS Selectors: https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Selectors

üìö LIVROS RECOMENDADOS:
- "DOM Enlightenment" - Cody Lindley
- "JavaScript: The Definitive Guide" - David Flanagan
- "High Performance JavaScript" - Nicholas Zakas

üéØ PR√ìXIMOS T√ìPICOS DE ESTUDO:
1. Manipula√ß√£o de conte√∫do DOM
2. Manipula√ß√£o de estilos e classes
3. Cria√ß√£o e remo√ß√£o de elementos
4. Event handling e delegation
5. Performance e otimiza√ß√£o DOM
6. Virtual DOM e frameworks
7. Web Components
8. Shadow DOM

üí° EXERC√çCIOS SUGERIDOS:
1. Crie um sistema de busca em tempo real
2. Implemente um seletor visual de elementos
3. Desenvolva um analisador de performance DOM
4. Crie um sistema de cache inteligente
5. Implemente um debugger de seletores CSS

üîß FERRAMENTAS √öTEIS:
- DevTools do navegador
- Lighthouse para performance
- axe-core para acessibilidade
- CSS Selector Tester
- DOM Inspector extensions

‚ö†Ô∏è ARMADILHAS COMUNS:
1. N√£o verificar se elemento existe antes de usar
2. Fazer muitas consultas DOM desnecess√°rias
3. N√£o usar cache para elementos est√°ticos
4. Seletores muito complexos e lentos
5. N√£o considerar mudan√ßas din√¢micas no DOM
6. Vazamentos de mem√≥ria com refer√™ncias
7. N√£o validar seletores CSS
8. Usar m√©todos deprecated

üéì CONCEITOS AVAN√áADOS:
- Shadow DOM
- Custom Elements
- Mutation Observers
- Intersection Observer
- Virtual DOM
- DOM diffing algorithms
- Tree shaking para DOM
- Lazy loading de elementos
*/

console.log('\n‚úÖ M√≥dulo de Sele√ß√£o de Elementos conclu√≠do!');
console.log('üìù Pr√≥ximo arquivo: 02-manipulacao-conteudo.js');
console.log('üéØ Continue praticando com os exerc√≠cios propostos!');

// Limpeza
if (typeof cacheDOM !== 'undefined') {
    cacheDOM.destroy();
}

/*
==============================================
RESUMO DO M√ìDULO - SELE√á√ÉO DE ELEMENTOS
==============================================

‚úÖ CONCEITOS APRENDIDOS:
- M√©todos de sele√ß√£o DOM
- Diferen√ßas entre HTMLCollection e NodeList
- Seletores CSS avan√ßados
- Cache e otimiza√ß√£o
- Debugging de sele√ß√µes
- An√°lise de estrutura DOM

üéØ HABILIDADES DESENVOLVIDAS:
- Selecionar elementos eficientemente
- Usar seletores CSS complexos
- Implementar cache inteligente
- Analisar performance de sele√ß√µes
- Detectar problemas no DOM
- Criar utilit√°rios de sele√ß√£o

üìà PR√ìXIMOS DESAFIOS:
- Manipula√ß√£o de conte√∫do
- Estilos e classes
- Cria√ß√£o de elementos
- Event handling
- Performance optimization

==============================================
*/