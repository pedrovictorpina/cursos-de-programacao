/*
===========================================
    M√ìDULO 09 - ES6+ (ECMASCRIPT 2015+)
    Aula 01: let, const e Template Literals
===========================================

Objetivos de Aprendizagem:
‚úì Dominar let e const vs var
‚úì Entender escopo de bloco
‚úì Usar template literals efetivamente
‚úì Implementar tagged templates
‚úì Aplicar boas pr√°ticas modernas
‚úì Evitar armadilhas comuns
*/

// ===========================================
// 1. TEORIA: LET, CONST E VAR
// ===========================================

/*
DIFEREN√áAS ENTRE VAR, LET E CONST:

1. ESCOPO:
   - var: Function scope ou global scope
   - let: Block scope
   - const: Block scope

2. HOISTING:
   - var: Hoisted e inicializada com undefined
   - let: Hoisted mas n√£o inicializada (TDZ)
   - const: Hoisted mas n√£o inicializada (TDZ)

3. REDECLARA√á√ÉO:
   - var: Permite redeclara√ß√£o
   - let: N√£o permite redeclara√ß√£o no mesmo escopo
   - const: N√£o permite redeclara√ß√£o no mesmo escopo

4. REATRIBUI√á√ÉO:
   - var: Permite reatribui√ß√£o
   - let: Permite reatribui√ß√£o
   - const: N√£o permite reatribui√ß√£o (mas objetos s√£o mut√°veis)

5. TEMPORAL DEAD ZONE (TDZ):
   - Per√≠odo entre o hoisting e a declara√ß√£o
   - Aplica-se a let e const
   - Gera ReferenceError se acessado
*/

// ===========================================
// 2. EXEMPLOS PR√ÅTICOS
// ===========================================

// --- 2.1 Diferen√ßas de Escopo ---
console.log('=== DIFEREN√áAS DE ESCOPO ===');

// Demonstra√ß√£o de escopo com var vs let
function exemploEscopo() {
    console.log('\n--- Escopo: var vs let ---');
    
    // === VAR - FUNCTION SCOPE ===
    function exemploVar() {
        console.log('\nüîç Exemplo com VAR:');
        
        if (true) {
            var varVariable = 'Eu sou var';
            console.log('Dentro do if (var):', varVariable);
        }
        
        // var √© acess√≠vel fora do bloco if
        console.log('Fora do if (var):', varVariable);
        
        // Hoisting com var
        console.log('Antes da declara√ß√£o (var):', typeof varHoisted); // undefined
        var varHoisted = 'Hoisted var';
        console.log('Depois da declara√ß√£o (var):', varHoisted);
    }
    
    // === LET - BLOCK SCOPE ===
    function exemploLet() {
        console.log('\nüîç Exemplo com LET:');
        
        if (true) {
            let letVariable = 'Eu sou let';
            console.log('Dentro do if (let):', letVariable);
        }
        
        // let n√£o √© acess√≠vel fora do bloco if
        try {
            console.log('Fora do if (let):', letVariable);
        } catch (error) {
            console.log('‚ùå Erro esperado:', error.message);
        }
        
        // Temporal Dead Zone com let
        try {
            console.log('Antes da declara√ß√£o (let):', letHoisted);
        } catch (error) {
            console.log('‚ùå TDZ Error:', error.message);
        }
        
        let letHoisted = 'Hoisted let';
        console.log('Depois da declara√ß√£o (let):', letHoisted);
    }
    
    exemploVar();
    exemploLet();
}

exemploEscopo();

// --- 2.2 Const e Imutabilidade ---
console.log('\n=== CONST E IMUTABILIDADE ===');

function exemploConst() {
    console.log('\n--- Const: Imutabilidade ---');
    
    // === CONST COM PRIMITIVOS ===
    console.log('\nüîç Const com primitivos:');
    
    const numero = 42;
    const texto = 'Hello World';
    const booleano = true;
    
    console.log('Valores const:', { numero, texto, booleano });
    
    // Tentativa de reatribui√ß√£o (erro)
    try {
        // numero = 43; // Descomente para ver o erro
        console.log('‚úÖ Const primitivos s√£o imut√°veis');
    } catch (error) {
        console.log('‚ùå Erro de reatribui√ß√£o:', error.message);
    }
    
    // === CONST COM OBJETOS ===
    console.log('\nüîç Const com objetos:');
    
    const pessoa = {
        nome: 'Jo√£o',
        idade: 30,
        hobbies: ['leitura', 'programa√ß√£o']
    };
    
    console.log('Objeto original:', pessoa);
    
    // Muta√ß√£o √© permitida
    pessoa.nome = 'Maria';
    pessoa.idade = 25;
    pessoa.hobbies.push('m√∫sica');
    pessoa.profissao = 'Desenvolvedora';
    
    console.log('Objeto mutado:', pessoa);
    
    // Reatribui√ß√£o n√£o √© permitida
    try {
        // pessoa = {}; // Descomente para ver o erro
        console.log('‚úÖ Muta√ß√£o permitida, reatribui√ß√£o n√£o');
    } catch (error) {
        console.log('‚ùå Erro de reatribui√ß√£o:', error.message);
    }
    
    // === CONST COM ARRAYS ===
    console.log('\nüîç Const com arrays:');
    
    const numeros = [1, 2, 3];
    console.log('Array original:', numeros);
    
    // Muta√ß√µes permitidas
    numeros.push(4);
    numeros[0] = 10;
    numeros.pop();
    
    console.log('Array mutado:', numeros);
    
    // === IMUTABILIDADE REAL ===
    console.log('\nüîç Imutabilidade real:');
    
    const objetoImutavel = Object.freeze({
        nome: 'Constante',
        valor: 100
    });
    
    // Tentativa de muta√ß√£o (silenciosamente ignorada em modo n√£o-strict)
    objetoImutavel.nome = 'Novo Nome';
    objetoImutavel.novaPropriedade = 'Nova';
    
    console.log('Objeto frozen:', objetoImutavel);
    
    // Imutabilidade profunda
    const deepFreeze = (obj) => {
        Object.getOwnPropertyNames(obj).forEach(prop => {
            if (obj[prop] !== null && typeof obj[prop] === 'object') {
                deepFreeze(obj[prop]);
            }
        });
        return Object.freeze(obj);
    };
    
    const objetoProfundo = deepFreeze({
        nivel1: {
            nivel2: {
                valor: 'profundo'
            }
        }
    });
    
    console.log('Objeto deep frozen:', objetoProfundo);
}

exemploConst();

// --- 2.3 Loops e Closures ---
console.log('\n=== LOOPS E CLOSURES ===');

function exemploLoopsClosures() {
    console.log('\n--- Loops: var vs let ---');
    
    // === PROBLEMA CL√ÅSSICO COM VAR ===
    console.log('\nüîç Problema com var em loops:');
    
    const funcoesVar = [];
    
    for (var i = 0; i < 3; i++) {
        funcoesVar.push(function() {
            return `Fun√ß√£o ${i}`; // i ser√° sempre 3
        });
    }
    
    console.log('Resultado com var:');
    funcoesVar.forEach((fn, index) => {
        console.log(`  Fun√ß√£o ${index}:`, fn());
    });
    
    // === SOLU√á√ÉO COM LET ===
    console.log('\nüîç Solu√ß√£o com let:');
    
    const funcoesLet = [];
    
    for (let j = 0; j < 3; j++) {
        funcoesLet.push(function() {
            return `Fun√ß√£o ${j}`; // j mant√©m o valor correto
        });
    }
    
    console.log('Resultado com let:');
    funcoesLet.forEach((fn, index) => {
        console.log(`  Fun√ß√£o ${index}:`, fn());
    });
    
    // === SOLU√á√ÉO ALTERNATIVA COM VAR (IIFE) ===
    console.log('\nüîç Solu√ß√£o alternativa com var (IIFE):');
    
    const funcoesIIFE = [];
    
    for (var k = 0; k < 3; k++) {
        funcoesIIFE.push((function(index) {
            return function() {
                return `Fun√ß√£o ${index}`;
            };
        })(k));
    }
    
    console.log('Resultado com IIFE:');
    funcoesIIFE.forEach((fn, index) => {
        console.log(`  Fun√ß√£o ${index}:`, fn());
    });
}

exemploLoopsClosures();

// ===========================================
// 3. TEMPLATE LITERALS
// ===========================================

console.log('\n=== TEMPLATE LITERALS ===');

// --- 3.1 Sintaxe B√°sica ---
function exemploTemplateBasico() {
    console.log('\n--- Template Literals B√°sicos ---');
    
    const nome = 'Ana';
    const idade = 28;
    const profissao = 'Desenvolvedora';
    
    // === CONCATENA√á√ÉO TRADICIONAL ===
    const mensagemTradicional = 'Ol√°, eu sou ' + nome + ', tenho ' + idade + ' anos e sou ' + profissao + '.';
    console.log('Concatena√ß√£o tradicional:', mensagemTradicional);
    
    // === TEMPLATE LITERAL ===
    const mensagemTemplate = `Ol√°, eu sou ${nome}, tenho ${idade} anos e sou ${profissao}.`;
    console.log('Template literal:', mensagemTemplate);
    
    // === EXPRESS√ïES COMPLEXAS ===
    const produto = {
        nome: 'Notebook',
        preco: 2500,
        desconto: 0.1
    };
    
    const mensagemProduto = `
        Produto: ${produto.nome}
        Pre√ßo original: R$ ${produto.preco.toFixed(2)}
        Desconto: ${(produto.desconto * 100)}%
        Pre√ßo final: R$ ${(produto.preco * (1 - produto.desconto)).toFixed(2)}
        Economia: R$ ${(produto.preco * produto.desconto).toFixed(2)}
    `;
    
    console.log('Mensagem do produto:', mensagemProduto);
    
    // === MULTILINHAS ===
    const poema = `
        Roses are red,
        Violets are blue,
        Template literals
        Are awesome too!
    `;
    
    console.log('Poema multilinhas:', poema);
    
    // === ESCAPE DE CARACTERES ===
    const mensagemEscape = `
        Aspas simples: 'texto'
        Aspas duplas: "texto"
        Backtick: \`template\`
        Cifr√£o: \${variavel}
        Quebra de linha: \n
        Nova linha
    `;
    
    console.log('Escape de caracteres:', mensagemEscape);
}

exemploTemplateBasico();

// --- 3.2 Fun√ß√µes em Templates ---
function exemploTemplateFuncoes() {
    console.log('\n--- Fun√ß√µes em Templates ---');
    
    // === CHAMADAS DE FUN√á√ÉO ===
    function formatarMoeda(valor) {
        return new Intl.NumberFormat('pt-BR', {
            style: 'currency',
            currency: 'BRL'
        }).format(valor);
    }
    
    function formatarData(data) {
        return new Intl.DateTimeFormat('pt-BR', {
            year: 'numeric',
            month: 'long',
            day: 'numeric'
        }).format(data);
    }
    
    const pedido = {
        id: 12345,
        cliente: 'Carlos Silva',
        valor: 1250.75,
        data: new Date(),
        itens: ['Produto A', 'Produto B', 'Produto C']
    };
    
    const relatorioPedido = `
        üìã RELAT√ìRIO DO PEDIDO
        =====================
        
        ID: #${pedido.id}
        Cliente: ${pedido.cliente.toUpperCase()}
        Data: ${formatarData(pedido.data)}
        Valor: ${formatarMoeda(pedido.valor)}
        
        Itens (${pedido.itens.length}):
        ${pedido.itens.map((item, index) => `${index + 1}. ${item}`).join('\n        ')}
        
        Status: ${pedido.valor > 1000 ? 'üü¢ PEDIDO PREMIUM' : 'üîµ PEDIDO PADR√ÉO'}
    `;
    
    console.log(relatorioPedido);
    
    // === OPERA√á√ïES MATEM√ÅTICAS ===
    const a = 10;
    const b = 5;
    
    const calculadora = `
        üßÆ CALCULADORA
        ==============
        
        a = ${a}, b = ${b}
        
        Soma: ${a} + ${b} = ${a + b}
        Subtra√ß√£o: ${a} - ${b} = ${a - b}
        Multiplica√ß√£o: ${a} √ó ${b} = ${a * b}
        Divis√£o: ${a} √∑ ${b} = ${(a / b).toFixed(2)}
        Pot√™ncia: ${a}^${b} = ${Math.pow(a, b)}
        M√≥dulo: ${a} % ${b} = ${a % b}
    `;
    
    console.log(calculadora);
    
    // === CONDICIONAIS COMPLEXAS ===
    const usuario = {
        nome: 'Maria',
        idade: 17,
        premium: true,
        pontos: 1250
    };
    
    const perfilUsuario = `
        üë§ PERFIL DO USU√ÅRIO
        ===================
        
        Nome: ${usuario.nome}
        Idade: ${usuario.idade} anos
        Status: ${usuario.idade >= 18 ? 'üîû Adulto' : 'üë∂ Menor de idade'}
        Plano: ${usuario.premium ? '‚≠ê Premium' : 'üÜì Gratuito'}
        Pontos: ${usuario.pontos.toLocaleString('pt-BR')}
        N√≠vel: ${usuario.pontos >= 1000 ? 'üèÜ Ouro' : usuario.pontos >= 500 ? 'ü•à Prata' : 'ü•â Bronze'}
        
        ${usuario.premium && usuario.pontos >= 1000 
            ? 'üéâ Parab√©ns! Voc√™ √© um usu√°rio VIP!' 
            : 'Continue acumulando pontos para desbloquear benef√≠cios!'}
    `;
    
    console.log(perfilUsuario);
}

exemploTemplateFuncoes();

// --- 3.3 Tagged Templates ---
console.log('\n=== TAGGED TEMPLATES ===');

function exemploTaggedTemplates() {
    console.log('\n--- Tagged Templates ---');
    
    // === TAG FUNCTION B√ÅSICA ===
    function highlight(strings, ...values) {
        console.log('\nüîç An√°lise do tagged template:');
        console.log('Strings:', strings);
        console.log('Values:', values);
        
        return strings.reduce((result, string, i) => {
            const value = values[i] ? `<mark>${values[i]}</mark>` : '';
            return result + string + value;
        }, '');
    }
    
    const nome = 'JavaScript';
    const versao = 'ES6+';
    
    const resultado = highlight`Aprendendo ${nome} vers√£o ${versao}!`;
    console.log('\nResultado highlighted:', resultado);
    
    // === TAG FUNCTION PARA FORMATA√á√ÉO ===
    function format(strings, ...values) {
        return strings.reduce((result, string, i) => {
            let value = values[i];
            
            if (value !== undefined) {
                // Formata√ß√£o baseada no tipo
                if (typeof value === 'number') {
                    value = value.toLocaleString('pt-BR');
                } else if (value instanceof Date) {
                    value = value.toLocaleDateString('pt-BR');
                } else if (typeof value === 'string') {
                    value = value.trim();
                }
            } else {
                value = '';
            }
            
            return result + string + value;
        }, '');
    }
    
    const preco = 1234.56;
    const data = new Date();
    const produto = '  Smartphone  ';
    
    const mensagemFormatada = format`
        Produto: ${produto}
        Pre√ßo: R$ ${preco}
        Data: ${data}
    `;
    
    console.log('\nMensagem formatada:', mensagemFormatada);
    
    // === TAG FUNCTION PARA SANITIZA√á√ÉO ===
    function sanitize(strings, ...values) {
        const escapeHTML = (str) => {
            return String(str)
                .replace(/&/g, '&amp;')
                .replace(/</g, '&lt;')
                .replace(/>/g, '&gt;')
                .replace(/"/g, '&quot;')
                .replace(/'/g, '&#39;');
        };
        
        return strings.reduce((result, string, i) => {
            const value = values[i] ? escapeHTML(values[i]) : '';
            return result + string + value;
        }, '');
    }
    
    const userInput = '<script>alert("XSS")</script>';
    const comentario = 'Texto com "aspas" e <tags>';
    
    const htmlSeguro = sanitize`
        <div>
            <p>Input do usu√°rio: ${userInput}</p>
            <p>Coment√°rio: ${comentario}</p>
        </div>
    `;
    
    console.log('\nHTML sanitizado:', htmlSeguro);
    
    // === TAG FUNCTION PARA QUERIES ===
    function sql(strings, ...values) {
        console.log('\nüîç SQL Query Builder:');
        
        // Simular escape de SQL
        const escapeSQL = (value) => {
            if (typeof value === 'string') {
                return `'${value.replace(/'/g, "''")}'`;
            }
            return value;
        };
        
        const query = strings.reduce((result, string, i) => {
            const value = values[i] ? escapeSQL(values[i]) : '';
            return result + string + value;
        }, '');
        
        console.log('Query gerada:', query);
        return query;
    }
    
    const tabela = 'usuarios';
    const nome_usuario = "Jo√£o'Silva";
    const idade_min = 18;
    
    const query = sql`
        SELECT * FROM ${tabela} 
        WHERE nome = ${nome_usuario} 
        AND idade >= ${idade_min}
    `;
    
    // === TAG FUNCTION PARA INTERNACIONALIZA√á√ÉO ===
    const translations = {
        'pt-BR': {
            'hello': 'Ol√°',
            'welcome': 'Bem-vindo',
            'goodbye': 'Tchau'
        },
        'en-US': {
            'hello': 'Hello',
            'welcome': 'Welcome',
            'goodbye': 'Goodbye'
        }
    };
    
    function i18n(locale) {
        return function(strings, ...values) {
            const dict = translations[locale] || translations['pt-BR'];
            
            return strings.reduce((result, string, i) => {
                let value = values[i];
                
                if (value && dict[value]) {
                    value = dict[value];
                }
                
                return result + string + (value || '');
            }, '');
        };
    }
    
    const t_pt = i18n('pt-BR');
    const t_en = i18n('en-US');
    
    const usuario_nome = 'Maria';
    
    const mensagem_pt = t_pt`${'hello'}, ${usuario_nome}! ${'welcome'} ao sistema.`;
    const mensagem_en = t_en`${'hello'}, ${usuario_nome}! ${'welcome'} to the system.`;
    
    console.log('\nMensagem PT-BR:', mensagem_pt);
    console.log('Mensagem EN-US:', mensagem_en);
}

exemploTaggedTemplates();

// ===========================================
// 4. EXERC√çCIOS PR√ÅTICOS
// ===========================================

// --- EXERC√çCIO 1: Sistema de Configura√ß√£o ---
console.log('\n=== EXERC√çCIO: SISTEMA DE CONFIGURA√á√ÉO ===');

class ConfigurationManager {
    constructor() {
        // Usar const para configura√ß√µes que n√£o devem ser reatribu√≠das
        this.config = Object.freeze({
            app: {
                name: 'MeuApp',
                version: '1.0.0',
                environment: 'development'
            },
            database: {
                host: 'localhost',
                port: 5432,
                name: 'myapp_db'
            },
            features: {
                enableLogging: true,
                enableCache: true,
                maxRetries: 3
            }
        });
        
        // Usar let para valores que podem mudar
        this.runtimeConfig = {
            startTime: new Date(),
            requestCount: 0,
            lastActivity: null
        };
    }
    
    // Template para informa√ß√µes do sistema
    getSystemInfo() {
        const { app, database, features } = this.config;
        const uptime = Date.now() - this.runtimeConfig.startTime.getTime();
        const uptimeFormatted = this.formatUptime(uptime);
        
        return `
            üñ•Ô∏è  INFORMA√á√ïES DO SISTEMA
            ===========================
            
            üì± Aplica√ß√£o:
               Nome: ${app.name}
               Vers√£o: ${app.version}
               Ambiente: ${app.environment.toUpperCase()}
            
            üóÑÔ∏è  Banco de Dados:
               Host: ${database.host}
               Porta: ${database.port}
               Database: ${database.name}
               URL: postgresql://${database.host}:${database.port}/${database.name}
            
            ‚öôÔ∏è  Features:
               Logging: ${features.enableLogging ? '‚úÖ Ativo' : '‚ùå Inativo'}
               Cache: ${features.enableCache ? '‚úÖ Ativo' : '‚ùå Inativo'}
               Max Retries: ${features.maxRetries}
            
            üìä Runtime:
               Uptime: ${uptimeFormatted}
               Requests: ${this.runtimeConfig.requestCount.toLocaleString('pt-BR')}
               √öltima atividade: ${this.runtimeConfig.lastActivity || 'Nenhuma'}
        `;
    }
    
    // Template para logs formatados
    createLogEntry(level, message, data = null) {
        const timestamp = new Date().toISOString();
        const levelIcon = {
            'info': '‚ÑπÔ∏è',
            'warn': '‚ö†Ô∏è',
            'error': '‚ùå',
            'debug': 'üêõ',
            'success': '‚úÖ'
        }[level] || 'üìù';
        
        // Usar template literal para formata√ß√£o complexa
        const logEntry = `
            ${levelIcon} [${timestamp}] ${level.toUpperCase()}
            ${'-'.repeat(50)}
            Message: ${message}
            ${data ? `Data: ${JSON.stringify(data, null, 2)}` : ''}
            Environment: ${this.config.app.environment}
            Request #: ${++this.runtimeConfig.requestCount}
        `;
        
        this.runtimeConfig.lastActivity = timestamp;
        return logEntry;
    }
    
    // Template para relat√≥rios
    generateReport(type, filters = {}) {
        const reportId = `RPT-${Date.now()}`;
        const generatedAt = new Date().toLocaleString('pt-BR');
        
        // Usar destructuring com const
        const {
            startDate = 'N/A',
            endDate = 'N/A',
            category = 'Geral',
            includeDetails = true
        } = filters;
        
        return `
            üìä RELAT√ìRIO ${type.toUpperCase()}
            ${'='.repeat(40)}
            
            üÜî ID: ${reportId}
            üìÖ Gerado em: ${generatedAt}
            üè∑Ô∏è  Categoria: ${category}
            
            üìà Filtros Aplicados:
            ${startDate !== 'N/A' ? `   üìÖ Data in√≠cio: ${startDate}` : ''}
            ${endDate !== 'N/A' ? `   üìÖ Data fim: ${endDate}` : ''}
            ${includeDetails ? '   üìã Detalhes inclu√≠dos' : '   üìã Resumo apenas'}
            
            ‚öôÔ∏è  Configura√ß√£o Atual:
               App: ${this.config.app.name} v${this.config.app.version}
               Ambiente: ${this.config.app.environment}
               Features ativas: ${Object.entries(this.config.features)
                   .filter(([key, value]) => value === true)
                   .map(([key]) => key)
                   .join(', ')}
            
            üìä Estat√≠sticas:
               Total de requests: ${this.runtimeConfig.requestCount}
               Uptime: ${this.formatUptime(Date.now() - this.runtimeConfig.startTime.getTime())}
        `;
    }
    
    // Utilit√°rio para formatar uptime
    formatUptime(milliseconds) {
        const seconds = Math.floor(milliseconds / 1000);
        const minutes = Math.floor(seconds / 60);
        const hours = Math.floor(minutes / 60);
        const days = Math.floor(hours / 24);
        
        if (days > 0) {
            return `${days}d ${hours % 24}h ${minutes % 60}m ${seconds % 60}s`;
        } else if (hours > 0) {
            return `${hours}h ${minutes % 60}m ${seconds % 60}s`;
        } else if (minutes > 0) {
            return `${minutes}m ${seconds % 60}s`;
        } else {
            return `${seconds}s`;
        }
    }
    
    // Demonstrar uso de let em loops
    processConfigUpdates(updates) {
        const results = [];
        
        // Usar let no loop para escopo correto
        for (let i = 0; i < updates.length; i++) {
            const update = updates[i];
            
            // Simular processamento ass√≠ncrono
            const processUpdate = () => {
                return `Update ${i + 1}: ${update.key} = ${update.value}`;
            };
            
            results.push(processUpdate);
        }
        
        return results.map(fn => fn());
    }
}

// Exemplo de uso do sistema de configura√ß√£o
function exemploSistemaConfiguracao() {
    console.log('\n--- Sistema de Configura√ß√£o ---');
    
    const configManager = new ConfigurationManager();
    
    // Mostrar informa√ß√µes do sistema
    console.log(configManager.getSystemInfo());
    
    // Criar alguns logs
    console.log(configManager.createLogEntry('info', 'Sistema iniciado com sucesso'));
    console.log(configManager.createLogEntry('warn', 'Cache quase cheio', { usage: '85%' }));
    console.log(configManager.createLogEntry('error', 'Falha na conex√£o com banco', { 
        error: 'Connection timeout',
        retries: 3
    }));
    
    // Gerar relat√≥rio
    console.log(configManager.generateReport('performance', {
        startDate: '2024-01-01',
        endDate: '2024-01-31',
        category: 'Performance',
        includeDetails: true
    }));
    
    // Demonstrar processamento de updates
    const updates = [
        { key: 'maxRetries', value: 5 },
        { key: 'enableCache', value: false },
        { key: 'logLevel', value: 'debug' }
    ];
    
    const updateResults = configManager.processConfigUpdates(updates);
    console.log('\nüìù Resultados dos updates:');
    updateResults.forEach(result => console.log(`  ${result}`));
}

setTimeout(exemploSistemaConfiguracao, 1000);

// ===========================================
// 5. DICAS DE OTIMIZA√á√ÉO E BOAS PR√ÅTICAS
// ===========================================

console.log('\n=== DICAS DE OTIMIZA√á√ÉO ===');

const dicasES6Basico = {
    boasPraticas: {
        // Preferir const sempre que poss√≠vel
        declaracoes: `
            // ‚úÖ Bom - Usar const por padr√£o
            const API_URL = 'https://api.exemplo.com';
            const config = { timeout: 5000 };
            
            // ‚úÖ Bom - Usar let quando precisar reatribuir
            let contador = 0;
            let resultado;
            
            // ‚ùå Evitar - var em c√≥digo moderno
            var legacyVariable = 'evitar';
        `,
        
        // Template literals para strings complexas
        templates: `
            // ‚úÖ Bom - Template literals para interpola√ß√£o
            const mensagem = \`Ol√° \${nome}, voc√™ tem \${count} mensagens\`;
            
            // ‚úÖ Bom - Multilinhas
            const html = \`
                <div class="card">
                    <h2>\${titulo}</h2>
                    <p>\${conteudo}</p>
                </div>
            \`;
            
            // ‚ùå Evitar - Concatena√ß√£o complexa
            const mensagemRuim = 'Ol√° ' + nome + ', voc√™ tem ' + count + ' mensagens';
        `,
        
        // Escopo de bloco
        escopo: `
            // ‚úÖ Bom - Usar escopo de bloco
            if (condicao) {
                const resultado = calcular();
                console.log(resultado);
            }
            // resultado n√£o est√° acess√≠vel aqui
            
            // ‚úÖ Bom - Let em loops
            for (let i = 0; i < array.length; i++) {
                setTimeout(() => console.log(i), 100); // i correto
            }
        `
    },
    
    performance: {
        // Template literals s√£o otimizados
        otimizacao: `
            // ‚úÖ Bom - Templates s√£o otimizados pelo engine
            const template = \`\${a} + \${b} = \${a + b}\`;
            
            // ‚úÖ Bom - Reutilizar templates
            const createMessage = (name, count) => \`\${name}: \${count}\`;
        `,
        
        // Evitar cria√ß√£o desnecess√°ria
        memoria: `
            // ‚úÖ Bom - Const para valores que n√£o mudam
            const CONSTANTS = Object.freeze({
                MAX_SIZE: 1000,
                API_VERSION: 'v1'
            });
            
            // ‚ùå Evitar - Recria√ß√£o desnecess√°ria
            function badFunction() {
                const config = { /* objeto grande */ }; // Recriado a cada chamada
            }
        `
    }
};

// ===========================================
// 6. REFER√äNCIAS E PR√ìXIMOS PASSOS
// ===========================================

console.log('\n=== REFER√äNCIAS E PR√ìXIMOS PASSOS ===');

const referenciasES6Basico = {
    documentacao: [
        'MDN - let: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let',
        'MDN - const: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/const',
        'MDN - Template literals: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals',
        'ES6 Features: https://github.com/lukehoban/es6features'
    ],
    
    proximosTopicos: [
        '02-destructuring-spread.js - Destructuring e Spread Operator',
        '03-modules-import-export.js - M√≥dulos ES6',
        '04-novas-features.js - Arrow functions, classes, etc.'
    ],
    
    exerciciosAdicionais: [
        'Criar sistema de templates para emails',
        'Implementar builder pattern com template literals',
        'Desenvolver sistema de logs estruturados',
        'Construir gerador de c√≥digo SQL'
    ]
};

console.log('Refer√™ncias:', referenciasES6Basico.documentacao);
console.log('Pr√≥ximos t√≥picos:', referenciasES6Basico.proximosTopicos);
console.log('Exerc√≠cios adicionais:', referenciasES6Basico.exerciciosAdicionais);

setTimeout(() => {
    console.log('\n' + '='.repeat(50));
    console.log('üéì AULA 01 - LET, CONST E TEMPLATE LITERALS CONCLU√çDA!');
    console.log('='.repeat(50));
    
    console.log('\nüìö CONCEITOS APRENDIDOS:');
    console.log('‚úì Diferen√ßas entre var, let e const');
    console.log('‚úì Escopo de bloco vs escopo de fun√ß√£o');
    console.log('‚úì Temporal Dead Zone (TDZ)');
    console.log('‚úì Template literals e interpola√ß√£o');
    console.log('‚úì Tagged templates');
    console.log('‚úì Boas pr√°ticas modernas');
    
    console.log('\nüõ†Ô∏è T√âCNICAS DOMINADAS:');
    console.log('‚úì Uso correto de const para imutabilidade');
    console.log('‚úì Let em loops para closures corretos');
    console.log('‚úì Templates para strings complexas');
    console.log('‚úì Tagged templates para processamento');
    console.log('‚úì Formata√ß√£o e sanitiza√ß√£o');
    
    console.log('\nüöÄ PR√ìXIMA AULA:');
    console.log('üîú 02-destructuring-spread.js');
    console.log('   - Destructuring de objetos e arrays');
    console.log('   - Spread e rest operators');
    console.log('   - Padr√µes avan√ßados');
    
    console.log('\n' + '='.repeat(50));
}, 5000);

/*
===========================================
    FIM DA AULA 01 - LET, CONST E TEMPLATE LITERALS
===========================================

PARAB√âNS! üéâ

Voc√™ dominou os fundamentos do JavaScript moderno!

Esta aula cobriu:
- Declara√ß√µes modernas (let, const)
- Escopo de bloco
- Template literals e tagged templates
- Boas pr√°ticas ES6+

Continue para a pr√≥xima aula para aprender sobre
destructuring e spread operators! üöÄ

===========================================
*/