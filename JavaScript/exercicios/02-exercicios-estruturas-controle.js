/*
===========================================
    EXERC√çCIOS - ESTRUTURAS DE CONTROLE
===========================================

Este arquivo cont√©m 3 exerc√≠cios pr√°ticos para fixar:
- Estruturas condicionais (if/else, switch/case)
- Loops (for, while, do-while)
- Controle de fluxo (break, continue)
- Operadores l√≥gicos e de compara√ß√£o
- Valida√ß√£o e tratamento de entrada

N√≠vel: Iniciante a Intermedi√°rio
Tempo estimado: 45-60 minutos
*/

console.log('=== EXERC√çCIOS - ESTRUTURAS DE CONTROLE ===');

/*
========================================
EXERC√çCIO 1: JOGO DE ADIVINHA√á√ÉO
========================================

Objetivo: Criar um jogo onde o computador escolhe um n√∫mero
aleat√≥rio e o jogador tenta adivinhar, demonstrando uso de
loops, condicionais e controle de fluxo.

Requisitos:
1. Gerar n√∫mero aleat√≥rio entre 1 e 100
2. Permitir m√∫ltiplas tentativas
3. Dar dicas (maior/menor)
4. Contar tentativas e calcular pontua√ß√£o
5. Implementar n√≠veis de dificuldade
6. Permitir jogar novamente
7. Manter hist√≥rico de jogos
*/

console.log('\n--- EXERC√çCIO 1: JOGO DE ADIVINHA√á√ÉO ---');

// SOLU√á√ÉO:
class JogoAdivinhacao {
    constructor() {
        this.historico = [];
        this.niveis = {
            facil: { min: 1, max: 50, tentativasMax: 10, pontosPorTentativa: 15 },
            medio: { min: 1, max: 100, tentativasMax: 8, pontosPorTentativa: 20 },
            dificil: { min: 1, max: 200, tentativasMax: 6, pontosPorTentativa: 30 }
        };
    }
    
    gerarNumeroAleatorio(min, max) {
        return Math.floor(Math.random() * (max - min + 1)) + min;
    }
    
    calcularPontuacao(tentativas, tentativasMax, pontosPorTentativa) {
        const eficiencia = (tentativasMax - tentativas + 1) / tentativasMax;
        const pontuacaoBase = pontosPorTentativa * tentativasMax;
        const bonus = Math.floor(eficiencia * 100); // B√¥nus de efici√™ncia
        return Math.max(pontuacaoBase * eficiencia + bonus, 10);
    }
    
    obterClassificacao(pontuacao) {
        if (pontuacao >= 200) return { titulo: 'üèÜ MESTRE', cor: '\x1b[33m' };
        if (pontuacao >= 150) return { titulo: 'ü•á EXPERT', cor: '\x1b[32m' };
        if (pontuacao >= 100) return { titulo: 'ü•à AVAN√áADO', cor: '\x1b[36m' };
        if (pontuacao >= 50) return { titulo: 'ü•â INTERMEDI√ÅRIO', cor: '\x1b[34m' };
        return { titulo: 'üìö INICIANTE', cor: '\x1b[35m' };
    }
    
    jogar(nivel = 'medio', tentativasSimuladas = null) {
        // Validar n√≠vel
        if (!this.niveis[nivel]) {
            throw new Error(`N√≠vel '${nivel}' n√£o existe. Use: facil, medio, dificil`);
        }
        
        const config = this.niveis[nivel];
        const numeroSecreto = this.gerarNumeroAleatorio(config.min, config.max);
        const tentativas = [];
        let tentativaAtual = 1;
        let acertou = false;
        
        console.log(`\nüéØ JOGO DE ADIVINHA√á√ÉO - N√≠vel: ${nivel.toUpperCase()}`);
        console.log(`üìä Intervalo: ${config.min} a ${config.max}`);
        console.log(`‚è±Ô∏è  Tentativas m√°ximas: ${config.tentativasMax}`);
        console.log(`üíé Pontos por tentativa: ${config.pontosPorTentativa}`);
        console.log('\n' + '='.repeat(50));
        
        // Se fornecidas tentativas simuladas, usar elas (para testes)
        const tentativasParaUsar = tentativasSimuladas || [
            Math.floor((config.min + config.max) / 2), // Primeira tentativa: meio
            numeroSecreto // Segunda tentativa: acerta
        ];
        
        while (tentativaAtual <= config.tentativasMax && !acertou) {
            let palpite;
            
            // Simular entrada do usu√°rio
            if (tentativasSimuladas) {
                palpite = tentativasParaUsar[tentativaAtual - 1];
                if (palpite === undefined) {
                    // Se n√£o h√° mais tentativas simuladas, gerar aleat√≥ria
                    palpite = this.gerarNumeroAleatorio(config.min, config.max);
                }
            } else {
                // Para demonstra√ß√£o, usar estrat√©gia inteligente
                if (tentativaAtual === 1) {
                    palpite = Math.floor((config.min + config.max) / 2);
                } else {
                    // Ajustar baseado na √∫ltima dica
                    const ultimaTentativa = tentativas[tentativas.length - 1];
                    if (ultimaTentativa.dica === 'maior') {
                        palpite = Math.floor((ultimaTentativa.palpite + config.max) / 2);
                    } else {
                        palpite = Math.floor((config.min + ultimaTentativa.palpite) / 2);
                    }
                }
            }
            
            // Validar palpite
            if (isNaN(palpite) || palpite < config.min || palpite > config.max) {
                console.log(`‚ùå Palpite inv√°lido! Digite um n√∫mero entre ${config.min} e ${config.max}`);
                continue;
            }
            
            console.log(`\nüé≤ Tentativa ${tentativaAtual}: ${palpite}`);
            
            // Verificar palpite
            let dica = '';
            if (palpite === numeroSecreto) {
                acertou = true;
                dica = 'acertou';
                console.log('üéâ PARAB√âNS! Voc√™ acertou!');
            } else if (palpite < numeroSecreto) {
                dica = 'maior';
                console.log('üìà O n√∫mero √© MAIOR que ' + palpite);
            } else {
                dica = 'menor';
                console.log('üìâ O n√∫mero √© MENOR que ' + palpite);
            }
            
            // Registrar tentativa
            tentativas.push({
                numero: tentativaAtual,
                palpite,
                dica,
                distancia: Math.abs(numeroSecreto - palpite)
            });
            
            tentativaAtual++;
        }
        
        // Resultado final
        const resultado = {
            sucesso: acertou,
            numeroSecreto,
            tentativasUsadas: tentativas.length,
            tentativasMax: config.tentativasMax,
            nivel,
            tentativas,
            timestamp: new Date()
        };
        
        if (acertou) {
            resultado.pontuacao = Math.floor(this.calcularPontuacao(
                tentativas.length, 
                config.tentativasMax, 
                config.pontosPorTentativa
            ));
            resultado.classificacao = this.obterClassificacao(resultado.pontuacao);
            
            console.log('\n' + '='.repeat(50));
            console.log('üèÜ VIT√ìRIA!');
            console.log(`üìä Tentativas: ${tentativas.length}/${config.tentativasMax}`);
            console.log(`üíØ Pontua√ß√£o: ${resultado.pontuacao}`);
            console.log(`üéñÔ∏è  Classifica√ß√£o: ${resultado.classificacao.titulo}`);
        } else {
            console.log('\n' + '='.repeat(50));
            console.log('üíî GAME OVER!');
            console.log(`üéØ O n√∫mero era: ${numeroSecreto}`);
            console.log(`üìä Tentativas esgotadas: ${config.tentativasMax}`);
            resultado.pontuacao = 0;
            resultado.classificacao = { titulo: '‚ùå FALHOU', cor: '\x1b[31m' };
        }
        
        // Adicionar ao hist√≥rico
        this.historico.push(resultado);
        
        return resultado;
    }
    
    exibirEstatisticas() {
        if (this.historico.length === 0) {
            console.log('\nüìä Nenhum jogo registrado ainda.');
            return;
        }
        
        const jogos = this.historico;
        const vitorias = jogos.filter(j => j.sucesso);
        const derrotas = jogos.filter(j => !j.sucesso);
        
        const taxaVitoria = (vitorias.length / jogos.length * 100).toFixed(1);
        const pontuacaoMedia = vitorias.length > 0 ? 
            (vitorias.reduce((sum, j) => sum + j.pontuacao, 0) / vitorias.length).toFixed(1) : 0;
        const melhorJogo = vitorias.reduce((melhor, atual) => 
            atual.pontuacao > melhor.pontuacao ? atual : melhor, vitorias[0]);
        
        console.log('\n' + '='.repeat(60));
        console.log('üìä ESTAT√çSTICAS GERAIS');
        console.log('='.repeat(60));
        console.log(`üéÆ Total de jogos: ${jogos.length}`);
        console.log(`üèÜ Vit√≥rias: ${vitorias.length}`);
        console.log(`üíî Derrotas: ${derrotas.length}`);
        console.log(`üìà Taxa de vit√≥ria: ${taxaVitoria}%`);
        console.log(`üíØ Pontua√ß√£o m√©dia: ${pontuacaoMedia}`);
        
        if (melhorJogo) {
            console.log(`\nü•á MELHOR JOGO:`);
            console.log(`   N√≠vel: ${melhorJogo.nivel}`);
            console.log(`   Tentativas: ${melhorJogo.tentativasUsadas}`);
            console.log(`   Pontua√ß√£o: ${melhorJogo.pontuacao}`);
            console.log(`   Classifica√ß√£o: ${melhorJogo.classificacao.titulo}`);
        }
        
        // Estat√≠sticas por n√≠vel
        console.log('\nüìä POR N√çVEL:');
        Object.keys(this.niveis).forEach(nivel => {
            const jogosNivel = jogos.filter(j => j.nivel === nivel);
            if (jogosNivel.length > 0) {
                const vitoriasNivel = jogosNivel.filter(j => j.sucesso);
                const taxaNivel = (vitoriasNivel.length / jogosNivel.length * 100).toFixed(1);
                console.log(`   ${nivel}: ${vitoriasNivel.length}/${jogosNivel.length} (${taxaNivel}%)`);
            }
        });
    }
    
    reiniciar() {
        this.historico = [];
        console.log('\nüîÑ Hist√≥rico limpo! Come√ßando do zero.');
    }
}

// Testes e demonstra√ß√£o
const jogo = new JogoAdivinhacao();

console.log('\nüéÆ Demonstra√ß√£o do Jogo de Adivinha√ß√£o:');

// Jogo 1: N√≠vel f√°cil
try {
    const resultado1 = jogo.jogar('facil', [25, 35, 42]); // Tentativas simuladas
    console.log('\n‚úÖ Jogo 1 conclu√≠do');
} catch (error) {
    console.log('‚ùå Erro no jogo 1:', error.message);
}

// Jogo 2: N√≠vel m√©dio
try {
    const resultado2 = jogo.jogar('medio', [50, 75, 88, 94]); // Tentativas simuladas
    console.log('\n‚úÖ Jogo 2 conclu√≠do');
} catch (error) {
    console.log('‚ùå Erro no jogo 2:', error.message);
}

// Jogo 3: N√≠vel dif√≠cil
try {
    const resultado3 = jogo.jogar('dificil', [100, 150, 125, 137, 143]); // Tentativas simuladas
    console.log('\n‚úÖ Jogo 3 conclu√≠do');
} catch (error) {
    console.log('‚ùå Erro no jogo 3:', error.message);
}

// Exibir estat√≠sticas
jogo.exibirEstatisticas();

/*
========================================
EXERC√çCIO 2: VALIDADOR DE SENHA
========================================

Objetivo: Criar um sistema robusto de valida√ß√£o de senhas
com m√∫ltiplos crit√©rios e n√≠veis de seguran√ßa, demonstrando
uso de loops, condicionais e valida√ß√µes complexas.

Requisitos:
1. Validar comprimento m√≠nimo/m√°ximo
2. Verificar presen√ßa de caracteres especiais
3. Validar mai√∫sculas, min√∫sculas e n√∫meros
4. Detectar padr√µes comuns (sequ√™ncias, repeti√ß√µes)
5. Calcular for√ßa da senha
6. Sugerir melhorias
7. Gerar senhas seguras
*/

console.log('\n--- EXERC√çCIO 2: VALIDADOR DE SENHA ---');

// SOLU√á√ÉO:
class ValidadorSenha {
    constructor() {
        this.criterios = {
            comprimentoMin: 8,
            comprimentoMax: 128,
            maiuscula: true,
            minuscula: true,
            numero: true,
            especial: true,
            semSequencias: true,
            semRepeticoes: true
        };
        
        this.caracteresEspeciais = '!@#$%^&*()_+-=[]{}|;:,.<>?';
        this.sequenciasComuns = [
            '123456', '654321', 'abcdef', 'fedcba',
            'qwerty', 'asdfgh', 'zxcvbn'
        ];
        this.senhasComuns = [
            'password', '123456', 'password123', 'admin',
            'qwerty', 'letmein', 'welcome', 'monkey'
        ];
    }
    
    validarComprimento(senha) {
        const comprimento = senha.length;
        const resultado = {
            valido: comprimento >= this.criterios.comprimentoMin && 
                   comprimento <= this.criterios.comprimentoMax,
            comprimento,
            minimo: this.criterios.comprimentoMin,
            maximo: this.criterios.comprimentoMax
        };
        
        if (!resultado.valido) {
            if (comprimento < this.criterios.comprimentoMin) {
                resultado.erro = `Muito curta (m√≠nimo ${this.criterios.comprimentoMin} caracteres)`;
            } else {
                resultado.erro = `Muito longa (m√°ximo ${this.criterios.comprimentoMax} caracteres)`;
            }
        }
        
        return resultado;
    }
    
    validarCaracteres(senha) {
        const resultado = {
            maiuscula: /[A-Z]/.test(senha),
            minuscula: /[a-z]/.test(senha),
            numero: /[0-9]/.test(senha),
            especial: new RegExp(`[${this.caracteresEspeciais.replace(/[\]\\^-]/g, '\\$&')}]`).test(senha)
        };
        
        resultado.valido = Object.values(resultado).every(Boolean);
        resultado.faltando = [];
        
        if (!resultado.maiuscula) resultado.faltando.push('letra mai√∫scula');
        if (!resultado.minuscula) resultado.faltando.push('letra min√∫scula');
        if (!resultado.numero) resultado.faltando.push('n√∫mero');
        if (!resultado.especial) resultado.faltando.push('caractere especial');
        
        return resultado;
    }
    
    detectarPadroesInseguros(senha) {
        const problemas = [];
        const senhaLower = senha.toLowerCase();
        
        // Verificar sequ√™ncias comuns
        for (const sequencia of this.sequenciasComuns) {
            if (senhaLower.includes(sequencia)) {
                problemas.push(`Cont√©m sequ√™ncia comum: ${sequencia}`);
            }
        }
        
        // Verificar senhas comuns
        for (const senhaComum of this.senhasComuns) {
            if (senhaLower.includes(senhaComum)) {
                problemas.push(`Cont√©m palavra comum: ${senhaComum}`);
            }
        }
        
        // Verificar repeti√ß√µes excessivas
        const repeticoes = this.detectarRepeticoes(senha);
        if (repeticoes.length > 0) {
            problemas.push(...repeticoes);
        }
        
        // Verificar padr√µes de teclado
        const padroesToclado = ['qwer', 'asdf', 'zxcv', '1234', '4321'];
        for (const padrao of padroesToclado) {
            if (senhaLower.includes(padrao)) {
                problemas.push(`Cont√©m padr√£o de teclado: ${padrao}`);
            }
        }
        
        return {
            valido: problemas.length === 0,
            problemas
        };
    }
    
    detectarRepeticoes(senha) {
        const problemas = [];
        
        // Verificar caracteres consecutivos iguais
        for (let i = 0; i < senha.length - 2; i++) {
            if (senha[i] === senha[i + 1] && senha[i] === senha[i + 2]) {
                problemas.push(`Repeti√ß√£o excessiva do caractere '${senha[i]}'`);
                break;
            }
        }
        
        // Verificar padr√µes repetitivos
        for (let tamanho = 2; tamanho <= senha.length / 2; tamanho++) {
            for (let i = 0; i <= senha.length - tamanho * 2; i++) {
                const padrao = senha.substr(i, tamanho);
                const proximoPadrao = senha.substr(i + tamanho, tamanho);
                
                if (padrao === proximoPadrao && padrao.length >= 2) {
                    problemas.push(`Padr√£o repetitivo detectado: '${padrao}'`);
                    return problemas; // Evitar m√∫ltiplas detec√ß√µes do mesmo padr√£o
                }
            }
        }
        
        return problemas;
    }
    
    calcularForca(senha) {
        let pontuacao = 0;
        const detalhes = [];
        
        // Pontua√ß√£o por comprimento
        if (senha.length >= 8) {
            pontuacao += Math.min(senha.length * 2, 20);
            detalhes.push(`Comprimento (${senha.length}): +${Math.min(senha.length * 2, 20)}`);
        }
        
        // Pontua√ß√£o por variedade de caracteres
        const caracteres = this.validarCaracteres(senha);
        if (caracteres.maiuscula) {
            pontuacao += 10;
            detalhes.push('Mai√∫sculas: +10');
        }
        if (caracteres.minuscula) {
            pontuacao += 10;
            detalhes.push('Min√∫sculas: +10');
        }
        if (caracteres.numero) {
            pontuacao += 10;
            detalhes.push('N√∫meros: +10');
        }
        if (caracteres.especial) {
            pontuacao += 15;
            detalhes.push('Especiais: +15');
        }
        
        // Penaliza√ß√£o por padr√µes inseguros
        const padroes = this.detectarPadroesInseguros(senha);
        const penalizacao = padroes.problemas.length * 10;
        pontuacao -= penalizacao;
        if (penalizacao > 0) {
            detalhes.push(`Padr√µes inseguros: -${penalizacao}`);
        }
        
        // B√¥nus por complexidade
        const caracteresUnicos = new Set(senha).size;
        const bonusComplexidade = Math.floor(caracteresUnicos / 2);
        pontuacao += bonusComplexidade;
        if (bonusComplexidade > 0) {
            detalhes.push(`Diversidade: +${bonusComplexidade}`);
        }
        
        // Determinar n√≠vel
        let nivel, cor, descricao;
        if (pontuacao >= 80) {
            nivel = 'MUITO FORTE';
            cor = '\x1b[32m'; // Verde
            descricao = 'Excelente! Senha muito segura.';
        } else if (pontuacao >= 60) {
            nivel = 'FORTE';
            cor = '\x1b[36m'; // Ciano
            descricao = 'Boa! Senha segura.';
        } else if (pontuacao >= 40) {
            nivel = 'M√âDIA';
            cor = '\x1b[33m'; // Amarelo
            descricao = 'Razo√°vel, mas pode melhorar.';
        } else if (pontuacao >= 20) {
            nivel = 'FRACA';
            cor = '\x1b[35m'; // Magenta
            descricao = 'Fraca. Precisa de melhorias.';
        } else {
            nivel = 'MUITO FRACA';
            cor = '\x1b[31m'; // Vermelho
            descricao = 'Muito insegura! Mude imediatamente.';
        }
        
        return {
            pontuacao: Math.max(0, pontuacao),
            nivel,
            cor,
            descricao,
            detalhes
        };
    }
    
    gerarSugestoes(senha) {
        const sugestoes = [];
        
        const comprimento = this.validarComprimento(senha);
        if (!comprimento.valido) {
            sugestoes.push(comprimento.erro);
        }
        
        const caracteres = this.validarCaracteres(senha);
        if (caracteres.faltando.length > 0) {
            sugestoes.push(`Adicione: ${caracteres.faltando.join(', ')}`);
        }
        
        const padroes = this.detectarPadroesInseguros(senha);
        if (!padroes.valido) {
            sugestoes.push('Evite sequ√™ncias e padr√µes comuns');
            sugestoes.push('Use combina√ß√µes aleat√≥rias de caracteres');
        }
        
        if (senha.length < 12) {
            sugestoes.push('Considere usar pelo menos 12 caracteres');
        }
        
        if (sugestoes.length === 0) {
            sugestoes.push('Senha atende aos crit√©rios b√°sicos!');
        }
        
        return sugestoes;
    }
    
    gerarSenhaSegura(comprimento = 12, incluirEspeciais = true) {
        const minusculas = 'abcdefghijklmnopqrstuvwxyz';
        const maiusculas = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';
        const numeros = '0123456789';
        const especiais = incluirEspeciais ? this.caracteresEspeciais : '';
        
        let caracteres = minusculas + maiusculas + numeros + especiais;
        let senha = '';
        
        // Garantir pelo menos um de cada tipo
        senha += minusculas[Math.floor(Math.random() * minusculas.length)];
        senha += maiusculas[Math.floor(Math.random() * maiusculas.length)];
        senha += numeros[Math.floor(Math.random() * numeros.length)];
        if (incluirEspeciais) {
            senha += especiais[Math.floor(Math.random() * especiais.length)];
        }
        
        // Preencher o restante aleatoriamente
        for (let i = senha.length; i < comprimento; i++) {
            senha += caracteres[Math.floor(Math.random() * caracteres.length)];
        }
        
        // Embaralhar a senha
        return senha.split('').sort(() => Math.random() - 0.5).join('');
    }
    
    validar(senha) {
        const resultado = {
            senha,
            timestamp: new Date(),
            comprimento: this.validarComprimento(senha),
            caracteres: this.validarCaracteres(senha),
            padroes: this.detectarPadroesInseguros(senha),
            forca: this.calcularForca(senha),
            sugestoes: this.gerarSugestoes(senha)
        };
        
        resultado.valida = resultado.comprimento.valido && 
                          resultado.caracteres.valido && 
                          resultado.padroes.valido;
        
        return resultado;
    }
    
    exibirRelatorio(validacao) {
        console.log('\n' + '='.repeat(60));
        console.log('üîê RELAT√ìRIO DE VALIDA√á√ÉO DE SENHA');
        console.log('='.repeat(60));
        console.log(`üìù Senha: ${'*'.repeat(validacao.senha.length)} (${validacao.senha.length} caracteres)`);
        console.log(`‚úÖ Status: ${validacao.valida ? '‚úÖ V√ÅLIDA' : '‚ùå INV√ÅLIDA'}`);
        
        // For√ßa da senha
        console.log(`\nüí™ FOR√áA DA SENHA:`);
        console.log(`   Pontua√ß√£o: ${validacao.forca.pontuacao}/100`);
        console.log(`   N√≠vel: ${validacao.forca.cor}${validacao.forca.nivel}\x1b[0m`);
        console.log(`   ${validacao.forca.descricao}`);
        
        // Detalhes da pontua√ß√£o
        if (validacao.forca.detalhes.length > 0) {
            console.log(`\nüìä DETALHES DA PONTUA√á√ÉO:`);
            validacao.forca.detalhes.forEach(detalhe => {
                console.log(`   ‚Ä¢ ${detalhe}`);
            });
        }
        
        // Problemas encontrados
        if (!validacao.valida) {
            console.log(`\n‚ùå PROBLEMAS ENCONTRADOS:`);
            
            if (!validacao.comprimento.valido) {
                console.log(`   ‚Ä¢ ${validacao.comprimento.erro}`);
            }
            
            if (validacao.caracteres.faltando.length > 0) {
                console.log(`   ‚Ä¢ Faltam: ${validacao.caracteres.faltando.join(', ')}`);
            }
            
            validacao.padroes.problemas.forEach(problema => {
                console.log(`   ‚Ä¢ ${problema}`);
            });
        }
        
        // Sugest√µes
        if (validacao.sugestoes.length > 0) {
            console.log(`\nüí° SUGEST√ïES:`);
            validacao.sugestoes.forEach(sugestao => {
                console.log(`   ‚Ä¢ ${sugestao}`);
            });
        }
    }
}

// Testes e demonstra√ß√£o
const validador = new ValidadorSenha();

console.log('\nüîê Demonstra√ß√£o do Validador de Senha:');

// Teste 1: Senha fraca
const senha1 = '123456';
const validacao1 = validador.validar(senha1);
validador.exibirRelatorio(validacao1);

// Teste 2: Senha m√©dia
const senha2 = 'MinhaSenh@123';
const validacao2 = validador.validar(senha2);
validador.exibirRelatorio(validacao2);

// Teste 3: Senha forte
const senha3 = 'K9#mX$7pL@2vN&8qR!';
const validacao3 = validador.validar(senha3);
validador.exibirRelatorio(validacao3);

// Demonstrar gera√ß√£o de senha segura
console.log('\nüé≤ GERA√á√ÉO DE SENHA SEGURA:');
for (let i = 0; i < 3; i++) {
    const senhaGerada = validador.gerarSenhaSegura(12, true);
    const validacaoGerada = validador.validar(senhaGerada);
    console.log(`\nüîë Senha ${i + 1}: ${senhaGerada}`);
    console.log(`   For√ßa: ${validacaoGerada.forca.nivel} (${validacaoGerada.forca.pontuacao}/100)`);
}

/*
========================================
EXERC√çCIO 3: SIMULADOR DE CAIXA ELETR√îNICO
========================================

Objetivo: Criar um simulador completo de caixa eletr√¥nico
com m√∫ltiplas opera√ß√µes, valida√ß√µes e controle de estado,
demonstrando uso avan√ßado de estruturas de controle.

Requisitos:
1. Sistema de autentica√ß√£o (PIN)
2. M√∫ltiplas opera√ß√µes (saque, dep√≥sito, transfer√™ncia)
3. Valida√ß√£o de notas dispon√≠veis
4. Controle de saldo e limites
5. Hist√≥rico de transa√ß√µes
6. Sistema de bloqueio por tentativas
7. Relat√≥rios e extratos
*/

console.log('\n--- EXERC√çCIO 3: SIMULADOR DE CAIXA ELETR√îNICO ---');

// SOLU√á√ÉO:
class CaixaEletronico {
    constructor() {
        this.contas = new Map();
        this.notasDisponiveis = {
            100: 50,
            50: 100,
            20: 200,
            10: 150,
            5: 100,
            2: 200
        };
        this.limites = {
            saqueMaximo: 1000,
            transferenciaDiaria: 5000,
            tentativasPin: 3
        };
        this.sessaoAtual = null;
        this.inicializarContasDemo();
    }
    
    inicializarContasDemo() {
        // Criar contas de demonstra√ß√£o
        this.criarConta('12345', '1234', 'Jo√£o Silva', 2500.00);
        this.criarConta('67890', '5678', 'Maria Santos', 1800.50);
        this.criarConta('11111', '0000', 'Pedro Costa', 500.00);
    }
    
    criarConta(numero, pin, titular, saldoInicial = 0) {
        const conta = {
            numero,
            pin,
            titular,
            saldo: saldoInicial,
            bloqueada: false,
            tentativasPin: 0,
            transacoes: [],
            limitesUsados: {
                transferenciaDiaria: 0,
                ultimaResetTransferencia: new Date().toDateString()
            },
            criadaEm: new Date()
        };
        
        this.contas.set(numero, conta);
        this.registrarTransacao(numero, 'ABERTURA', saldoInicial, 'Abertura de conta');
        return conta;
    }
    
    autenticar(numeroConta, pin) {
        const conta = this.contas.get(numeroConta);
        
        if (!conta) {
            return { sucesso: false, erro: 'Conta n√£o encontrada' };
        }
        
        if (conta.bloqueada) {
            return { sucesso: false, erro: 'Conta bloqueada. Procure uma ag√™ncia.' };
        }
        
        if (conta.pin !== pin) {
            conta.tentativasPin++;
            
            if (conta.tentativasPin >= this.limites.tentativasPin) {
                conta.bloqueada = true;
                this.registrarTransacao(numeroConta, 'BLOQUEIO', 0, 'Conta bloqueada por tentativas de PIN');
                return { sucesso: false, erro: 'Conta bloqueada por excesso de tentativas incorretas' };
            }
            
            const tentativasRestantes = this.limites.tentativasPin - conta.tentativasPin;
            return { 
                sucesso: false, 
                erro: `PIN incorreto. ${tentativasRestantes} tentativa(s) restante(s)` 
            };
        }
        
        // Reset tentativas em caso de sucesso
        conta.tentativasPin = 0;
        this.sessaoAtual = {
            conta: numeroConta,
            inicioSessao: new Date(),
            operacoes: 0
        };
        
        return { sucesso: true, conta };
    }
    
    calcularNotas(valor) {
        const notasParaSaque = {};
        let valorRestante = valor;
        const notasOrdenadas = Object.keys(this.notasDisponiveis)
            .map(Number)
            .sort((a, b) => b - a);
        
        for (const nota of notasOrdenadas) {
            const quantidadeDisponivel = this.notasDisponiveis[nota];
            const quantidadeNecessaria = Math.floor(valorRestante / nota);
            const quantidadeUsar = Math.min(quantidadeDisponivel, quantidadeNecessaria);
            
            if (quantidadeUsar > 0) {
                notasParaSaque[nota] = quantidadeUsar;
                valorRestante -= quantidadeUsar * nota;
            }
        }
        
        return {
            possivel: valorRestante === 0,
            notas: notasParaSaque,
            valorRestante
        };
    }
    
    sacar(valor, observacao = '') {
        if (!this.sessaoAtual) {
            return { sucesso: false, erro: 'Sess√£o n√£o iniciada' };
        }
        
        const conta = this.contas.get(this.sessaoAtual.conta);
        
        // Valida√ß√µes
        if (valor <= 0) {
            return { sucesso: false, erro: 'Valor deve ser positivo' };
        }
        
        if (valor > this.limites.saqueMaximo) {
            return { sucesso: false, erro: `Valor excede limite de saque (R$ ${this.limites.saqueMaximo})` };
        }
        
        if (valor > conta.saldo) {
            return { sucesso: false, erro: 'Saldo insuficiente' };
        }
        
        // Verificar disponibilidade de notas
        const calculoNotas = this.calcularNotas(valor);
        if (!calculoNotas.possivel) {
            return { 
                sucesso: false, 
                erro: `N√£o h√° notas suficientes para este valor. Tente R$ ${valor - calculoNotas.valorRestante}` 
            };
        }
        
        // Realizar saque
        conta.saldo -= valor;
        
        // Atualizar notas dispon√≠veis
        for (const [nota, quantidade] of Object.entries(calculoNotas.notas)) {
            this.notasDisponiveis[nota] -= quantidade;
        }
        
        this.registrarTransacao(
            conta.numero, 
            'SAQUE', 
            -valor, 
            observacao || 'Saque em dinheiro'
        );
        
        this.sessaoAtual.operacoes++;
        
        return {
            sucesso: true,
            valor,
            notas: calculoNotas.notas,
            saldoAtual: conta.saldo,
            transacao: conta.transacoes[conta.transacoes.length - 1]
        };
    }
    
    depositar(valor, observacao = '') {
        if (!this.sessaoAtual) {
            return { sucesso: false, erro: 'Sess√£o n√£o iniciada' };
        }
        
        const conta = this.contas.get(this.sessaoAtual.conta);
        
        if (valor <= 0) {
            return { sucesso: false, erro: 'Valor deve ser positivo' };
        }
        
        conta.saldo += valor;
        
        this.registrarTransacao(
            conta.numero, 
            'DEP√ìSITO', 
            valor, 
            observacao || 'Dep√≥sito em dinheiro'
        );
        
        this.sessaoAtual.operacoes++;
        
        return {
            sucesso: true,
            valor,
            saldoAtual: conta.saldo,
            transacao: conta.transacoes[conta.transacoes.length - 1]
        };
    }
    
    transferir(contaDestino, valor, observacao = '') {
        if (!this.sessaoAtual) {
            return { sucesso: false, erro: 'Sess√£o n√£o iniciada' };
        }
        
        const contaOrigem = this.contas.get(this.sessaoAtual.conta);
        const contaDestinoObj = this.contas.get(contaDestino);
        
        // Valida√ß√µes
        if (!contaDestinoObj) {
            return { sucesso: false, erro: 'Conta de destino n√£o encontrada' };
        }
        
        if (contaDestino === this.sessaoAtual.conta) {
            return { sucesso: false, erro: 'N√£o √© poss√≠vel transferir para a mesma conta' };
        }
        
        if (valor <= 0) {
            return { sucesso: false, erro: 'Valor deve ser positivo' };
        }
        
        if (valor > contaOrigem.saldo) {
            return { sucesso: false, erro: 'Saldo insuficiente' };
        }
        
        // Verificar limite di√°rio
        const hoje = new Date().toDateString();
        if (contaOrigem.limitesUsados.ultimaResetTransferencia !== hoje) {
            contaOrigem.limitesUsados.transferenciaDiaria = 0;
            contaOrigem.limitesUsados.ultimaResetTransferencia = hoje;
        }
        
        if (contaOrigem.limitesUsados.transferenciaDiaria + valor > this.limites.transferenciaDiaria) {
            const disponivel = this.limites.transferenciaDiaria - contaOrigem.limitesUsados.transferenciaDiaria;
            return { 
                sucesso: false, 
                erro: `Limite di√°rio de transfer√™ncia excedido. Dispon√≠vel: R$ ${disponivel.toFixed(2)}` 
            };
        }
        
        // Realizar transfer√™ncia
        contaOrigem.saldo -= valor;
        contaDestinoObj.saldo += valor;
        contaOrigem.limitesUsados.transferenciaDiaria += valor;
        
        // Registrar transa√ß√µes
        const observacaoCompleta = observacao || `Transfer√™ncia para ${contaDestinoObj.titular}`;
        
        this.registrarTransacao(
            contaOrigem.numero, 
            'TRANSFER√äNCIA ENVIADA', 
            -valor, 
            `${observacaoCompleta} (Conta: ${contaDestino})`
        );
        
        this.registrarTransacao(
            contaDestinoObj.numero, 
            'TRANSFER√äNCIA RECEBIDA', 
            valor, 
            `De ${contaOrigem.titular} (Conta: ${contaOrigem.numero})`
        );
        
        this.sessaoAtual.operacoes++;
        
        return {
            sucesso: true,
            valor,
            contaDestino,
            titularDestino: contaDestinoObj.titular,
            saldoAtual: contaOrigem.saldo,
            transacao: contaOrigem.transacoes[contaOrigem.transacoes.length - 1]
        };
    }
    
    consultarSaldo() {
        if (!this.sessaoAtual) {
            return { sucesso: false, erro: 'Sess√£o n√£o iniciada' };
        }
        
        const conta = this.contas.get(this.sessaoAtual.conta);
        
        return {
            sucesso: true,
            saldo: conta.saldo,
            titular: conta.titular,
            numero: conta.numero
        };
    }
    
    obterExtrato(quantidade = 10) {
        if (!this.sessaoAtual) {
            return { sucesso: false, erro: 'Sess√£o n√£o iniciada' };
        }
        
        const conta = this.contas.get(this.sessaoAtual.conta);
        const transacoesRecentes = conta.transacoes
            .slice(-quantidade)
            .reverse();
        
        return {
            sucesso: true,
            conta: {
                numero: conta.numero,
                titular: conta.titular,
                saldo: conta.saldo
            },
            transacoes: transacoesRecentes,
            periodo: {
                inicio: transacoesRecentes[transacoesRecentes.length - 1]?.data,
                fim: transacoesRecentes[0]?.data
            }
        };
    }
    
    registrarTransacao(numeroConta, tipo, valor, observacao) {
        const conta = this.contas.get(numeroConta);
        if (!conta) return;
        
        const transacao = {
            id: Date.now() + Math.random(),
            data: new Date(),
            tipo,
            valor,
            observacao,
            saldoApos: conta.saldo
        };
        
        conta.transacoes.push(transacao);
    }
    
    encerrarSessao() {
        if (!this.sessaoAtual) {
            return { sucesso: false, erro: 'Nenhuma sess√£o ativa' };
        }
        
        const duracao = new Date() - this.sessaoAtual.inicioSessao;
        const resultado = {
            sucesso: true,
            duracao: Math.floor(duracao / 1000), // em segundos
            operacoes: this.sessaoAtual.operacoes
        };
        
        this.sessaoAtual = null;
        return resultado;
    }
    
    exibirMenu() {
        console.log('\n' + '='.repeat(50));
        console.log('üèß CAIXA ELETR√îNICO - MENU PRINCIPAL');
        console.log('='.repeat(50));
        console.log('1. üí∞ Consultar Saldo');
        console.log('2. üí∏ Sacar Dinheiro');
        console.log('3. üí≥ Depositar Dinheiro');
        console.log('4. üîÑ Transferir Dinheiro');
        console.log('5. üìÑ Extrato');
        console.log('6. üö™ Sair');
        console.log('='.repeat(50));
    }
    
    formatarExtrato(extrato) {
        let relatorio = '\n' + '='.repeat(60) + '\n';
        relatorio += 'üìÑ EXTRATO BANC√ÅRIO\n';
        relatorio += '='.repeat(60) + '\n';
        relatorio += `üë§ Titular: ${extrato.conta.titular}\n`;
        relatorio += `üè¶ Conta: ${extrato.conta.numero}\n`;
        relatorio += `üí∞ Saldo Atual: R$ ${extrato.conta.saldo.toFixed(2)}\n`;
        relatorio += '\n' + '-'.repeat(60) + '\n';
        relatorio += 'MOVIMENTA√á√ïES\n';
        relatorio += '-'.repeat(60) + '\n';
        
        if (extrato.transacoes.length === 0) {
            relatorio += 'Nenhuma movimenta√ß√£o encontrada.\n';
        } else {
            extrato.transacoes.forEach(transacao => {
                const data = transacao.data.toLocaleDateString('pt-BR');
                const hora = transacao.data.toLocaleTimeString('pt-BR');
                const valor = transacao.valor >= 0 ? 
                    `+R$ ${transacao.valor.toFixed(2)}` : 
                    `-R$ ${Math.abs(transacao.valor).toFixed(2)}`;
                const sinal = transacao.valor >= 0 ? 'üìà' : 'üìâ';
                
                relatorio += `${data} ${hora} ${sinal}\n`;
                relatorio += `  ${transacao.tipo}: ${valor}\n`;
                relatorio += `  ${transacao.observacao}\n`;
                relatorio += `  Saldo: R$ ${transacao.saldoApos.toFixed(2)}\n`;
                relatorio += '-'.repeat(40) + '\n';
            });
        }
        
        relatorio += '='.repeat(60);
        return relatorio;
    }
}

// Demonstra√ß√£o e testes
const caixa = new CaixaEletronico();

console.log('\nüèß Demonstra√ß√£o do Caixa Eletr√¥nico:');

// Simular sess√£o completa
function simularSessao() {
    console.log('\nüîê Tentando autenticar...');
    
    // Tentativa com PIN incorreto
    let auth = caixa.autenticar('12345', '0000');
    console.log('‚ùå PIN incorreto:', auth.erro);
    
    // Autentica√ß√£o correta
    auth = caixa.autenticar('12345', '1234');
    if (auth.sucesso) {
        console.log('‚úÖ Autentica√ß√£o bem-sucedida!');
        console.log(`üë§ Bem-vindo, ${auth.conta.titular}!`);
        
        // Consultar saldo
        const saldo = caixa.consultarSaldo();
        console.log(`\nüí∞ Saldo atual: R$ ${saldo.saldo.toFixed(2)}`);
        
        // Realizar saque
        console.log('\nüí∏ Realizando saque de R$ 200...');
        const saque = caixa.sacar(200, 'Saque para despesas');
        if (saque.sucesso) {
            console.log('‚úÖ Saque realizado com sucesso!');
            console.log('üíµ Notas entregues:');
            Object.entries(saque.notas).forEach(([nota, qtd]) => {
                console.log(`   ${qtd}x R$ ${nota}`);
            });
            console.log(`üí∞ Novo saldo: R$ ${saque.saldoAtual.toFixed(2)}`);
        } else {
            console.log('‚ùå Erro no saque:', saque.erro);
        }
        
        // Realizar dep√≥sito
        console.log('\nüí≥ Realizando dep√≥sito de R$ 150...');
        const deposito = caixa.depositar(150, 'Dep√≥sito de sal√°rio');
        if (deposito.sucesso) {
            console.log('‚úÖ Dep√≥sito realizado com sucesso!');
            console.log(`üí∞ Novo saldo: R$ ${deposito.saldoAtual.toFixed(2)}`);
        }
        
        // Realizar transfer√™ncia
        console.log('\nüîÑ Realizando transfer√™ncia de R$ 100...');
        const transferencia = caixa.transferir('67890', 100, 'Pagamento de conta');
        if (transferencia.sucesso) {
            console.log('‚úÖ Transfer√™ncia realizada com sucesso!');
            console.log(`üë§ Para: ${transferencia.titularDestino}`);
            console.log(`üí∞ Novo saldo: R$ ${transferencia.saldoAtual.toFixed(2)}`);
        } else {
            console.log('‚ùå Erro na transfer√™ncia:', transferencia.erro);
        }
        
        // Obter extrato
        console.log('\nüìÑ Gerando extrato...');
        const extrato = caixa.obterExtrato(5);
        if (extrato.sucesso) {
            console.log(caixa.formatarExtrato(extrato));
        }
        
        // Encerrar sess√£o
        const encerramento = caixa.encerrarSessao();
        console.log(`\nüö™ Sess√£o encerrada ap√≥s ${encerramento.duracao}s e ${encerramento.operacoes} opera√ß√µes.`);
        console.log('Obrigado por usar nosso caixa eletr√¥nico!');
    }
}

// Executar simula√ß√£o
simularSessao();

// Demonstrar tentativas de PIN incorreto
console.log('\nüîí Demonstrando bloqueio por tentativas incorretas:');
for (let i = 1; i <= 4; i++) {
    const resultado = caixa.autenticar('67890', '0000');
    console.log(`Tentativa ${i}: ${resultado.erro}`);
    if (resultado.erro.includes('bloqueada')) break;
}

console.log('\n=== EXERC√çCIOS ESTRUTURAS DE CONTROLE CONCLU√çDOS ===');
console.log('\nüéØ Conceitos praticados:');
console.log('‚úÖ Estruturas condicionais (if/else, switch/case)');
console.log('‚úÖ Loops (for, while, do-while)');
console.log('‚úÖ Controle de fluxo (break, continue)');
console.log('‚úÖ Operadores l√≥gicos e de compara√ß√£o');
console.log('‚úÖ Valida√ß√£o complexa de dados');
console.log('‚úÖ Gerenciamento de estado');
console.log('‚úÖ Tratamento de m√∫ltiplas condi√ß√µes');
console.log('‚úÖ Algoritmos de busca e classifica√ß√£o');
console.log('‚úÖ Controle de acesso e seguran√ßa');
console.log('‚úÖ Simula√ß√£o de sistemas reais');

/*
========================================
DESAFIOS EXTRAS (OPCIONAL)
========================================

1. JOGO DE ADIVINHA√á√ÉO AVAN√áADO:
   - Adicione modo multiplayer
   - Implemente diferentes categorias (n√∫meros, palavras, matem√°tica)
   - Crie sistema de ranking global
   - Adicione power-ups e dicas especiais

2. VALIDADOR DE SENHA EMPRESARIAL:
   - Implemente pol√≠ticas personaliz√°veis
   - Adicione verifica√ß√£o contra vazamentos conhecidos
   - Crie sistema de expira√ß√£o de senhas
   - Implemente hist√≥rico de senhas anteriores

3. CAIXA ELETR√îNICO COMPLETO:
   - Adicione m√∫ltiplas moedas
   - Implemente sistema de cart√£o de cr√©dito
   - Crie m√≥dulo de investimentos
   - Adicione sistema de agendamento
   - Implemente relat√≥rios gerenciais

4. SISTEMA DE VOTA√á√ÉO:
   - Crie elei√ß√£o com m√∫ltiplos candidatos
   - Implemente diferentes m√©todos de vota√ß√£o
   - Adicione sistema de auditoria
   - Crie relat√≥rios estat√≠sticos

5. SIMULADOR DE TR√ÇNSITO:
   - Modele sem√°foros inteligentes
   - Simule fluxo de ve√≠culos
   - Implemente algoritmos de otimiza√ß√£o
   - Crie sistema de multas autom√°ticas
*/