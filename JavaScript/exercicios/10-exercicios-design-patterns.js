/*
========================================
EXERC√çCIOS DE DESIGN PATTERNS
========================================

Este arquivo cont√©m 3 exerc√≠cios pr√°ticos para aprender e aplicar
os principais design patterns em JavaScript:

1. Sistema de Configura√ß√£o Global (Singleton + Factory)
2. Sistema de Notifica√ß√µes (Observer + Command)
3. Sistema de Plugins (Strategy + Decorator + Facade)

Cada exerc√≠cio demonstra m√∫ltiplos padr√µes trabalhando em conjunto,
refletindo cen√°rios reais de desenvolvimento.

========================================
EXERC√çCIO 1: SISTEMA DE CONFIGURA√á√ÉO GLOBAL
========================================

Padr√µes aplicados:
‚Ä¢ Singleton - Inst√¢ncia √∫nica de configura√ß√£o
‚Ä¢ Factory - Cria√ß√£o de diferentes tipos de configura√ß√£o
‚Ä¢ Builder - Constru√ß√£o fluente de configura√ß√µes
‚Ä¢ Proxy - Intercepta√ß√£o e valida√ß√£o de acessos
*/

// Singleton para gerenciar configura√ß√µes globais
class ConfigurationManager {
    constructor() {
        if (ConfigurationManager.instance) {
            return ConfigurationManager.instance;
        }
        
        this.configs = new Map();
        this.subscribers = new Set();
        this.history = [];
        this.locked = false;
        
        ConfigurationManager.instance = this;
        return this;
    }
    
    // Factory method para criar diferentes tipos de configura√ß√£o
    static createConfig(type, options = {}) {
        const factories = {
            database: () => new DatabaseConfig(options),
            api: () => new ApiConfig(options),
            ui: () => new UiConfig(options),
            security: () => new SecurityConfig(options)
        };
        
        const factory = factories[type];
        if (!factory) {
            throw new Error(`Tipo de configura√ß√£o '${type}' n√£o suportado`);
        }
        
        return factory();
    }
    
    // Registrar configura√ß√£o com valida√ß√£o
    register(name, config) {
        if (this.locked) {
            throw new Error('ConfigurationManager est√° bloqueado para modifica√ß√µes');
        }
        
        // Validar configura√ß√£o
        if (!config || typeof config.validate !== 'function') {
            throw new Error('Configura√ß√£o deve implementar m√©todo validate()');
        }
        
        config.validate();
        
        // Salvar estado anterior para hist√≥rico
        const previousConfig = this.configs.get(name);
        this.history.push({
            action: previousConfig ? 'update' : 'create',
            name,
            previous: previousConfig ? { ...previousConfig.toObject() } : null,
            current: { ...config.toObject() },
            timestamp: new Date()
        });
        
        this.configs.set(name, config);
        this.notifySubscribers('configChanged', { name, config });
        
        return this;
    }
    
    // Obter configura√ß√£o com proxy para intercepta√ß√£o
    get(name) {
        const config = this.configs.get(name);
        if (!config) {
            throw new Error(`Configura√ß√£o '${name}' n√£o encontrada`);
        }
        
        // Retornar proxy para interceptar acessos
        return new Proxy(config, {
            get(target, prop) {
                // Log de acesso
                console.log(`üîç Acessando propriedade '${prop}' da configura√ß√£o '${name}'`);
                
                const value = target[prop];
                
                // Se for uma fun√ß√£o, fazer bind do contexto
                if (typeof value === 'function') {
                    return value.bind(target);
                }
                
                return value;
            },
            
            set(target, prop, value) {
                console.log(`‚ö†Ô∏è Tentativa de modifica√ß√£o da propriedade '${prop}' na configura√ß√£o '${name}'`);
                throw new Error('Configura√ß√µes s√£o imut√°veis ap√≥s registro. Use update() para modificar.');
            }
        });
    }
    
    // Atualizar configura√ß√£o existente
    update(name, updates) {
        if (this.locked) {
            throw new Error('ConfigurationManager est√° bloqueado para modifica√ß√µes');
        }
        
        const config = this.configs.get(name);
        if (!config) {
            throw new Error(`Configura√ß√£o '${name}' n√£o encontrada`);
        }
        
        const updatedConfig = config.update(updates);
        this.register(name, updatedConfig);
        
        return this;
    }
    
    // Bloquear modifica√ß√µes
    lock() {
        this.locked = true;
        console.log('üîí ConfigurationManager bloqueado para modifica√ß√µes');
        return this;
    }
    
    // Desbloquear modifica√ß√µes
    unlock() {
        this.locked = false;
        console.log('üîì ConfigurationManager desbloqueado para modifica√ß√µes');
        return this;
    }
    
    // Observer pattern para notifica√ß√µes
    subscribe(callback) {
        this.subscribers.add(callback);
        return () => this.subscribers.delete(callback);
    }
    
    notifySubscribers(event, data) {
        this.subscribers.forEach(callback => {
            try {
                callback(event, data);
            } catch (error) {
                console.error('Erro ao notificar subscriber:', error);
            }
        });
    }
    
    // Obter hist√≥rico de mudan√ßas
    getHistory() {
        return [...this.history];
    }
    
    // Exportar todas as configura√ß√µes
    export() {
        const exported = {};
        for (const [name, config] of this.configs) {
            exported[name] = config.toObject();
        }
        return exported;
    }
    
    // Importar configura√ß√µes
    import(configurations) {
        for (const [name, configData] of Object.entries(configurations)) {
            const config = ConfigurationManager.createConfig(configData.type, configData);
            this.register(name, config);
        }
        return this;
    }
}

// Classe base para configura√ß√µes
class BaseConfig {
    constructor(options = {}) {
        this.type = this.constructor.name.toLowerCase().replace('config', '');
        this.created = new Date();
        this.version = options.version || '1.0.0';
        this.environment = options.environment || 'development';
    }
    
    validate() {
        if (!this.type) {
            throw new Error('Tipo de configura√ß√£o √© obrigat√≥rio');
        }
    }
    
    update(updates) {
        const ConfigClass = this.constructor;
        const currentData = this.toObject();
        const newData = { ...currentData, ...updates };
        return new ConfigClass(newData);
    }
    
    toObject() {
        const obj = {};
        for (const key in this) {
            if (this.hasOwnProperty(key) && typeof this[key] !== 'function') {
                obj[key] = this[key];
            }
        }
        return obj;
    }
}

// Configura√ß√£o de banco de dados
class DatabaseConfig extends BaseConfig {
    constructor(options = {}) {
        super(options);
        this.host = options.host || 'localhost';
        this.port = options.port || 5432;
        this.database = options.database || 'app_db';
        this.username = options.username || 'user';
        this.password = options.password || '';
        this.ssl = options.ssl || false;
        this.poolSize = options.poolSize || 10;
        this.timeout = options.timeout || 30000;
    }
    
    validate() {
        super.validate();
        if (!this.host || !this.database) {
            throw new Error('Host e database s√£o obrigat√≥rios');
        }
        if (this.port < 1 || this.port > 65535) {
            throw new Error('Porta deve estar entre 1 e 65535');
        }
    }
    
    getConnectionString() {
        const protocol = this.ssl ? 'postgresql+ssl' : 'postgresql';
        return `${protocol}://${this.username}:${this.password}@${this.host}:${this.port}/${this.database}`;
    }
}

// Configura√ß√£o de API
class ApiConfig extends BaseConfig {
    constructor(options = {}) {
        super(options);
        this.baseUrl = options.baseUrl || 'http://localhost:3000';
        this.timeout = options.timeout || 5000;
        this.retries = options.retries || 3;
        this.apiKey = options.apiKey || '';
        this.rateLimit = options.rateLimit || 100;
        this.headers = options.headers || {};
    }
    
    validate() {
        super.validate();
        if (!this.baseUrl) {
            throw new Error('Base URL √© obrigat√≥ria');
        }
        try {
            new URL(this.baseUrl);
        } catch {
            throw new Error('Base URL deve ser uma URL v√°lida');
        }
    }
    
    getHeaders() {
        const headers = { ...this.headers };
        if (this.apiKey) {
            headers['Authorization'] = `Bearer ${this.apiKey}`;
        }
        return headers;
    }
}

// Configura√ß√£o de UI
class UiConfig extends BaseConfig {
    constructor(options = {}) {
        super(options);
        this.theme = options.theme || 'light';
        this.language = options.language || 'pt-BR';
        this.animations = options.animations !== false;
        this.notifications = options.notifications !== false;
        this.autoSave = options.autoSave !== false;
        this.pageSize = options.pageSize || 20;
    }
    
    validate() {
        super.validate();
        const validThemes = ['light', 'dark', 'auto'];
        if (!validThemes.includes(this.theme)) {
            throw new Error(`Tema deve ser um de: ${validThemes.join(', ')}`);
        }
    }
}

// Configura√ß√£o de seguran√ßa
class SecurityConfig extends BaseConfig {
    constructor(options = {}) {
        super(options);
        this.jwtSecret = options.jwtSecret || '';
        this.jwtExpiration = options.jwtExpiration || '24h';
        this.bcryptRounds = options.bcryptRounds || 12;
        this.corsOrigins = options.corsOrigins || ['http://localhost:3000'];
        this.rateLimitWindow = options.rateLimitWindow || 900000; // 15 min
        this.rateLimitMax = options.rateLimitMax || 100;
    }
    
    validate() {
        super.validate();
        if (!this.jwtSecret || this.jwtSecret.length < 32) {
            throw new Error('JWT secret deve ter pelo menos 32 caracteres');
        }
        if (this.bcryptRounds < 10 || this.bcryptRounds > 15) {
            throw new Error('Rounds do bcrypt devem estar entre 10 e 15');
        }
    }
}

// Builder para configura√ß√µes complexas
class ConfigBuilder {
    constructor() {
        this.configs = new Map();
    }
    
    database(options) {
        this.configs.set('database', ConfigurationManager.createConfig('database', options));
        return this;
    }
    
    api(options) {
        this.configs.set('api', ConfigurationManager.createConfig('api', options));
        return this;
    }
    
    ui(options) {
        this.configs.set('ui', ConfigurationManager.createConfig('ui', options));
        return this;
    }
    
    security(options) {
        this.configs.set('security', ConfigurationManager.createConfig('security', options));
        return this;
    }
    
    build() {
        const manager = new ConfigurationManager();
        for (const [name, config] of this.configs) {
            manager.register(name, config);
        }
        return manager;
    }
}

// Demonstra√ß√£o do Sistema de Configura√ß√£o
console.log('\n=== EXERC√çCIO 1: SISTEMA DE CONFIGURA√á√ÉO GLOBAL ===\n');

// Criar configura√ß√µes usando Builder pattern
const configManager = new ConfigBuilder()
    .database({
        host: 'localhost',
        port: 5432,
        database: 'myapp',
        username: 'admin',
        password: 'secret123',
        ssl: true
    })
    .api({
        baseUrl: 'https://api.myapp.com',
        timeout: 10000,
        apiKey: 'sk-1234567890abcdef',
        retries: 5
    })
    .ui({
        theme: 'dark',
        language: 'pt-BR',
        animations: true
    })
    .security({
        jwtSecret: 'super-secret-jwt-key-with-32-chars-min',
        jwtExpiration: '7d',
        bcryptRounds: 12
    })
    .build();

// Subscrever para mudan√ßas
const unsubscribe = configManager.subscribe((event, data) => {
    console.log(`üì¢ Evento: ${event}`, data.name);
});

// Testar acesso √†s configura√ß√µes
console.log('üîç Testando acesso √†s configura√ß√µes:');
const dbConfig = configManager.get('database');
console.log('Connection String:', dbConfig.getConnectionString());

const apiConfig = configManager.get('api');
console.log('API Headers:', apiConfig.getHeaders());

// Testar atualiza√ß√£o
console.log('\nüîÑ Testando atualiza√ß√£o de configura√ß√£o:');
configManager.update('ui', { theme: 'light', pageSize: 50 });

// Testar bloqueio
console.log('\nüîí Testando bloqueio de configura√ß√µes:');
configManager.lock();
try {
    configManager.update('api', { timeout: 15000 });
} catch (error) {
    console.log('‚ùå Erro esperado:', error.message);
}

// Mostrar hist√≥rico
console.log('\nüìú Hist√≥rico de mudan√ßas:');
configManager.getHistory().forEach((entry, index) => {
    console.log(`${index + 1}. ${entry.action} '${entry.name}' em ${entry.timestamp.toLocaleString()}`);
});

/*
========================================
EXERC√çCIO 2: SISTEMA DE NOTIFICA√á√ïES
========================================

Padr√µes aplicados:
‚Ä¢ Observer - Notifica√ß√£o de eventos
‚Ä¢ Command - Encapsulamento de a√ß√µes
‚Ä¢ Chain of Responsibility - Pipeline de processamento
‚Ä¢ Template Method - Estrutura comum para notifica√ß√µes
*/

// Command pattern para a√ß√µes de notifica√ß√£o
class NotificationCommand {
    constructor(type, payload, options = {}) {
        this.id = Math.random().toString(36).substr(2, 9);
        this.type = type;
        this.payload = payload;
        this.options = options;
        this.timestamp = new Date();
        this.status = 'pending';
        this.attempts = 0;
        this.maxAttempts = options.maxAttempts || 3;
    }
    
    execute(context) {
        this.attempts++;
        this.status = 'executing';
        
        try {
            const result = this.doExecute(context);
            this.status = 'completed';
            return result;
        } catch (error) {
            this.status = 'failed';
            this.error = error;
            
            if (this.attempts < this.maxAttempts) {
                this.status = 'retrying';
                setTimeout(() => this.execute(context), this.getRetryDelay());
            }
            
            throw error;
        }
    }
    
    doExecute(context) {
        throw new Error('M√©todo doExecute deve ser implementado');
    }
    
    getRetryDelay() {
        return Math.pow(2, this.attempts) * 1000; // Exponential backoff
    }
    
    canExecute() {
        return this.status === 'pending' || this.status === 'retrying';
    }
}

// Comandos espec√≠ficos para diferentes tipos de notifica√ß√£o
class EmailNotificationCommand extends NotificationCommand {
    doExecute(context) {
        const { to, subject, body } = this.payload;
        console.log(`üìß Enviando email para ${to}:`);
        console.log(`   Assunto: ${subject}`);
        console.log(`   Corpo: ${body.substring(0, 50)}...`);
        
        // Simular envio
        if (Math.random() < 0.8) { // 80% de sucesso
            return { messageId: `email-${this.id}`, status: 'sent' };
        } else {
            throw new Error('Falha no envio do email');
        }
    }
}

class PushNotificationCommand extends NotificationCommand {
    doExecute(context) {
        const { deviceId, title, message } = this.payload;
        console.log(`üì± Enviando push para dispositivo ${deviceId}:`);
        console.log(`   T√≠tulo: ${title}`);
        console.log(`   Mensagem: ${message}`);
        
        // Simular envio
        if (Math.random() < 0.9) { // 90% de sucesso
            return { notificationId: `push-${this.id}`, status: 'delivered' };
        } else {
            throw new Error('Dispositivo n√£o encontrado');
        }
    }
}

class SmsNotificationCommand extends NotificationCommand {
    doExecute(context) {
        const { phoneNumber, message } = this.payload;
        console.log(`üì± Enviando SMS para ${phoneNumber}:`);
        console.log(`   Mensagem: ${message}`);
        
        // Simular envio
        if (Math.random() < 0.85) { // 85% de sucesso
            return { messageId: `sms-${this.id}`, status: 'sent' };
        } else {
            throw new Error('N√∫mero inv√°lido');
        }
    }
}

// Chain of Responsibility para processamento de notifica√ß√µes
class NotificationProcessor {
    constructor() {
        this.next = null;
    }
    
    setNext(processor) {
        this.next = processor;
        return processor;
    }
    
    process(command, context) {
        if (this.canProcess(command)) {
            return this.doProcess(command, context);
        } else if (this.next) {
            return this.next.process(command, context);
        } else {
            throw new Error(`Nenhum processador encontrado para comando ${command.type}`);
        }
    }
    
    canProcess(command) {
        throw new Error('M√©todo canProcess deve ser implementado');
    }
    
    doProcess(command, context) {
        throw new Error('M√©todo doProcess deve ser implementado');
    }
}

// Processadores espec√≠ficos
class EmailProcessor extends NotificationProcessor {
    canProcess(command) {
        return command.type === 'email';
    }
    
    doProcess(command, context) {
        console.log('üîÑ Processando notifica√ß√£o por email...');
        return command.execute(context);
    }
}

class PushProcessor extends NotificationProcessor {
    canProcess(command) {
        return command.type === 'push';
    }
    
    doProcess(command, context) {
        console.log('üîÑ Processando notifica√ß√£o push...');
        return command.execute(context);
    }
}

class SmsProcessor extends NotificationProcessor {
    canProcess(command) {
        return command.type === 'sms';
    }
    
    doProcess(command, context) {
        console.log('üîÑ Processando notifica√ß√£o SMS...');
        return command.execute(context);
    }
}

// Observer pattern para o sistema de notifica√ß√µes
class NotificationCenter {
    constructor() {
        this.observers = new Map();
        this.queue = [];
        this.processing = false;
        this.history = [];
        this.processors = this.setupProcessors();
    }
    
    setupProcessors() {
        const emailProcessor = new EmailProcessor();
        const pushProcessor = new PushProcessor();
        const smsProcessor = new SmsProcessor();
        
        emailProcessor.setNext(pushProcessor).setNext(smsProcessor);
        
        return emailProcessor;
    }
    
    // Observer pattern
    subscribe(event, callback) {
        if (!this.observers.has(event)) {
            this.observers.set(event, new Set());
        }
        this.observers.get(event).add(callback);
        
        return () => {
            const callbacks = this.observers.get(event);
            if (callbacks) {
                callbacks.delete(callback);
            }
        };
    }
    
    notify(event, data) {
        const callbacks = this.observers.get(event);
        if (callbacks) {
            callbacks.forEach(callback => {
                try {
                    callback(data);
                } catch (error) {
                    console.error(`Erro ao notificar observer para evento ${event}:`, error);
                }
            });
        }
    }
    
    // Enviar notifica√ß√£o
    send(type, payload, options = {}) {
        const command = this.createCommand(type, payload, options);
        this.queue.push(command);
        
        this.notify('notificationQueued', { command });
        
        if (!this.processing) {
            this.processQueue();
        }
        
        return command.id;
    }
    
    createCommand(type, payload, options) {
        const commandMap = {
            email: EmailNotificationCommand,
            push: PushNotificationCommand,
            sms: SmsNotificationCommand
        };
        
        const CommandClass = commandMap[type];
        if (!CommandClass) {
            throw new Error(`Tipo de notifica√ß√£o '${type}' n√£o suportado`);
        }
        
        return new CommandClass(type, payload, options);
    }
    
    async processQueue() {
        if (this.processing || this.queue.length === 0) {
            return;
        }
        
        this.processing = true;
        this.notify('processingStarted', { queueSize: this.queue.length });
        
        while (this.queue.length > 0) {
            const command = this.queue.shift();
            
            try {
                this.notify('notificationProcessing', { command });
                
                const result = await this.processors.process(command, this);
                
                this.history.push({
                    command,
                    result,
                    status: 'success',
                    processedAt: new Date()
                });
                
                this.notify('notificationSent', { command, result });
                
            } catch (error) {
                this.history.push({
                    command,
                    error,
                    status: 'failed',
                    processedAt: new Date()
                });
                
                this.notify('notificationFailed', { command, error });
            }
            
            // Pequena pausa entre processamentos
            await new Promise(resolve => setTimeout(resolve, 100));
        }
        
        this.processing = false;
        this.notify('processingCompleted', { historySize: this.history.length });
    }
    
    // Obter estat√≠sticas
    getStats() {
        const total = this.history.length;
        const successful = this.history.filter(h => h.status === 'success').length;
        const failed = this.history.filter(h => h.status === 'failed').length;
        
        const byType = this.history.reduce((acc, h) => {
            const type = h.command.type;
            acc[type] = (acc[type] || 0) + 1;
            return acc;
        }, {});
        
        return {
            total,
            successful,
            failed,
            successRate: total > 0 ? (successful / total * 100).toFixed(2) + '%' : '0%',
            byType,
            queueSize: this.queue.length
        };
    }
    
    // Limpar hist√≥rico
    clearHistory() {
        this.history = [];
        this.notify('historyCleaned', {});
    }
}

// Template Method para diferentes tipos de notifica√ß√£o
class NotificationTemplate {
    constructor(notificationCenter) {
        this.notificationCenter = notificationCenter;
    }
    
    // Template method
    sendNotification(recipient, data) {
        const payload = this.preparePayload(recipient, data);
        const options = this.getOptions(data);
        
        return this.notificationCenter.send(this.getType(), payload, options);
    }
    
    getType() {
        throw new Error('M√©todo getType deve ser implementado');
    }
    
    preparePayload(recipient, data) {
        throw new Error('M√©todo preparePayload deve ser implementado');
    }
    
    getOptions(data) {
        return {
            priority: data.priority || 'normal',
            maxAttempts: data.maxAttempts || 3
        };
    }
}

class WelcomeEmailTemplate extends NotificationTemplate {
    getType() {
        return 'email';
    }
    
    preparePayload(recipient, data) {
        return {
            to: recipient.email,
            subject: `Bem-vindo(a), ${recipient.name}!`,
            body: `Ol√° ${recipient.name},\n\nSeja bem-vindo(a) √† nossa plataforma!\n\nAtenciosamente,\nEquipe`
        };
    }
}

class OrderConfirmationTemplate extends NotificationTemplate {
    getType() {
        return 'email';
    }
    
    preparePayload(recipient, data) {
        return {
            to: recipient.email,
            subject: `Pedido #${data.orderId} confirmado`,
            body: `Ol√° ${recipient.name},\n\nSeu pedido #${data.orderId} foi confirmado!\n\nTotal: R$ ${data.total}\n\nObrigado!`
        };
    }
}

class UrgentAlertTemplate extends NotificationTemplate {
    getType() {
        return 'push';
    }
    
    preparePayload(recipient, data) {
        return {
            deviceId: recipient.deviceId,
            title: 'Alerta Urgente',
            message: data.message
        };
    }
    
    getOptions(data) {
        return {
            priority: 'high',
            maxAttempts: 5
        };
    }
}

// Demonstra√ß√£o do Sistema de Notifica√ß√µes
console.log('\n\n=== EXERC√çCIO 2: SISTEMA DE NOTIFICA√á√ïES ===\n');

const notificationCenter = new NotificationCenter();

// Subscrever para eventos
notificationCenter.subscribe('notificationSent', (data) => {
    console.log(`‚úÖ Notifica√ß√£o ${data.command.id} enviada com sucesso`);
});

notificationCenter.subscribe('notificationFailed', (data) => {
    console.log(`‚ùå Falha ao enviar notifica√ß√£o ${data.command.id}: ${data.error.message}`);
});

notificationCenter.subscribe('processingCompleted', (data) => {
    console.log(`üèÅ Processamento conclu√≠do. Hist√≥rico: ${data.historySize} itens`);
});

// Usar templates para enviar notifica√ß√µes
const welcomeTemplate = new WelcomeEmailTemplate(notificationCenter);
const orderTemplate = new OrderConfirmationTemplate(notificationCenter);
const alertTemplate = new UrgentAlertTemplate(notificationCenter);

// Enviar diferentes tipos de notifica√ß√£o
console.log('üì§ Enviando notifica√ß√µes...');

welcomeTemplate.sendNotification(
    { name: 'Jo√£o Silva', email: 'joao@email.com' },
    { priority: 'normal' }
);

orderTemplate.sendNotification(
    { name: 'Maria Santos', email: 'maria@email.com' },
    { orderId: '12345', total: '299.90' }
);

alertTemplate.sendNotification(
    { deviceId: 'device-abc123' },
    { message: 'Sistema ser√° reiniciado em 5 minutos', priority: 'high' }
);

// Enviar notifica√ß√µes diretas
notificationCenter.send('sms', {
    phoneNumber: '+5511999999999',
    message: 'Seu c√≥digo de verifica√ß√£o √©: 123456'
});

// Aguardar processamento e mostrar estat√≠sticas
setTimeout(() => {
    console.log('\nüìä Estat√≠sticas do sistema:');
    console.log(notificationCenter.getStats());
}, 2000);

/*
========================================
EXERC√çCIO 3: SISTEMA DE PLUGINS
========================================

Padr√µes aplicados:
‚Ä¢ Strategy - Diferentes estrat√©gias de processamento
‚Ä¢ Decorator - Extens√£o de funcionalidades
‚Ä¢ Facade - Interface simplificada
‚Ä¢ Plugin Architecture - Sistema extens√≠vel
*/

// Strategy pattern para diferentes tipos de processamento
class ProcessingStrategy {
    process(data, context) {
        throw new Error('M√©todo process deve ser implementado');
    }
    
    getName() {
        throw new Error('M√©todo getName deve ser implementado');
    }
    
    getDescription() {
        return 'Estrat√©gia de processamento';
    }
    
    getVersion() {
        return '1.0.0';
    }
}

// Estrat√©gias espec√≠ficas
class DataValidationStrategy extends ProcessingStrategy {
    constructor(rules = {}) {
        super();
        this.rules = rules;
    }
    
    process(data, context) {
        console.log('üîç Executando valida√ß√£o de dados...');
        
        const errors = [];
        
        for (const [field, rule] of Object.entries(this.rules)) {
            const value = data[field];
            
            if (rule.required && (value === undefined || value === null || value === '')) {
                errors.push(`Campo '${field}' √© obrigat√≥rio`);
            }
            
            if (value !== undefined && rule.type && typeof value !== rule.type) {
                errors.push(`Campo '${field}' deve ser do tipo ${rule.type}`);
            }
            
            if (value !== undefined && rule.minLength && value.length < rule.minLength) {
                errors.push(`Campo '${field}' deve ter pelo menos ${rule.minLength} caracteres`);
            }
            
            if (value !== undefined && rule.pattern && !rule.pattern.test(value)) {
                errors.push(`Campo '${field}' n√£o atende ao padr√£o exigido`);
            }
        }
        
        if (errors.length > 0) {
            throw new Error(`Valida√ß√£o falhou: ${errors.join(', ')}`);
        }
        
        return { ...data, validated: true };
    }
    
    getName() {
        return 'DataValidation';
    }
    
    getDescription() {
        return 'Valida dados de entrada conforme regras definidas';
    }
}

class DataTransformationStrategy extends ProcessingStrategy {
    constructor(transformations = {}) {
        super();
        this.transformations = transformations;
    }
    
    process(data, context) {
        console.log('üîÑ Executando transforma√ß√£o de dados...');
        
        const transformed = { ...data };
        
        for (const [field, transformation] of Object.entries(this.transformations)) {
            if (transformed[field] !== undefined) {
                switch (transformation.type) {
                    case 'uppercase':
                        transformed[field] = transformed[field].toString().toUpperCase();
                        break;
                    case 'lowercase':
                        transformed[field] = transformed[field].toString().toLowerCase();
                        break;
                    case 'trim':
                        transformed[field] = transformed[field].toString().trim();
                        break;
                    case 'format':
                        if (transformation.formatter) {
                            transformed[field] = transformation.formatter(transformed[field]);
                        }
                        break;
                    case 'map':
                        if (transformation.mapping) {
                            transformed[field] = transformation.mapping[transformed[field]] || transformed[field];
                        }
                        break;
                }
            }
        }
        
        return { ...transformed, transformed: true };
    }
    
    getName() {
        return 'DataTransformation';
    }
    
    getDescription() {
        return 'Transforma dados conforme regras de transforma√ß√£o';
    }
}

class DataEnrichmentStrategy extends ProcessingStrategy {
    constructor(enrichers = []) {
        super();
        this.enrichers = enrichers;
    }
    
    async process(data, context) {
        console.log('‚ú® Executando enriquecimento de dados...');
        
        let enriched = { ...data };
        
        for (const enricher of this.enrichers) {
            try {
                const enrichment = await enricher(enriched, context);
                enriched = { ...enriched, ...enrichment };
            } catch (error) {
                console.warn(`Falha no enriquecimento: ${error.message}`);
            }
        }
        
        return { ...enriched, enriched: true };
    }
    
    getName() {
        return 'DataEnrichment';
    }
    
    getDescription() {
        return 'Enriquece dados com informa√ß√µes adicionais';
    }
}

// Decorator pattern para adicionar funcionalidades
class StrategyDecorator extends ProcessingStrategy {
    constructor(strategy) {
        super();
        this.strategy = strategy;
    }
    
    process(data, context) {
        return this.strategy.process(data, context);
    }
    
    getName() {
        return this.strategy.getName();
    }
    
    getDescription() {
        return this.strategy.getDescription();
    }
    
    getVersion() {
        return this.strategy.getVersion();
    }
}

class LoggingDecorator extends StrategyDecorator {
    async process(data, context) {
        const startTime = Date.now();
        console.log(`üìù [${this.getName()}] Iniciando processamento...`);
        
        try {
            const result = await this.strategy.process(data, context);
            const duration = Date.now() - startTime;
            console.log(`üìù [${this.getName()}] Conclu√≠do em ${duration}ms`);
            return result;
        } catch (error) {
            const duration = Date.now() - startTime;
            console.log(`üìù [${this.getName()}] Falhou em ${duration}ms: ${error.message}`);
            throw error;
        }
    }
}

class CachingDecorator extends StrategyDecorator {
    constructor(strategy, ttl = 300000) { // 5 minutos
        super(strategy);
        this.cache = new Map();
        this.ttl = ttl;
    }
    
    async process(data, context) {
        const key = this.generateCacheKey(data);
        const cached = this.cache.get(key);
        
        if (cached && Date.now() - cached.timestamp < this.ttl) {
            console.log(`üíæ [${this.getName()}] Cache hit`);
            return cached.result;
        }
        
        console.log(`üîÑ [${this.getName()}] Cache miss, processando...`);
        const result = await this.strategy.process(data, context);
        
        this.cache.set(key, {
            result,
            timestamp: Date.now()
        });
        
        return result;
    }
    
    generateCacheKey(data) {
        return JSON.stringify(data);
    }
    
    clearCache() {
        this.cache.clear();
        console.log(`üóëÔ∏è [${this.getName()}] Cache limpo`);
    }
}

class RetryDecorator extends StrategyDecorator {
    constructor(strategy, maxRetries = 3, delay = 1000) {
        super(strategy);
        this.maxRetries = maxRetries;
        this.delay = delay;
    }
    
    async process(data, context) {
        let lastError;
        
        for (let attempt = 1; attempt <= this.maxRetries; attempt++) {
            try {
                if (attempt > 1) {
                    console.log(`üîÑ [${this.getName()}] Tentativa ${attempt}/${this.maxRetries}`);
                    await new Promise(resolve => setTimeout(resolve, this.delay * attempt));
                }
                
                return await this.strategy.process(data, context);
            } catch (error) {
                lastError = error;
                console.log(`‚ùå [${this.getName()}] Tentativa ${attempt} falhou: ${error.message}`);
            }
        }
        
        throw new Error(`Falha ap√≥s ${this.maxRetries} tentativas: ${lastError.message}`);
    }
}

// Plugin base
class Plugin {
    constructor(name, version = '1.0.0') {
        this.name = name;
        this.version = version;
        this.enabled = true;
        this.dependencies = [];
        this.strategies = new Map();
        this.hooks = new Map();
    }
    
    // Registrar estrat√©gia
    registerStrategy(name, strategy) {
        this.strategies.set(name, strategy);
        return this;
    }
    
    // Registrar hook
    registerHook(event, callback) {
        if (!this.hooks.has(event)) {
            this.hooks.set(event, []);
        }
        this.hooks.get(event).push(callback);
        return this;
    }
    
    // Inicializar plugin
    initialize(pluginManager) {
        console.log(`üîå Inicializando plugin ${this.name} v${this.version}`);
        this.onInitialize(pluginManager);
    }
    
    // Finalizar plugin
    destroy() {
        console.log(`üîå Finalizando plugin ${this.name}`);
        this.onDestroy();
    }
    
    // Hooks para subclasses
    onInitialize(pluginManager) {}
    onDestroy() {}
    
    // Verificar depend√™ncias
    checkDependencies(availablePlugins) {
        for (const dep of this.dependencies) {
            if (!availablePlugins.has(dep)) {
                throw new Error(`Plugin ${this.name} requer depend√™ncia: ${dep}`);
            }
        }
    }
}

// Facade para o sistema de plugins
class PluginManager {
    constructor() {
        this.plugins = new Map();
        this.strategies = new Map();
        this.hooks = new Map();
        this.processingPipeline = [];
    }
    
    // Registrar plugin
    register(plugin) {
        if (this.plugins.has(plugin.name)) {
            throw new Error(`Plugin ${plugin.name} j√° est√° registrado`);
        }
        
        // Verificar depend√™ncias
        plugin.checkDependencies(this.plugins);
        
        // Registrar plugin
        this.plugins.set(plugin.name, plugin);
        
        // Registrar estrat√©gias do plugin
        for (const [name, strategy] of plugin.strategies) {
            this.strategies.set(`${plugin.name}.${name}`, strategy);
        }
        
        // Registrar hooks do plugin
        for (const [event, callbacks] of plugin.hooks) {
            if (!this.hooks.has(event)) {
                this.hooks.set(event, []);
            }
            this.hooks.get(event).push(...callbacks);
        }
        
        // Inicializar plugin
        plugin.initialize(this);
        
        this.triggerHook('pluginRegistered', { plugin });
        
        return this;
    }
    
    // Desregistrar plugin
    unregister(pluginName) {
        const plugin = this.plugins.get(pluginName);
        if (!plugin) {
            throw new Error(`Plugin ${pluginName} n√£o encontrado`);
        }
        
        // Finalizar plugin
        plugin.destroy();
        
        // Remover estrat√©gias
        for (const strategyName of plugin.strategies.keys()) {
            this.strategies.delete(`${pluginName}.${strategyName}`);
        }
        
        // Remover hooks
        for (const [event, callbacks] of plugin.hooks) {
            const eventHooks = this.hooks.get(event);
            if (eventHooks) {
                callbacks.forEach(callback => {
                    const index = eventHooks.indexOf(callback);
                    if (index > -1) {
                        eventHooks.splice(index, 1);
                    }
                });
            }
        }
        
        // Remover plugin
        this.plugins.delete(pluginName);
        
        this.triggerHook('pluginUnregistered', { pluginName });
        
        return this;
    }
    
    // Obter estrat√©gia
    getStrategy(name) {
        const strategy = this.strategies.get(name);
        if (!strategy) {
            throw new Error(`Estrat√©gia ${name} n√£o encontrada`);
        }
        return strategy;
    }
    
    // Configurar pipeline de processamento
    setPipeline(strategyNames) {
        this.processingPipeline = strategyNames.map(name => this.getStrategy(name));
        return this;
    }
    
    // Processar dados atrav√©s do pipeline
    async process(data, context = {}) {
        this.triggerHook('processingStarted', { data, context });
        
        let result = data;
        
        for (const strategy of this.processingPipeline) {
            try {
                this.triggerHook('strategyStarted', { strategy, data: result });
                result = await strategy.process(result, context);
                this.triggerHook('strategyCompleted', { strategy, result });
            } catch (error) {
                this.triggerHook('strategyFailed', { strategy, error, data: result });
                throw error;
            }
        }
        
        this.triggerHook('processingCompleted', { result });
        
        return result;
    }
    
    // Disparar hooks
    triggerHook(event, data) {
        const callbacks = this.hooks.get(event);
        if (callbacks) {
            callbacks.forEach(callback => {
                try {
                    callback(data);
                } catch (error) {
                    console.error(`Erro ao executar hook ${event}:`, error);
                }
            });
        }
    }
    
    // Listar plugins
    listPlugins() {
        return Array.from(this.plugins.values()).map(plugin => ({
            name: plugin.name,
            version: plugin.version,
            enabled: plugin.enabled,
            strategies: Array.from(plugin.strategies.keys())
        }));
    }
    
    // Listar estrat√©gias
    listStrategies() {
        return Array.from(this.strategies.keys());
    }
}

// Plugins espec√≠ficos
class ValidationPlugin extends Plugin {
    constructor() {
        super('validation', '1.0.0');
        
        // Registrar estrat√©gias
        this.registerStrategy('basic', new DataValidationStrategy({
            name: { required: true, type: 'string', minLength: 2 },
            email: { required: true, type: 'string', pattern: /^[^\s@]+@[^\s@]+\.[^\s@]+$/ },
            age: { type: 'number' }
        }));
        
        this.registerStrategy('strict', new DataValidationStrategy({
            name: { required: true, type: 'string', minLength: 3 },
            email: { required: true, type: 'string', pattern: /^[^\s@]+@[^\s@]+\.[^\s@]+$/ },
            age: { required: true, type: 'number' },
            phone: { required: true, type: 'string', pattern: /^\+?[1-9]\d{1,14}$/ }
        }));
    }
}

class TransformationPlugin extends Plugin {
    constructor() {
        super('transformation', '1.0.0');
        
        // Registrar estrat√©gias
        this.registerStrategy('normalize', new DataTransformationStrategy({
            name: { type: 'trim' },
            email: { type: 'lowercase' },
            country: { type: 'uppercase' }
        }));
        
        this.registerStrategy('format', new DataTransformationStrategy({
            name: { type: 'format', formatter: (name) => name.split(' ').map(n => n.charAt(0).toUpperCase() + n.slice(1).toLowerCase()).join(' ') },
            phone: { type: 'format', formatter: (phone) => phone.replace(/\D/g, '') }
        }));
    }
}

class EnrichmentPlugin extends Plugin {
    constructor() {
        super('enrichment', '1.0.0');
        
        // Registrar estrat√©gias
        this.registerStrategy('basic', new DataEnrichmentStrategy([
            async (data) => ({ timestamp: new Date().toISOString() }),
            async (data) => ({ id: Math.random().toString(36).substr(2, 9) }),
            async (data) => ({ source: 'api' })
        ]));
        
        this.registerStrategy('geo', new DataEnrichmentStrategy([
            async (data) => {
                // Simular busca de geolocaliza√ß√£o
                if (data.country) {
                    const geoData = {
                        'BR': { continent: 'South America', timezone: 'America/Sao_Paulo' },
                        'US': { continent: 'North America', timezone: 'America/New_York' },
                        'UK': { continent: 'Europe', timezone: 'Europe/London' }
                    };
                    return geoData[data.country] || {};
                }
                return {};
            }
        ]));
    }
}

// Demonstra√ß√£o do Sistema de Plugins
console.log('\n\n=== EXERC√çCIO 3: SISTEMA DE PLUGINS ===\n');

const pluginManager = new PluginManager();

// Registrar hooks globais
pluginManager.hooks.set('processingStarted', [(data) => {
    console.log('üöÄ Iniciando processamento de dados...');
}]);

pluginManager.hooks.set('processingCompleted', [(data) => {
    console.log('‚úÖ Processamento conclu√≠do!');
    console.log('üìä Resultado final:', JSON.stringify(data.result, null, 2));
}]);

// Registrar plugins
const validationPlugin = new ValidationPlugin();
const transformationPlugin = new TransformationPlugin();
const enrichmentPlugin = new EnrichmentPlugin();

pluginManager
    .register(validationPlugin)
    .register(transformationPlugin)
    .register(enrichmentPlugin);

// Aplicar decorators √†s estrat√©gias
const loggedValidation = new LoggingDecorator(
    pluginManager.getStrategy('validation.basic')
);

const cachedTransformation = new CachingDecorator(
    new LoggingDecorator(pluginManager.getStrategy('transformation.normalize'))
);

const retryEnrichment = new RetryDecorator(
    new LoggingDecorator(pluginManager.getStrategy('enrichment.basic')),
    2,
    500
);

// Registrar estrat√©gias decoradas
pluginManager.strategies.set('validation.logged', loggedValidation);
pluginManager.strategies.set('transformation.cached', cachedTransformation);
pluginManager.strategies.set('enrichment.retry', retryEnrichment);

// Configurar pipeline
pluginManager.setPipeline([
    'validation.logged',
    'transformation.cached',
    'enrichment.retry'
]);

// Processar dados
const testData = {
    name: '  jo√£o silva  ',
    email: 'JOAO@EMAIL.COM',
    age: 30,
    country: 'BR'
};

console.log('üì• Dados de entrada:', JSON.stringify(testData, null, 2));

// Executar processamento
pluginManager.process(testData)
    .then(result => {
        console.log('\nüéâ Processamento bem-sucedido!');
    })
    .catch(error => {
        console.error('üí• Erro no processamento:', error.message);
    });

// Mostrar informa√ß√µes do sistema
setTimeout(() => {
    console.log('\nüìã Plugins registrados:');
    pluginManager.listPlugins().forEach(plugin => {
        console.log(`  ‚Ä¢ ${plugin.name} v${plugin.version} (${plugin.strategies.length} estrat√©gias)`);
    });
    
    console.log('\nüîß Estrat√©gias dispon√≠veis:');
    pluginManager.listStrategies().forEach(strategy => {
        console.log(`  ‚Ä¢ ${strategy}`);
    });
}, 1000);

/*
========================================
CONCEITOS APLICADOS
========================================

1. SINGLETON PATTERN:
   ‚Ä¢ Inst√¢ncia √∫nica do ConfigurationManager
   ‚Ä¢ Controle de acesso global
   ‚Ä¢ Lazy initialization
   ‚Ä¢ Thread safety considerations

2. FACTORY PATTERN:
   ‚Ä¢ Cria√ß√£o de diferentes tipos de configura√ß√£o
   ‚Ä¢ Encapsulamento da l√≥gica de cria√ß√£o
   ‚Ä¢ Extensibilidade para novos tipos
   ‚Ä¢ Valida√ß√£o durante cria√ß√£o

3. BUILDER PATTERN:
   ‚Ä¢ Constru√ß√£o fluente de configura√ß√µes
   ‚Ä¢ Separa√ß√£o da constru√ß√£o da representa√ß√£o
   ‚Ä¢ Configura√ß√£o step-by-step
   ‚Ä¢ Valida√ß√£o incremental

4. PROXY PATTERN:
   ‚Ä¢ Intercepta√ß√£o de acessos √†s configura√ß√µes
   ‚Ä¢ Logging transparente
   ‚Ä¢ Controle de acesso
   ‚Ä¢ Lazy loading

5. OBSERVER PATTERN:
   ‚Ä¢ Notifica√ß√£o de mudan√ßas
   ‚Ä¢ Desacoplamento entre publisher e subscribers
   ‚Ä¢ Event-driven architecture
   ‚Ä¢ Subscription management

6. COMMAND PATTERN:
   ‚Ä¢ Encapsulamento de opera√ß√µes
   ‚Ä¢ Undo/redo functionality
   ‚Ä¢ Queuing e scheduling
   ‚Ä¢ Retry logic

7. CHAIN OF RESPONSIBILITY:
   ‚Ä¢ Pipeline de processamento
   ‚Ä¢ Desacoplamento de handlers
   ‚Ä¢ Flexibilidade na ordem
   ‚Ä¢ Error handling distribu√≠do

8. TEMPLATE METHOD:
   ‚Ä¢ Estrutura comum para notifica√ß√µes
   ‚Ä¢ Customiza√ß√£o de steps espec√≠ficos
   ‚Ä¢ Code reuse
   ‚Ä¢ Consistent interface

9. STRATEGY PATTERN:
   ‚Ä¢ Algoritmos intercambi√°veis
   ‚Ä¢ Runtime strategy selection
   ‚Ä¢ Extensibilidade
   ‚Ä¢ Separation of concerns

10. DECORATOR PATTERN:
    ‚Ä¢ Extens√£o de funcionalidades
    ‚Ä¢ Composi√ß√£o din√¢mica
    ‚Ä¢ Single responsibility
    ‚Ä¢ Open/closed principle

11. FACADE PATTERN:
    ‚Ä¢ Interface simplificada
    ‚Ä¢ Subsystem encapsulation
    ‚Ä¢ Reduced coupling
    ‚Ä¢ Ease of use

12. PLUGIN ARCHITECTURE:
    ‚Ä¢ Modular design
    ‚Ä¢ Runtime extensibility
    ‚Ä¢ Dependency management
    ‚Ä¢ Hot-swapping capabilities

========================================
BOAS PR√ÅTICAS DEMONSTRADAS
========================================

1. DESIGN:
   ‚Ä¢ Separation of concerns
   ‚Ä¢ Single responsibility principle
   ‚Ä¢ Open/closed principle
   ‚Ä¢ Dependency inversion

2. ARQUITETURA:
   ‚Ä¢ Modular design
   ‚Ä¢ Plugin-based architecture
   ‚Ä¢ Event-driven communication
   ‚Ä¢ Layered structure

3. C√ìDIGO:
   ‚Ä¢ Clean code principles
   ‚Ä¢ Error handling
   ‚Ä¢ Logging e monitoring
   ‚Ä¢ Documentation

4. PERFORMANCE:
   ‚Ä¢ Caching strategies
   ‚Ä¢ Lazy loading
   ‚Ä¢ Resource pooling
   ‚Ä¢ Efficient algorithms

5. MANUTENIBILIDADE:
   ‚Ä¢ Consistent interfaces
   ‚Ä¢ Extensible design
   ‚Ä¢ Configuration management
   ‚Ä¢ Version control

6. TESTABILIDADE:
   ‚Ä¢ Dependency injection
   ‚Ä¢ Mock-friendly design
   ‚Ä¢ Isolated components
   ‚Ä¢ Clear contracts

========================================
EXERC√çCIOS PROPOSTOS
========================================

B√ÅSICO:
1. Implementar um Logger usando Singleton
2. Criar um Factory para diferentes tipos de usu√°rio
3. Usar Observer para sistema de eventos simples
4. Implementar Strategy para diferentes algoritmos de ordena√ß√£o

INTERMEDI√ÅRIO:
5. Criar um sistema de cache com Decorator
6. Implementar Command pattern para opera√ß√µes de CRUD
7. Usar Template Method para diferentes relat√≥rios
8. Criar um Facade para API complexa

AVAN√áADO:
9. Implementar um framework MVC completo
10. Criar um sistema de workflow com Chain of Responsibility
11. Desenvolver um ORM usando m√∫ltiplos patterns
12. Implementar um sistema de plugins completo

========================================
FERRAMENTAS RECOMENDADAS
========================================

‚Ä¢ UML Tools - Diagrama√ß√£o de patterns
‚Ä¢ Design Pattern Libraries - Implementa√ß√µes prontas
‚Ä¢ Code Analysis Tools - Detec√ß√£o de anti-patterns
‚Ä¢ Refactoring Tools - Aplica√ß√£o de patterns
‚Ä¢ Testing Frameworks - Teste de patterns
‚Ä¢ Documentation Tools - Documenta√ß√£o de arquitetura

========================================
RECURSOS ADICIONAIS
========================================

‚Ä¢ Gang of Four - Design Patterns book
‚Ä¢ Refactoring Guru - Pattern explanations
‚Ä¢ SourceMaking - Pattern examples
‚Ä¢ JavaScript Patterns - JS-specific patterns
‚Ä¢ Clean Code - Code quality principles
‚Ä¢ Clean Architecture - Architectural patterns
*/

console.log('\n‚úÖ EXERC√çCIOS DE DESIGN PATTERNS CONCLU√çDOS!');
console.log('üéØ Padr√µes cobertos:');
console.log('   ‚Ä¢ Singleton, Factory, Builder');
console.log('   ‚Ä¢ Proxy, Observer, Command');
console.log('   ‚Ä¢ Chain of Responsibility, Template Method');
console.log('   ‚Ä¢ Strategy, Decorator, Facade');
console.log('   ‚Ä¢ Plugin Architecture');
console.log('\nüöÄ Continue praticando esses padr√µes em projetos reais!');
console.log('üìö Estude outros padr√µes como MVC, MVP, MVVM!');

// Exportar para uso em outros m√≥dulos (se necess√°rio)
if (typeof module !== 'undefined' && module.exports) {
    module.exports = {
        ConfigurationManager,
        NotificationCenter,
        PluginManager,
        ValidationPlugin,
        TransformationPlugin,
        EnrichmentPlugin
    };
}